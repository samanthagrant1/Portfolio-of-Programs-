<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.7.0.1 -->
  <assembly>
    <name>UnityEngine.Networking</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Networking.SpawnDelegate">
      <summary>Signature of spawn functions that are passed to NetworkClient.RegisterSpawnFunction(). This is optional, as in most cases RegisterPrefab will be used instead.</summary>
    </member>
    <member name="T:UnityEngine.Networking.UnSpawnDelegate">
      <summary>Delegate for a function which will handle destruction of objects created with NetworkServer.Spawn.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessageDelegate">
      <summary>The callback delegate used in message handler functions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfo">
      <summary>
        <para>Details about a UNET MatchMaker match.</para>
        <para>This is a data object that represents the data returned from <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> and <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" />.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfoSnapshot">
      <summary>
        <para>A class describing the match information as a snapshot at the time the request was processed on the MatchMaker.</para>
        <para>The information in this class is part of the data list returned when listing open matches through MatchMaker. It describes the instantaneous state at the time the request was handled.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.NetworkMatch">
      <summary>
        <para>A component for communicating with the Unity Multiplayer Matchmaking service.</para>
        <para>This class aggregates all the supported JSON calls into functions that are callable for games that wish to interact with the MatchMaker service. The example code below shows how to use NetworkMatch API.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.AddPlayerMessage">
      <summary>This is passed to handler funtions registered for the AddPlayer built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.EmptyMessage">
      <summary>A utility class to send a network message with no contents.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ErrorMessage">
      <summary>This is passed to handler functions registered for the SYSTEM_ERROR built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.IntegerMessage">
      <summary>A utility class to send simple network messages that only contain an integer.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.NotReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_NOT_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage">
      <summary>
        <para>Information about a change in authority of a non-player in the same network game.</para>
        <para>This information is cached by clients and used during host-migration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoMessage">
      <summary>
        <para>Information about another participant in the same network game.</para>
        <para>This information is cached by clients and used during host-migration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer">
      <summary>A structure used to identify player object on other peers for host migration.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerListMessage">
      <summary>Internal UNET message for sending information about network peers to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReconnectMessage">
      <summary>This network message is used when a client reconnect to the new host of a game.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_REMOVE_PLAYER built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.StringMessage">
      <summary>
        <para>This is a utility class for simple network messages that contain only a string.</para>
        <para>This example sends a message with the name of the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessToken">
      <summary>Access token used to authenticate a client session for the purposes of allowing or disallowing match operations requested by that client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.AppID">
      <summary>The AppID identifies the application on the Unity Cloud or UNET servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.HostPriority">
      <summary>An Enum representing the priority of a client in a match, starting at 0 and increasing.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessLevel">
      <summary>Describes the access levels granted to this client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkID">
      <summary>Network ID, used for match making.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NodeID">
      <summary>The NodeID is the ID used in Relay matches to track nodes in a network.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.SourceID">
      <summary>Identifies a specific game instance.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelQOS">
      <summary>Defines parameters of channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Channels">
      <summary>Class containing constants for default network channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientScene">
      <summary>
        <para>A client manager which contains static client information and functions.</para>
        <para>This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager, but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionConfig">
      <summary>
        <para>This class defines parameters of connection between two peers, this definition includes various timeouts and sizes as well as channel configuration.</para>
        <para>The NetworkServer and NetworkClient classes can be configured with instances of this class. This causes the settings in the ConnectionConfig to be applied to the transport layer connection of the NetworkConnections owned by these objects. The NetworkManager has a ConnectionConfig object that is used to configure servers and clients that it creates. The default channel connection configuration used by the high level components of the networking system is: * channel 0 - Reliable Sequenced channel * channel 1 - Unreliable channel. Some of the attributes of this ConnectionConfig instance can be modified using the inspector UI for the NetworkManager in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionSimulatorConfig">
      <summary>Create configuration for network simulator; You can use this class in editor and developer build only.</summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandler">
      <summary>
        <para>Manage and process HTTP response body data received from a remote server.</para>
        <para>DownloadHandler objects are helper objects. When attached to a <see cref="UnityEngine.Networking.UnityWebRequest" />, they define how to handle HTTP response body data received from a remote server. Generally, they are used to buffer, stream and/or process response bodies. DownloadHandler is a base class. Depending on usage scenario, different specialized classes are available. <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> provides basic buffering, while <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> and <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> provide more efficient solutions for <see cref="UnityEngine.Texture" /> and <see cref="UnityEngine.AssetBundle" /> downloads. For custom use cases, see <see cref="UnityEngine.Networking.DownloadHandlerScript" />.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerAssetBundle">
      <summary>
        <para>A <see cref="UnityEngine.Networking.DownloadHandler" /> subclass specialized for downloading <see cref="UnityEngine.AssetBundle" />s.</para>
        <para>This subclass streams downloaded data into Unity's asset bundle decompression and decoding system on worker threads, providing efficient downloading and processing for <see cref="UnityEngine.AssetBundle" /> objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerAudioClip">
      <summary>
        <para>A <see cref="UnityEngine.Networking.DownloadHandler" /> subclass specialized for downloading audio data for use as <see cref="UnityEngine.AudioClip" /> objects.</para>
        <para>DownloadHandlerAudioClip stores received data in a pre-allocated Unity <see cref="UnityEngine.AudioClip" /> object. It is optimized for downloading audio data from Web servers, and may perform audio data decompression and decoding on a worker thread. For use cases where you wish to download an audio clip via HTTP and use it as an <see cref="UnityEngine.AudioClip" /> within Unity, usage of this class is strongly recommended.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerBuffer">
      <summary>
        <para>A general-purpose <see cref="UnityEngine.Networking.DownloadHandler" /> implementation which stores received data in a native byte buffer.</para>
        <para>This is a general-purpose <see cref="UnityEngine.Networking.DownloadHandler" /> subclass. It stores received data in native memory. It will preallocated a data buffer based on any received <c>Content-Length</c> header, but will expand its buffer should the actual download size exceed the value of <c>Content-Length</c> header (or if a <c>Content-Length</c> header is not received). <c>Note:</c> When accessing <see cref="UnityEngine.Networking.DownloadHandler.data" /> or <see cref="UnityEngine.Networking.DownloadHandler.text" /> on this subclass, a new byte array or string will be allocated each time the property is accessed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerScript">
      <summary>
        <para>An abstract base class for user-created scripting-driven <see cref="UnityEngine.Networking.DownloadHandler" /> implementations.</para>
        <para>On its own, a <see cref="UnityEngine.Networking.DownloadHandlerScript" /> object does no useful work. Instead, it forwards data received from the network to the <see cref="UnityEngine.Networking.DownloadHandler.ReceiveData" /> callback method, as well as invoking other useful callbacks for download-related events. By default, a <see cref="UnityEngine.Networking.DownloadHandlerScript" /> does nothing; however, you can derive your own subclass from DownloadHandlerScript, override some or all of its callbacks and thereby implement completely custom data handling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerTexture">
      <summary>
        <para>A <see cref="UnityEngine.Networking.DownloadHandler" /> subclass specialized for downloading images for use as <see cref="UnityEngine.Texture" /> objects.</para>
        <para>DownloadHandlerTexture stores received data in a pre-allocated Unity <see cref="UnityEngine.Texture" /> object. It is optimized for downloading images from Web servers, and performs image decompression and decoding on a worker thread. For use cases where you wish to download an image via HTTP and use it as a Texture within Unity, usage of this class is strongly recommended.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.GlobalConfig">
      <summary>
        <para>Defines global paramters for network library.</para>
        <para>The NetworkManager has a GlobalConfig instance ( NetworkManager.globalConfig ) that is used to configure the network when started by the NetworkManager. Some of the attributes of this instance can be modified from the NetworkManager inspector UI in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.HostTopology">
      <summary>
        <para>Class defines network topology for host (socket opened by <see cref="UnityEngine.Networking.NetworkTransport.AddHost" /> function). This topology defines: (1) how many connection with default config will be supported and (2) what will be special connections (connections with config different from default).</para>
        <para>Example: p2p game with 10 people in the room and connection to chat server, in this case it will be 10 default connections and one special. The NetworkServer and NetworkClient classed can be configured with a HostTopology instance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter">
      <summary>FilterLog is a utility class that controls the level of logging generated by UNET clients and servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.MessageBase">
      <summary>
        <para>Network message classes should be derived from this class. These message classes can then be sent using the various Send functions of NetworkConnection, NetworkClient and NetworkServer.</para>
        <para>Public data fields of classes derived from MessageBase will be automatically serialized with the class. The virtual methods Serialize and Deserialize may be implemented by developers for precise control, but if they are not implemented, then implementations will be generated for them. In the example below, the methods have implementations, but if those methods were not implemented, the message would still be usable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MsgType">
      <summary>Container class for networking system built-in message types.</summary>
    </member>
    <member name="T:UnityEngine.Networking.MultipartFormDataSection">
      <summary>
        <para>A helper object for form sections containing generic, non-file data.</para>
        <para>This helper object is used similarly to the [WWWForm] method [WWWForm.AddData]. It is used to define non-file form sections.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MultipartFormFileSection">
      <summary>
        <para>A helper object for adding file uploads to multipart forms via the [IMultipartFormSection] API.</para>
        <para>This object is very similar to the [MultipartFormDataSection] object, but all constructors additionally accept (and require) a <c>fileName parameter</c>. If you omit the <c>fileName</c> parameter, this object will provide a default filename.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkAnimator">
      <summary>
        <para>A component to synchronize Mecanim animation states for networked objects.</para>
        <para>The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes the animation parameters that are checked in the inspector view. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour">
      <summary>
        <para>Base class which should be inherited by scripts which contain networking functionality.</para>
        <para>This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a heirarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object. Some of the built-in components of the networking system are derived from NetworkBehaviour, including NetworkTransport, NetworkAnimator and NetworkProximityChecker.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBroadcastResult">
      <summary>A structure that contains data from a NetworkDiscovery server broadcast.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkClient">
      <summary>
        <para>This is a network client class used by the networking system. It contains a NetworkConnection that is used to connection to a network server.</para>
        <para>The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server (NetworkServer) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection">
      <summary>
        <para>A High level network connection. This is used for connections from client-to-server and for connection from server-to-client.</para>
        <para>A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection. A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple "remote" connections and a "local" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity, then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. NetworkConnection objects can "own" networked game objects. Owned objects will be destroyed on the server by default when the connection is destroyed. A connection owns the player objects created by its client, and other objects with client-authority assigned to the corresponding client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkCRC">
      <summary>
        <para>This class holds information about which networked scripts use which QoS channels for updates.</para>
        <para>This channel information is used to ensure that clients and servers are using compatible HLAPI script configurations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkDiscovery">
      <summary>
        <para>The NetworkDiscovery component allows Unity games to find each other on a local network. It can broadcast presence and listen for broadcasts, and optionally join matching games using the NetworkManager.</para>
        <para>This component can run in server mode (by calling StartAsServer) where it broadcasts to other computers on the local network, or in client mode (by calling StartAsClient) where it listens for broadcasts from a server. This class should be override to receive calls from OnReceivedBroadcast.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkHash128">
      <summary>A 128 bit number used to represent assets in a networking context.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkIdentity">
      <summary>
        <para>The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines.</para>
        <para>The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a heirarchy of subcomponents, the NetworkIdentity must be on the root of the heirarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a heirarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: * Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits * Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. * Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask * Alternatively, calling SetDirtyBit() writes directly to the dirty mask * NetworkIdentity objects are checked on the server as part of it’s update loop * If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object * The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object * NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits * NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed * If OnSerialize returns true for a NetworkBehaviour, the dirty mask is reset for that NetworkBehaviour, so it will not send again until its value changes. * The UpdateVars packet is sent to ready clients that are observing the object On the client: * an UpdateVars packet is received for an object * The OnDeserialize function is called for each NetworkBehaviour script on the object * Each NetworkBehaviour script on the object reads a dirty mask. * If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more * If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set * If there are SyncVar hook functions, those are invoked with the value read from the stream.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkInstanceId">
      <summary>This is used to identify networked objects across all participants of a network. It is assigned at runtime by the server when an object is spawned.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyManager">
      <summary>
        <para>This is a specialized NetworkManager that includes a networked lobby.</para>
        <para>The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects. NetworkLobbyManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager, there are new virtual functions on the NetworkLobbyManager that begin with "OnLobby". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager. The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyPlayer">
      <summary>
        <para>This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system.</para>
        <para>The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManager">
      <summary>
        <para>The NetworkManager is a convenience class for the HLAPI for managing networking systems.</para>
        <para>For simple network applications the NetworkManager can be used to control the HLAPI. It provides simple ways to start and stop client and servers, to manage scenes, and has virtual functions that user code can use to implement handlers for network events. The NetworkManager deals with one client at a time. The example below shows a minimal network setup.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManagerHUD">
      <summary>
        <para>An extension for the NetworkManager that displays a default HUD for controlling the network state of the game.</para>
        <para>This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessage">
      <summary>The details of a network message received by a client or server on a network connection.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager">
      <summary>
        <para>A component that manages the process of a new host taking over a game when the old host is lost. This is referred to as "host migration". The migration manager sends information about each peer in the game to all the clients, and when the host is lost because of a crash or network outage, the clients are able to choose a new host, and continue the game. The old host is able to rejoin the new game on the new host. The state of SyncVars and SyncLists on all objects with NetworkIdentities in the scene is maintained during a host migration. This also applies to custom serialized data for objects. All of the player objects in the game are disabled when the host is lost. Then, when the other clients rejoin the new game on the new host, the corresponding players for those clients are re-enabled on the host, and respawned on the other clients. No player state data is lost during a host migration.</para>
        <para>This class provides a simple default UI for controlling the behaviour when the host is lost. The UI can be disabled with the showGUI property. There are a number of virtual functions that can be implemented to customize the behaviour of host migration. Note that only data that is available to clients will be preserved during a host migration. If there is data that is only on the server, then it will not be available to the client that becomes the new host. This means data on the host that is not in SyncVars or SyncLists will not be available after a host migration. The callback function OnStartServer is invoked for all networked objects when the client becomes a new host. On the new host, the NetworkMigrationManager uses the function NetworkServer.BecomeNewHost() to construct a networked server scene from the state in the current ClientScene. The peers in a game with host migration enabled are identified by their connectionId on the server. When a client reconnects to the new host of a game, this connectionId is passed to the new host so that it can match this client with the client that was connected to the old host. This Id is set on the ClientScene as the "reconnectId". The old host of the game, the one that crashed or lost its network connection, can also reconnect to the new game as a client. This client uses the special ReconnectId of ClientScene.ReconnectIdHost (which is zero).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker">
      <summary>
        <para>Component that controls visibility of networked objects for players.</para>
        <para>Any object with this component on it will not be visible to players more than a (configurable) distance away.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkReader">
      <summary>
        <para>General purpose serializer for UNET (for reading byte arrays).</para>
        <para>This class works with NetworkWriter and is used for serializing data for UNet commands, RPC calls, events and low level messages.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSceneId">
      <summary>This is used to identify networked objects in a scene. These values are allocated in the editor and are persistent for the lifetime of the object in the scene.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServer">
      <summary>
        <para>The NetworkServer uses a NetworkServerSimple for basic network functionality and adds more game-like functionality.</para>
        <para>NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client. The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance. The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager. The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object. There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServerSimple">
      <summary>
        <para>The NetworkServerSimple is a basic server class without the "game" related functionality that the NetworkServer class has.</para>
        <para>This class has no scene management, spawning, player objects, observers, or static interface like the NetworkServer class. It is simply a server that listens on a port, manages connections, and handles messages. There can be more than one instance of this class in a process. Like the NetworkServer and NetworkClient classes, it allows the type of NetworkConnection class created for new connections to be specified with SetNetworkConnectionClass(), so custom types of network connections can be used with it. This class can be used by overriding the virtual functions OnConnected, OnDisconnected and OnData; or by registering message handlers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkStartPosition">
      <summary>
        <para>This component is used to make a gameObject a starting position for spawning player objects in multiplayer games.</para>
        <para>This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform">
      <summary>
        <para>A component to synchronize the position and rotation of networked objects.</para>
        <para>The movement of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be controlled locally on the owning client, then movement state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be controlled on the server and movement state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformChild">
      <summary>
        <para>A component to synchronize the position of child transforms of networked objects.</para>
        <para>There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformVisualizer">
      <summary>This is a helper component to help understand and debug networked movement synchronization with the NetworkTransform component.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransport">
      <summary>Transport Layer API.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkWriter">
      <summary>General purpose serializer for UNET (for serializing data to byte arrays).</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerController">
      <summary>This represents a networked player.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncList``1">
      <summary>
        <para>This is the base class for type-specific SyncList classes.</para>
        <para>A SyncList can only be of the following type; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListBool">
      <summary>A list of booleans that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListFloat">
      <summary>A list of floats that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListInt">
      <summary>A list of integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListString">
      <summary>This is a list of strings that will be synchronized from the server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListStruct``1">
      <summary>
        <para>This class is used for lists of structs that are synchronized from the server to clients.</para>
        <para>To use SyncListStruct, derive a new class with your struct as the generic parameter.</para>
        <para>Make sure your struct members are non-static public members. We allow the following types to be used in your struct; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Other structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached. Serialization methods will be auto-generated for this new class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListUInt">
      <summary>A list of unsigned integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.UnityWebRequest">
      <summary>
        <para>The UnityWebRequest object is used to communicate with web servers.</para>
        <para>UnityWebRequests handle the flow of HTTP communication with web servers. Other objects - specifically <see cref="UnityEngine.Networking.DownloadHandler" /> and <see cref="UnityEngine.Networking.UploadHandler" /> - govern downloading and uploading data, respectively. A set of static functions are provided for convenience; these return UnityWebRequest objects properly configured for many common use cases. <c>See:</c><see cref="UnityEngine.Networking.UnityWebRequest.Get" />, <see cref="UnityEngine.Networking.UnityWebRequest.Post" />, <see cref="UnityEngine.Networking.UnityWebRequest.Put" />, <see cref="UnityEngine.Networking.UnityWebRequest.GetTexture" />. <c>Note:</c> Most properties on the UnityWebRequest object cannot be altered once the UnityWebRequest has begun communicating with a remote server by calling the <see cref="UnityEngine.Networking.UnityWebRequest.Send" /> method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UploadHandler">
      <summary>
        <para>Helper object for <see cref="UnityEngine.Networking.UnityWebRequest" />s. Manages the buffering and transmission of body data during HTTP requests.</para>
        <para>When attached to a <see cref="UnityEngine.Networking.UnityWebRequest" />, an UploadHandler object handles all information regarding the buffering and transmission of body data during an HTTP request. By placing data in an UploadHandler and attaching it to a <see cref="UnityEngine.Networking.UnityWebRequest" />, the <see cref="UnityEngine.Networking.UnityWebRequest" /> is implicitly instructed to transmit the UploadHandler's data to the remote server. The data will always be delivered as HTTP request body data. UploadHandler is a base class and cannot be directly instantiated. Currently, only one type of UploadHandler is available: <see cref="UnityEngine.Networking.UploadHandlerRaw" />.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UploadHandlerRaw">
      <summary>
        <para>A general-purpose <see cref="UnityEngine.Networking.UploadHandler" /> subclass, using a native-code memory buffer.</para>
        <para>This subclass copies input data into a native-code memory buffer at construction time, and transmits that data verbatim as HTTP request body data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Utility">
      <summary>Networking Utility.</summary>
    </member>
    <member name="T:UnityEngine.Networking.IMultipartFormSection">
      <summary>
        <para>An interface for composition of data into multipart forms.</para>
        <para>In order to provide a finer level of control for those wishing to generate multipart form data, but without forcing most users to refer to <see href="rfc2388" cref="RFC 2388" />, Unity provides this simple interface which the UnityWebRequest API can use to serialize complex data into properly-formatted bytes. For convenience, the two general types of form sections have been encapsulated into two stock implementations of IMultipartFormSection. Both stock implementations are simply controlled via their constructors. IMultipartFormSection implementors are converted into bytes via [UnityWebRequest.SerializeFormSections].</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelOption">
      <summary>An enumeration of the options that can be set on a network channel.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkError">
      <summary>Possible <see cref="UnityEngine.Networking.NetworkTransport" /> errors.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkEventType">
      <summary>Event that is returned when calling the <see cref="UnityEngine.Networking.NetworkTransport.Receive" /> and <see cref="UnityEngine.Networking.NetworkTransport.ReceiveFromHost" /> functions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerSpawnMethod">
      <summary>Enumeration of methods of where to spawn player objects in multiplayer games.</summary>
    </member>
    <member name="T:UnityEngine.Networking.QosType">
      <summary>Enumeration of all supported quality of service channel modes.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ReactorModel">
      <summary>Define how unet will handle network io operation.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Version">
      <summary>Enumeration of Networking versions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients.</para>
        <para>A [Client] method returns immediately if NetworkClient.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on clients. This would redundant for [ClientRPC] functions, as being client-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Client] custom attribute, except that it does not generate a warning in the console if called on a server. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
        <para>This will make the explosion code only run when the trigger is hit on the client.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server.</para>
        <para>[ClientRPC] functions are called by code on Unity Multiplayer servers, and then invoked on corresponding GameObjects on clients connected to the server. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Rpc" and cannot be static.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.CommandAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on the server by sending a command from a client.</para>
        <para>[Command] functions are invoked on the player GameObject associated with a connection. This is set up in response to the "ready" message, by passing the player GameObject to the NetworkServer.PlayerIsReady() function. The arguments to the command call are serialized across the network, so that the server function is invoked with the same values as the function on the client. These functions must begin with the prefix "Cmd" and cannot be static.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSettingsAttribute">
      <summary>This attribute is used to configure the network settings of scripts that are derived from the NetworkBehaviour base class.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers.</para>
        <para>A [Server] method returns immediately if NetworkServer.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on server. This would redundant for [Command] functions, as being server-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Server] custom attribute, except that it does not generate a warning in the console if called on a client. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncEventAttribute">
      <summary>
        <para>This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the sserver.</para>
        <para>[SyncEvent] events are called by user code on UNET servers, and then invoked on corresponding client objects on clients connected to the server. The arguments to the Event call are seriialized across the network, so that the client event is invoked with the same values as the function on the server. These events must begin with the prefix "Event".</para>
        <para>SyncEvents allow networked actions to be propagated to other scripts attached to the object. In the example above, the Other class registers for the TakeDamage event on the DamageClass. When the event happens on the DamageClass on the server, the TakeDamage() method will be invoked on the Other class on the client object. This allows modular network aware systems to be created, that can be extended by new scripts that respond to the events generated by them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncVarAttribute">
      <summary>
        <para>[SyncVar] is an attribute that can be put on member variables of NetworkBehaviour classes. These variables will have their values sychronized from the server to clients in the game that are in the ready state.</para>
        <para>Setting thje value of a [SyncVar] marks it as dirty, so it will be sent to clients at the end of the current frame. Only simple values can be marked as [SyncVars]. The type of the SyncVar variable cannot be from an external DLL or assembly.</para>
        <para>The allowed SyncVar types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Structs containing allowable types .</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.TargetRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server. Unlike the ClientRpc attribute, these functions are invoked on one individual target client, not all of the ready clients.</para>
        <para>[TargetRpc] functions are called by user code on the server, and then invoked on the corresponding client object on the client of the specified NetworkConnection. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Target" and cannot be static. The first argument to an TargetRpc function must be a NetworkConnection object.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.accessToken">
      <summary>
        <para>The binary access token this client uses to authenticate its session for future commands.</para>
        <para>This is a binary identifier generated to help identify and authenticate a multiplayer client to matchmaker. To associate it with a match, you must make sure that Utility.SetAccessTokenForNetwork() is given this identifier and the network ID associated with the match in question. Once you have done this, you can then make calls to the matchmaker that require its use, such as <see cref="UnityEngine.Networking.Match.NetworkMatch.DropConnection" />. If the default callback MatchMakingClient functions are used for OnMatchCreate and OnMatchJoin this is set automatically.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.address">
      <summary>
        <para>IP address of the host of the match,.</para>
        <para>This is the address of the match to which a connection should be made. When using Relay server, this will be the IP address of the Relay server that has been told to reserve a seat for this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.domain">
      <summary>
        <para>The numeric domain for the match.</para>
        <para>This is a number, chosen by the developer that can be used to silo use of the MatchMaker within a single game. For instance if app domain 1 creates a match, that match will only appear to <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> requests with domain 1. This can be useful to handle different versions of a single game that may not be able to play with each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.networkId">
      <summary>
        <para>The unique ID of this match.</para>
        <para>This identifier is a 64bit number indicating the unique match number in MatchMaker. It's used for talking to MatchMaker and specifying a particular match for any request that needs to adjust the state of an existing match. This number is globally unique and never reused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.nodeId">
      <summary>
        <para>NodeID for this member client in the match.</para>
        <para>A NodeID is the 16-bit identifier for a specific seat in a match. It is allocated by the MatchMaker when creating or joining a match, and is used primarially when talking to the Relay Server about a specific seat.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.port">
      <summary>
        <para>Port of the host of the match.</para>
        <para>This is the port of the match to which a connection should be made. When using Relay server, this will be the port on the Relay server that has been told to reserve a seat for this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.usingRelay">
      <summary>
        <para>This flag indicates whether or not the match is using a Relay server.</para>
        <para>This value will be true if the MatchInfo relates to a Relay server seat allocated by the MatchMaker.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.averageEloScore">
      <summary>
        <para>The average Elo score of the match.</para>
        <para>An Elo score is an optional data field describing a skill level. This averageEloScore is the average of all seats currently participating in the described match. For this field to be non-zero, your clients must supply an Elo score when creating or joining a match. The average score will automatically updated based on this.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.currentSize">
      <summary>
        <para>The current number of players in the match.</para>
        <para>This is the current number of players in this match, including the host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.directConnectInfos">
      <summary>
        <para>The collection of direct connect info classes describing direct connection information supplied to the MatchMaker.</para>
        <para>This contains the list of direct connect infos for a match. Direct connect infos are optional data objects describing alternate ways to connect to the specified seat. If you have set up your clients to supply this information, this list will contain the private and public addresses for each client. This is useful for allowing the clients to connect to each other directly across the Internet or a LAN. A direct connect info is not required or supplied when a seat is only accessible via Relay server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.hostNodeId">
      <summary>
        <para>The NodeID of the host for this match.</para>
        <para>The NodeID for the host is published to everyone in the match. This indicates which connected match member is the Unity Multiplayer server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.isPrivate">
      <summary>Describes if the match is private. Private matches are unlisted in ListMatch results.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.matchAttributes">
      <summary>The collection of match attributes on this match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.maxSize">
      <summary>The maximum number of players this match can grow to.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.name">
      <summary>The text name for this match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.networkId">
      <summary>
        <para>The network ID for this match.</para>
        <para>This identifier is a 64-bit number indicating a unique match in the matchmaker. You should use it in any request to the matchmaker that needs to adjust the state of an existing match. This number is globally unique and never reused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.NetworkMatch.baseUri">
      <summary>
        <para>The base URI of the MatchMaker that this NetworkMatch will communicate with.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com Using this address will connect a client to the nearest datacenter geographically. However, because data centers are siloed from each other you will only see matches occuring inside your current data center. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.CreateMatch(System.String,System.UInt32,System.Boolean,System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Use this function to create a new match. The client which calls this function becomes the host of the match.</para>
        <para>When creating a match you should call this function and wait for the callback to be invoked before proceeding. The callback will indicate if the call was successful as well as extended information if it failed. After receiving the response callback you then should call StartHost() with the passed in MatchInfo.</para>
      </summary>
      <param name="matchName">The text string describing the name for this match.</param>
      <param name="matchSize">When creating a match, the matchmaker will use either this value, or the maximum size you have configured online at https://multiplayer.unity3d.com, whichever is lower. This way you can specify different match sizes for a particular game, but still maintain an overall size limit in the online control panel.</param>
      <param name="matchAdvertise">A bool indicating if this match should be available in <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> results.</param>
      <param name="matchPassword">A text string indicating if this match is password protected. If it is, all clients trying to join this match must supply the correct match password.</param>
      <param name="publicClientAddress">The optional public client address. This value is stored on the matchmaker and given to clients listing matches. It is intended to be a network address for connecting to this client directly over the internet. This value will only be present if a publicly available address is known, and direct connection is supported by the matchmaker.</param>
      <param name="privateClientAddress">The optional private client address. This value is stored on the matchmaker and given to clients listing matches. It is intended to be a network address for connecting to this client directly on a local area network. This value will only be present if direct connection is supported by the matchmaker. This may be an empty string and it will not affect the ability to interface with matchmaker or use relay server.</param>
      <param name="eloScoreForMatch">The Elo score for the client hosting the match being created. If this number is set on all clients to indicate relative skill level, this number is used to return matches ordered by those that are most suitable for play given a listing player's skill level. This may be 0 on all clients, which would disable any Elo calculations in the MatchMaker.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DestroyMatch(UnityEngine.Networking.Types.NetworkID,System.Int32,Networking.Match.NetworkMatch.BasicResponseDelegate)">
      <summary>
        <para>This function is used to tell MatchMaker to destroy a match in progress, regardless of who is connected.</para>
        <para>This function is not part of the normal MatchMaker flow and is there to allow termination of a match immediatly. For normal flow, each client disconnecting should call <see cref="UnityEngine.Networking.Match.NetworkMatch.DropConnection" /> with their own information; Once the last client leaves a match, the match will be immediately cleaned up. This function is protected by the authentication token given to the client when it creates the match. Only a host (which is automatically granted admin rights) is allowed to call <see cref="UnityEngine.Networking.Match.NetworkMatch.DestroyMatch" />. Anyone else will be denied access.</para>
      </summary>
      <param name="netId">The NetworkID of the match to terminate.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <param name="callback">The callback to be called when the request completes.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DropConnection(UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.NodeID,System.Int32,Networking.Match.NetworkMatch.BasicResponseDelegate)">
      <summary>
        <para>A function to allow an individual client to be dropped from a match.</para>
        <para>This function automatically calls OnClientDisconnect to tell the matchmaker to clean up the client state in the Unity Multiplayer service. When a client is cleaned up it will be disconnected from the relay server and will no longer be part of the current match. This function is auth token protected. The auth token is generated when a client creates or joins a match. This function will only succeed if the caller is the client being dropped or is the match host (which is a match administrator). All other callers will be denied access.</para>
      </summary>
      <param name="netId">The NetworkID of the match the client to drop belongs to.</param>
      <param name="dropNodeId">The NodeID of the client to drop inside the specified match.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <param name="callback">The callback to invoke when the request completes.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.JoinMatch(UnityEngine.Networking.Types.NetworkID,System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para>The function used to tell MatchMaker the current client wishes to join a specific match.</para>
        <para>This function should be called after getting results from a call to <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> and picking a match to join. Upon receiving this request, the MatchMaker will reserve a seat on the Relay server this match is talking through and fetch the info needed for this client to connect to that Relay server. Once the callback completes, this client will have the necessary to continue connecting to the chosen match. To do so you then should call StartClient() with the passed in MatchInfo.</para>
      </summary>
      <param name="netId">The NetworkID of the match to join. This is found through calling <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> and picking a result from the returned list of matches.</param>
      <param name="matchPassword">The password of the match. Leave empty if there is no password for the match, and supply the text string password if the match was configured to have one of the <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> request.</param>
      <param name="publicClientAddress">The optional public client address. This value will be stored on the matchmaker and given to other clients listing matches. You should send this value if you want your players to be able to connect directly with each other over the internet. Alternatively you can pass an empty string and it will not affect the ability to interface with matchmaker or use relay server.</param>
      <param name="privateClientAddress">The optional private client address. This value will be stored on the matchmaker and given to other clients listing matches. You should send this value if you want your players to be able to connect directly with each other over a Local Area Network. Alternatively you can pass an empty string and it will not affect the ability to interface with matchmaker or use relay server.</param>
      <param name="eloScoreForClient">The Elo score for the client joining the match being created. If this number is set on all clients to indicate relative skill level, this number is used to return matches ordered by those that are most suitable for play given a listing player's skill level. This may be 0 on all clients, which would disable any Elo calculations in the MatchMaker.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.ListMatches(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <para>The function to list ongoing matches in the MatchMaker.</para>
        <para>The <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> function returns page-based results of the currently active matches that agree with the supplied parameter to this function. You should call this initially with a page number starting at zero, and a reasonable page size (for example, 10). Too large a page will slow down the time required to download the information related to these matches. The callback will be invoked with data containing up to the resultPageSize as the number of matches (for example, if startPageNumber is currently 3 and resultPageSize is 5, the data passed into the callback will be the matches that correspond to results 15-20 in the list of results). Then you can call this function repeatedly, incrementing the startPageNumber and keeping the resultPageSize and matchNameFilter fixed in order to keep the results semi stable (matches may be created or destroyed as you call into this and the results will reflect that).</para>
      </summary>
      <param name="startPageNumber">The current page to list in the return results.</param>
      <param name="resultPageSize">The size of the page requested. This determines the maximum number of matches contained in the list of matches passed into the callback.</param>
      <param name="matchNameFilter">The text string name filter. This is a partial wildcard search against match names that are currently active, and can be thought of as matching equivalent to *&lt;matchNameFilter&gt;* where any result containing the entire string supplied here will be in the result set.</param>
      <param name="filterOutPrivateMatchesFromResults">Boolean that indicates if the response should contain matches that are private (meaning matches that are password protected).</param>
      <param name="eloScoreTarget">The Elo score target for the match list results to be grouped around. If used, this should be set to the Elo level of the client listing the matches so results will more closely match that player's skill level. If not used this can be set to 0 along with all other Elo refereces in funcitons like <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> or <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" />.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.SetMatchAttributes(UnityEngine.Networking.Types.NetworkID,System.Boolean,System.Int32,Networking.Match.NetworkMatch.BasicResponseDelegate)">
      <summary>
        <para>This function allows the caller to change attributes on a match in progress.</para>
        <para>Only the host (who is a match admin) can change attributes of a match. This is authenticated using the authToken given to the host when the match is created. Anyone else will get access denied on this request.</para>
      </summary>
      <param name="networkId">The NetworkID of the match to set attributes on.</param>
      <param name="isListed">A bool indicating whether the match should be listed in <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> results after this call is complete.</param>
      <param name="requestDomain">The request domain for this request. Only requests in the same domain can interface with each other. For example if a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> is made with domain 1, only ListMatches that also specify domain 1 will find that match. Use this value to silo different (possibly incompatible) client versions.</param>
      <param name="callback">The callback invoked after the call has completed, indicating if it was successful or not.</param>
      <returns>This function is asynchronous and will complete at some point in the future, when the coroutine has finished communicating with the service backend.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData">
      <summary>The extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize">
      <summary>The size of the extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId">
      <summary>
        <para>The playerId of the new player.</para>
        <para>This is specified by the client when they call NetworkClient.AddPlayer(someId). The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ErrorMessage.errorCode">
      <summary>
        <para>The error code.</para>
        <para>This is a value from the UNETError enumeration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.IntegerMessage.value">
      <summary>The integer value to serialize.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState">
      <summary>The new state of authority for the object referenced by this message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId">
      <summary>The connection Id (on the server) of the peer whose authority is changing for the object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId">
      <summary>The network id of the object whose authority state changed.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address">
      <summary>The IP address of the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId">
      <summary>The id of the NetworkConnection associated with the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost">
      <summary>True if this peer is the host of the network game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou">
      <summary>True if the peer if the same as the current client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds">
      <summary>The players for this peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port">
      <summary>The network port being used by the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId">
      <summary>The networkId of the player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId">
      <summary>
        <para>The playerControllerId of the player GameObject.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId">
      <summary>The connectionId of this client on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.peers">
      <summary>The list of participants in a networked game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData">
      <summary>Additional data.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize">
      <summary>Size of additional data.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId">
      <summary>The networkId of this player on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId">
      <summary>This client's connectionId on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId">
      <summary>
        <para>The playerControllerId of the player that is rejoining.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId">
      <summary>
        <para>The player ID of the player GameObject which should be removed.</para>
        <para>This is specified by the client when they call NetworkClient.RemovePlayer(someId). The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.StringMessage.value">
      <summary>The string that will be serialized.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessToken.array">
      <summary>Binary field for the actual token.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.GetByteString">
      <summary>Accessor to get an encoded string from the m_array data.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.IsValid">
      <summary>Checks if the token is a valid set of data with respect to default values (returns true if the values are not default, does not validate the token is a current legitimate token with respect to the server's auth framework).</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.AppID.Invalid">
      <summary>Invalid AppID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.HostPriority.Invalid">
      <summary>The Invalid case for a HostPriority. An Invalid host priority is not a valid host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Invalid">
      <summary>Invalid access level, signifying no access level has been granted/specified.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.User">
      <summary>User access level. This means you can do operations which affect yourself only, like disconnect yourself from the match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Owner">
      <summary>Access level Owner, generally granting access for operations key to the peer host server performing it's work.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Admin">
      <summary>Administration access level, generally describing clearence to perform game altering actions against anyone inside a particular match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkID.Invalid">
      <summary>Invalid NetworkID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NodeID.Invalid">
      <summary>The invalid case of a NodeID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.SourceID.Invalid">
      <summary>Invalid SourceID.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ChannelQOS.QOS">
      <summary>Channel quality of service.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor(UnityEngine.Networking.QosType)">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
      <param name="value">Requested type of quality of service (default Unreliable).</param>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor(UnityEngine.Networking.ChannelQOS)">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
      <param name="channel">Copy constructor.</param>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultReliable">
      <summary>The id of the default reliable channel used by the UNet HLAPI, This channel is used for state updates and spawning.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultUnreliable">
      <summary>The id of the default unreliable channel used for the UNet HLAPI. This channel is used for movement updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.localPlayers">
      <summary>
        <para>A list of all players added to the game.</para>
        <para>These are the players on this client, not all of the players in the game on the server. The client has no explicit knowledge of the player objects of other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the client.</para>
        <para>The key of the dictionary is the NetworkIdentity netId of the objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.prefabs">
      <summary>
        <para>This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab().</para>
        <para>The key to the dictionary is the prefab asset Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.ready">
      <summary>
        <para>Returns true when a client's connection has been set to ready.</para>
        <para>A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game. This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady(). This is done when changing scenes so that clients don't receive state update messages during scene loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.readyConnection">
      <summary>
        <para>The NetworkConnection object that is currently "ready". This is the connection to the server where objects are spawned from.</para>
        <para>This connection can be used to send messages to the server. There can only be one ready connection at a time. There can be multiple NetworkClient instances in existence, each with their own NetworkConnections, but there is only one ClientScene instance and corresponding ready connection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.reconnectId">
      <summary>
        <para>The reconnectId to use when a client reconnects to the new host of a game after the old host was lost.</para>
        <para>This will be ClientScene.ReconnectIdInvalid by default (-1), and will be ClientScene.ReconnectIdHost when the old host is reconnecting to the host of the new game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdHost">
      <summary>A constant ID used by the old host when it reconnects to the new host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdInvalid">
      <summary>An invalid reconnect Id.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.spawnableObjects">
      <summary>
        <para>This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.</para>
        <para>The key to the dictionary is the NetworkIdentity sceneId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(System.Int16)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ClearSpawners">
      <summary>This clears the registered spawn prefabs and spawn handler functions for this client.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ConnectLocalServer">
      <summary>
        <para>Create and connect a local client instance to the local server. This makes the client into a "host" - a client and server in the same process.</para>
        <para>The returned local client acts like normal remote client but internally all messages are routed directly to the server process. Commands from a local client are executed synchronously on the server.</para>
      </summary>
      <returns>A client object for communicating with the local server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.DestroyAllClientObjects">
      <summary>
        <para>Destroys all networked objects on the client.</para>
        <para>This can be used to clean up when a network connection is closed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.FindLocalObject(UnityEngine.Networking.NetworkInstanceId)">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game. This number is the same on the server and all connected clients for a particular object, so it can be used to identify objects across the network. The FindLocalObject() function is called on a client to transform a netId received from a server to a local game object.</para>
      </summary>
      <param name="netId">The id of the networked object.</param>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.Ready(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Signal that the client connection is ready to enter the game.</para>
        <para>This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.</para>
      </summary>
      <param name="conn">The client connection which is ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="newAssetId">An assetId to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterSpawnHandler(UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>This is an advanced spawning function that registers a custom assetId with the UNET spawning system.</para>
        <para>This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.</para>
      </summary>
      <param name="assetId">Custom assetId string.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RemovePlayer(System.Int16)">
      <summary>
        <para>Removes the specified player ID from the game.</para>
        <para>Both the client and the server destroy the player GameObject and remove it from the player list. The playerControllerId is scoped to this client, not global to all players or clients. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
      <param name="playerControllerId">The local playerControllerId number to be removed.</param>
      <returns>Returns true if the player was successfully destoyed and removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetLocalObject(System.UInt32,UnityEngine.GameObject)">
      <summary>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game.</para>
        <para>This number is the same on the server and all connected clients for a particular object, so it can be used to identify objects across the network. The FindLocalObject() function is called on a client to transform a netId received from a server to a local game object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetReconnectId(System.Int32,UnityEngine.Networking.NetworkSystem.PeerInfoMessage[])">
      <summary>Sets the Id that the ClientScene will use when reconnecting to a new host after host migration.</summary>
      <param name="newReconnectId">The Id to use when reconnecting to a game.</param>
      <param name="peers">The set of known peers in the game. This may be null.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterPrefab(UnityEngine.GameObject)">
      <summary>Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab.</summary>
      <param name="prefab">The prefab to be removed from registration.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterSpawnHandler(UnityEngine.Networking.NetworkHash128)">
      <summary>Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler().</summary>
      <param name="assetId">The assetId for the handler to be removed for.</param>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AckDelay">
      <summary>How long in ms receiver will wait before it will force send acknowledgements back without waiting any payload.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AllCostTimeout">
      <summary>Defines timeout in ms after that message with AllCost deliver qos will force resend without acknowledgement waiting.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ChannelCount">
      <summary>Return amount of channels for current configuration.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.Channels">
      <summary>Allow access to channels list.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ConnectTimeout">
      <summary>Timeout in ms which library will wait before it will send another connection request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.DisconnectTimeout">
      <summary>How long (in ms) library will wait before it will consider connection as disconnected.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.FragmentSize">
      <summary>What should be maximum fragment size (in Bytes) for fragmented messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.IsAcksLong">
      <summary>If it is true, connection will use 64 bit mask to acknowledge received reliable messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageCount">
      <summary>Maximum amount of small reliable messages which will combine in one "array of messages". Useful if you are going to send a lot of small reliable messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageSize">
      <summary>Maximum size of reliable message which library will consider as small and will try to combine in one "array of messages" message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxConnectionAttempt">
      <summary>How many attempt library will get before it will consider the connection as disconnected.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxSentMessageQueueSize">
      <summary>Defines maximum messages which will wait for sending before user will receive error on Send() call.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MinUpdateTimeout">
      <summary>Minimal send update timeout (in ms) for connection. this timeout could be increased by library if flow control will required.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.NetworkDropThreshold">
      <summary>How many (in %) packet need to be dropped due network condition before library will throttle send rate.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.OverflowDropThreshold">
      <summary>How many (in %) packet need to be dropped due lack of internal bufferes before library will throttle send rate.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PacketSize">
      <summary>What is a maximum packet size (in Bytes) (including payload and all header). Packet can contain multiple messages inside.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PingTimeout">
      <summary>Timeout in ms between control protocol messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ReducedPingTimeout">
      <summary>Timeout in ms for control messages which library will use before it will accumulate statistics.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ResendTimeout">
      <summary>Minimum timeout (in ms) which library will wait before it will resend reliable message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.UsePlatformSpecificProtocols">
      <summary>
        <para>When starting a server use protocols that make use of platform specific optimisations where appropriate rather than cross-platform protocols. (Sony consoles only).</para>
        <para>Set this flag to use platform specific protocols if the platform support them. Use when creating the server only. Not applicable when creating client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.WebSocketReceiveBufferMaxSize">
      <summary>Defines received buffer size for web socket host; you should set this to the size of the biggest legal frame that you support. If the frame size is exceeded, there is no error, but the buffer will spill to the user callback when 	full. In case zero 4k buffer will be used. Default value is zero.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.#ctor">
      <summary>Will create default connection config or will copy them from another.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.#ctor(UnityEngine.Networking.ConnectionConfig)">
      <summary>Will create default connection config or will copy them from another.</summary>
      <param name="config">Connection config.</param>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.GetChannel(System.Byte)">
      <summary>Return the QoS set for the given channel or throw an out of range exception.</summary>
      <param name="idx">Index in array.</param>
      <returns>Channel QoS.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.Validate(UnityEngine.Networking.ConnectionConfig)">
      <summary>Validate parameters of connection config. Will throw exceptions if parameters are incorrect.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionSimulatorConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Will create object describing network simulation parameters.</summary>
      <param name="outMinDelay">Minimal simulation delay for outgoing traffic in ms.</param>
      <param name="outAvgDelay">Average simulation delay for outgoing traffic in ms.</param>
      <param name="inMinDelay">Minimal simulation delay for incoming traffic in ms.</param>
      <param name="inAvgDelay">Average simulation delay for incoming traffic in ms.</param>
      <param name="packetLossPercentage">Probability of packet loss 0 &lt;= p &lt;= 1.</param>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionSimulatorConfig.Dispose">
      <summary>Destructor.</summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.data">
      <summary>
        <para>Returns the raw bytes downloaded from the remote server, or <c>null</c>. (Read Only)</para>
        <para>This property returns the raw bytes downloaded from the remote server. If no data has yet been received, this property returns <c>null</c>. <c>Note:</c> Note: The precise memory allocation behavior of this property changes depending on subclass. See subclass documentation of GetData for further information on exactly how the data property handles memory allocation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.isDone">
      <summary>Returns <c>true</c> if this DownloadHandler has been informed by its parent <see cref="UnityEngine.Networking.UnityWebRequest" /> that all data has been received, and this DownloadHandler has completed any necessary post-download processing. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.text">
      <summary>Convenience property. Returns the bytes from data interpreted as a UTF8 string. (Read Only)</summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.Dispose">
      <summary>
        <para>Signals that this [DownloadHandler] is no longer being used, and should clean up any resources it is using.</para>
        <para>This method must be called once you have finished using a [DownloadHandler] object. For convenience, [UnityWebRequest] exposes the [UnityWebRequest.disposeDownloadHandlerOnDispose] property, which will automatically call this method when [UnityWebRequest.Dispose] is called. If you elect not to use [UnityWebRequest.disposeDownloadHandlerOnDispose] (by setting it to false), then you must call Dispose on the [DownloadHandler] yourself. This should only be in rare cases, such as when you wish to save the data in the [DownloadHandler]'s internal buffer(s) for later processing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.CompleteContent">
      <summary>
        <para>Callback, invoked when all data has been received from the remote server.</para>
        <para>This callback is guaranteed to be invoked on the main thread. If not overridden, this callback has no default behavior and will no-op.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.GetData">
      <summary>
        <para>Callback, invoked when the data property is accessed.</para>
        <para>The return value of this method will be returned as the value of the data property. This method will be invoked on the main thread. If not overridden, the default behavior of this callback is to return <c>null</c>.</para>
      </summary>
      <returns>Byte array to return as the value of the data property.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.GetProgress">
      <summary>
        <para>Callback, invoked when <see cref="UnityEngine.Networking.UnityWebRequest.downloadProgress" /> is accessed.</para>
        <para>This callback will be invoked when scripts access the <see cref="UnityEngine.Networking.UnityWebRequest.downloadProgress" /> property on this DownloadHandler's parent <see cref="UnityEngine.Networking.UnityWebRequest" />. The return value of this method will be returned as the value of the <see cref="UnityEngine.Networking.UnityWebRequest.downloadProgress" /> property. This callback will be invoked on the main thread. If not overridden, the default behavior of this callback is to return <c>0.5</c>.</para>
      </summary>
      <returns>The return value for <see cref="UnityEngine.Networking.UnityWebRequest.downloadProgress" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.GetText">
      <summary>
        <para>Callback, invoked when the text property is accessed.</para>
        <para>The return value of this method will be returned as the value of the data property. This method will be invoked on the main thread. If not overridden, the default behavior of this callback is to call GetData. If GetData returns <c>null</c> or an empty string, then this method will return <c>null</c> or an empty string (respectively). Otherwise, this method will decode the byte array returned from GetData as a UTF8 string and return the decoded string.</para>
      </summary>
      <returns>String to return as the return value of the text property.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.ReceiveContentLength(System.Int32)">
      <summary>
        <para>Callback, invoked with a <c>Content-Length</c> header is received.</para>
        <para>This callback is invoked on the main thread. <c>Note:</c> This callback is <c>only</c> called if a <c>Content-Length</c> header is received. If the remote server does not transmit a <c>Content-Length</c> header, but does include body data, then it is possible for ReceiveData to be invoked without receiving a call to this method. <c>Note:</c> This callback may be invoked more than once. An example scenario would be a case where a redirect is encountered, followed by a standard response. If both the redirect and standard response include <c>Content-Length</c> headers, this method will be invoked twice.</para>
      </summary>
      <param name="contentLength">The value of the received <c>Content-Length</c> header.</param>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.ReceiveData(System.Byte[],System.Int32)">
      <summary>
        <para>Callback, invoked as data is received from the remote server.</para>
        <para>This callback is invoked on the main thread. Data arriving from the remote server for a <see cref="UnityEngine.Networking.DownloadHandlerScript" /> is kept in a temporary ringbuffer. When there is unprocessed data in the buffer, this method will be called once per frame to hand chunks of that data to script. (If multiple datagrams arrive within one frame, they will be combined before being passed to this callback.) The data byte array contains the received data. When operating in non-preallocated mode, the system will allocate a new byte array each time this callback is invoked. In this case, <c>data.Length</c> will be equal to <c>dataLength</c>, and you may safely ignore the <c>dataLength</c> argument. When operating in preallocated mode, the data argument will be the byte array passed in at construction time, and the dataLength argument indicates which bytes in the byte array are new. (Important: The system does <c>not</c> zero-out the array between calls.)</para>
      </summary>
      <param name="data">A buffer containing unprocessed data, received from the remote server.</param>
      <param name="dataLength">The number of bytes in <c>data</c> which are new.</param>
      <returns>True if the download should continue, false to abort.</returns>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AssetBundle" />, or <c>null</c>. (Read Only)</para>
        <para>This property returns the asset bundle which has been downloaded (or is downloading, in the case of streamed asset bundles). If there is an error decoding the asset bundle’s assets, the system will log the error and this property will return <c>null</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.#ctor(System.String,System.UInt32)">
      <summary>
        <para>Standard constructor for non-cached asset bundles.</para>
        <para>This constructor will bypass the caching system and simply download the <see cref="UnityEngine.AssetBundle" /> from <c>url</c>. If the <c>crc</c> argument is non-zero, then the <c>crc</c> argument will be compared to the checksum of the downloaded data. If the CRCs do not match, an error will be logged, the asset bundle will not be loaded, and assetBundle will return <c>null</c>. If you do not wish to use CRC integrity checking, pass zero as the <c>crc</c> argument.</para>
      </summary>
      <param name="url">The nominal (pre-redirect) URL at which the asset bundle is located.</param>
      <param name="crc">A checksum to compare to the downloaded data for integrity checking, or zero to skip integrity checking.</param>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.#ctor(System.String,System.UInt32,System.UInt32)">
      <summary>
        <para>Simple versioned constructor. Caches downloaded asset bundles.</para>
        <para>When this constructor is used, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> will first check to see if there is a cached <see cref="UnityEngine.AssetBundle" /> from <c>url</c>. If there is no cached asset bundle, or if the cached asset bundle's <c>version</c> matches the <c>version</c> argument, then the system will skip downloading the asset bundle and instead load it from the cache. If there is a cached asset bundle, but the cached bundle's <c>version</c> does not match the <c>version</c> argument, then the system will re-download the asset bundle from <c>url</c>. If the <c>crc</c> argument is non-zero, then the <c>crc</c> argument will be compared to the checksum of the downloaded data. If the CRCs do not match, an error will be logged, the asset bundle will not be loaded, and assetBundle will return <c>null</c>. If you do not wish to use CRC integrity checking, pass zero as the <c>crc</c> argument.</para>
      </summary>
      <param name="url">The nominal (pre-redirect) URL at which the asset bundle is located.</param>
      <param name="version">Current version number of the asset bundle at <c>url</c>. Increment to redownload.</param>
      <param name="crc">A checksum to compare to the downloaded data for integrity checking, or zero to skip integrity checking.</param>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.#ctor(System.String,UnityEngine.Hash128,System.UInt32)">
      <summary>
        <para>Versioned constructor. Caches downloaded asset bundles.</para>
        <para>When this constructor is used, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> will first check to see if there is a cached <see cref="UnityEngine.AssetBundle" /> from <c>url</c>. If there is no cached asset bundle, or if the cached asset bundle's <c>hash</c> matches the <c>hash</c> argument, then the system will skip downloading the asset bundle and instead load it from the cache. If there is a cached asset bundle, but the cached bundle's <c>hash</c> does not match the <c>hash</c> argument, then the system will re-download the asset bundle from <c>url</c>. If the <c>crc</c> argument is non-zero, then the <c>crc</c> argument will be compared to the checksum of the downloaded data. If the CRCs do not match, an error will be logged, the asset bundle will not be loaded, and assetBundle will return <c>null</c>. If you do not wish to use CRC integrity checking, pass zero as the <c>crc</c> argument.</para>
      </summary>
      <param name="url">The nominal (pre-redirect) URL at which the asset bundle is located.</param>
      <param name="hash">A hash object defining the version of the asset bundle.</param>
      <param name="crc">A checksum to compare to the downloaded data for integrity checking, or zero to skip integrity checking.</param>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.GetData">
      <summary>Not implemented. Throws <see href="system" cref="NotSupportedException" />.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.GetText">
      <summary>Not implemented. Throws <see href="system" cref="NotSupportedException" />.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AssetBundle" />, or <c>null</c>.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerAssetBundle)www.downloadHandler).assetBundle.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> attached.</param>
      <returns>The same as <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle" /></returns>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandlerAudioClip.audioClip">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AudioClip" />, or <c>null</c>. (Read Only)</para>
        <para>This property returns an <see cref="UnityEngine.AudioClip" /> object. If Unity was unable to decode the downloaded data, or has not yet finished decompressing/decoding the downloaded data, this property will return <c>null</c>. If all data has not yet been downloaded, accessing this property will throw an <c>InvalidOperationException</c>. <c>Note:</c> This property will return a reference to the <c>same</c><see cref="UnityEngine.AudioClip" /> object on every call. Accessing this property causes no additional memory allocation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAudioClip.GetData">
      <summary>
        <para>Called by <see cref="UnityEngine.Networking.DownloadHandler.data" />. Returns a copy of the downloaded clip data as raw bytes.</para>
        <para>
          <c>Note:</c> Each call to this method allocates a new byte array.</para>
      </summary>
      <returns>A copy of the downloaded data.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAudioClip.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AudioClip" />, or <c>null</c>.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerAudioClip)www.downloadHandler).audioClip.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerAudioClip" /> attached.</param>
      <returns>The same as <see cref="UnityEngine.Networking.DownloadHandlerAudioClip.audioClip" /></returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerBuffer.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerBuffer.GetData">
      <summary>
        <para>Returns a copy of the contents of the native-memory data buffer as a byte array.</para>
        <para>Called by <see cref="UnityEngine.Networking.DownloadHandler.data" />. Allocates a new managed byte array for each call.</para>
      </summary>
      <returns>A copy of the data which has been downloaded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerBuffer.GetText">
      <summary>
        <para>Returns a copy of the native-memory buffer interpreted as a UTF8 string.</para>
        <para>Called by <see cref="UnityEngine.Networking.DownloadHandler.text" />. Allocates a new string for each call.</para>
      </summary>
      <returns>A string representing the data in the native-memory buffer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerBuffer.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns a copy of the native-memory buffer interpreted as a UTF8 string.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerBuffer)www.downloadHandler).text.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> attached.</param>
      <returns>The same as DownloadHandlerBuffer.text</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerScript.#ctor">
      <summary>
        <para>Create a DownloadHandlerScript which allocates new buffers when passing data to callbacks.</para>
        <para>This default constructor places this DownloadHanderScript into <c>non-preallocated mode</c>. This affects the operation of the ReceiveData callback. When in non-preallocated mode, a new managed byte array will be allocated each time ReceiveData is called, and the length of the array passed to ReceiveData will always be equal to the number of new bytes available for consumption. This is convenient, but may cause undesirable garbage collection. If your use case requires an implementation which avoids unnecessary garbage collection, use preallocated mode instead.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerScript.#ctor(System.Byte[])">
      <summary>
        <para>Create a DownloadHandlerScript which reuses a preallocated buffer to pass data to callbacks.</para>
        <para>This constructor places this <see cref="UnityEngine.Networking.DownloadHandlerScript" /> into <c>preallocated mode</c>. This affects the operation of the <see cref="UnityEngine.Networking.DownloadHandler.ReceiveData" /> callback. When in preallocated mode, the <c>preallocatedBuffer</c> byte array will be repeatedly reused to pass data to the <see cref="UnityEngine.Networking.DownloadHandler.ReceiveData" /> callback, instead of allocating new buffers each time. The system will not zero-out the array between uses, so the <c>dataLength</c> argument to <see cref="UnityEngine.Networking.DownloadHandler.ReceiveData" /> must be used to discover which bytes are new. When in this mode, the <see cref="UnityEngine.Networking.DownloadHandlerScript" /> will not allocate any memory during the download or processing of HTTP response data. If your use case is sensitive to garbage collection, usage of preallocated mode is recommended.</para>
      </summary>
      <param name="preallocatedBuffer">A byte buffer into which data will be copied, for use by <see cref="UnityEngine.Networking.DownloadHandler.ReceiveData" />.</param>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandlerTexture.texture">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.Texture" />, or <c>null</c>. (Read Only)</para>
        <para>This property returns a <see cref="UnityEngine.Texture" /> object. If Unity was unable to decode the downloaded data, or has not yet finished decompressing/decoding the downloaded data, this property will return <c>null</c>. If all data has not yet been downloaded, accessing this property will throw an <c>InvalidOperationException</c>. <c>Note:</c> This property will return a reference to the <c>same</c><see cref="UnityEngine.Texture" /> object on every call. Accessing this property causes no additional memory allocation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerTexture.#ctor">
      <summary>
        <para>Default constructor.</para>
        <para>Convenience constructor. Assumes the value of <c>readable</c> is <c>false</c>. The <see cref="UnityEngine.Texture" /> returned by <c>texture</c> will not have its texture data accessible from script.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerTexture.#ctor(System.Boolean)">
      <summary>
        <para>Constructor, allows <see cref="UnityEditor.TextureImporter.isReadable" /> property to be set.</para>
        <para>The value in <c>readable</c> will be used to set the <see cref="UnityEditor.TextureImporter.isReadable" /> property when importing the downloaded texture data.</para>
      </summary>
      <param name="readable">Value to set for <see cref="UnityEditor.TextureImporter.isReadable" />.</param>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerTexture.GetData">
      <summary>
        <para>Called by <see cref="UnityEngine.Networking.DownloadHandler.data" />. Returns a copy of the downloaded image data as raw bytes.</para>
        <para>
          <c>Note:</c> Each call to this method allocates a new byte array.</para>
      </summary>
      <returns>A copy of the downloaded data.</returns>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerTexture.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.Texture" />, or <c>null</c>.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerTexture)www.downloadHandler).texture.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> attached.</param>
      <returns>The same as <see cref="UnityEngine.Networking.DownloadHandlerTexture.texture" /></returns>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxPacketSize">
      <summary>
        <para>Defines maximum possible packet size in bytes for all network connections.</para>
        <para>The packet size associated with specific connections must be lower than this value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumReceivedMessages">
      <summary>
        <para>Defines maximum amount of messages in the receive queue.</para>
        <para>Messages which exceed this limit will be dropped.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumSentMessages">
      <summary>
        <para>Defines maximum message count in sent queue.</para>
        <para>Messages which exceed this limit will be dropped and Send calls will return errors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorModel">
      <summary>
        <para>Defines reactor model for the network library.</para>
        <para>With the select model, received packets will be handled as soon as they arrive. With the fixed rate model, incoming packets will only be handled periodically. The select model is good for non-mobile devices, where the battery life is not important. Fixed rate is not as CPU intensive and will save battery life on mobile devices but this decreases performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ThreadAwakeTimeout">
      <summary>Defines (1) for select reactor, minimum time period, when system will check if there are any messages for send (2) for fixrate reactor, minimum interval of time, when system will check for sending and receiving messages.</summary>
    </member>
    <member name="M:UnityEngine.Networking.GlobalConfig.#ctor">
      <summary>Create new global config object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.DefaultConfig">
      <summary>Defines config for default connections in the topology.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.MaxDefaultConnections">
      <summary>Defines how many connection with default config be permitted.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.MessagePoolSizeGrowthFactor">
      <summary>Library keep and reuse internal pools of messages. By default they have size 128. If this value is not enough pools will be automatically increased. This value defines how they will increase. Default value is 0.75, so if original pool size was 128, the new pool size will be 128 * 1.75 = 224.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.ReceivedMessagePoolSize">
      <summary>What is the size of received messages pool (default 128 bytes).</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SentMessagePoolSize">
      <summary>Defines size of sent message pool (default value 128).</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigs">
      <summary>List of special connection configs.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigsCount">
      <summary>Returns count of special connection added to topology.</summary>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.#ctor(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>Create topology.</summary>
      <param name="defaultConfig">Default config.</param>
      <param name="maxDefaultConnections">Maximum default connections.</param>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.AddSpecialConnectionConfig(UnityEngine.Networking.ConnectionConfig)">
      <summary>Add special connection to topology (for example if you need to keep connection to standalone chat server you will need to use this function). Returned id should be use as one of parameters (with ip and port) to establish connection to this server.</summary>
      <param name="config">Connection config for special connection.</param>
      <returns>Id of this connection. You should use this id when you call <see cref="UnityEngine.Networking.NetworkTransport.Connect" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.GetSpecialConnectionConfig(System.Int32)">
      <summary>Return reference to special connection config. Parameters of this config can be changed.</summary>
      <param name="i">Config id.</param>
      <returns>Connection config.</returns>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.currentLogLevel">
      <summary>The current logging level that UNET is running with.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Debug">
      <summary>Setting LogFilter.currentLogLevel to this will enable verbose debug logging.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Error">
      <summary>Setting LogFilter.currentLogLevel to this will error and above messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Info">
      <summary>Setting LogFilter.currentLogLevel to this will log only info and above messages. This is the default level.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logDebug">
      <summary>Checks if debug logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logError">
      <summary>Checks if error logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logInfo">
      <summary>Checks if info level logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logWarn">
      <summary>Checks if wanring level logging is enabled.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Warn">
      <summary>Setting LogFilter.currentLogLevel to this will log wanring and above messages.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AddPlayer">
      <summary>
        <para>Internal networking system message for adding player objects to client instances.</para>
        <para>This is sent to the server when a client calls NetworkClient.AddPlayer(). The server should have a handler for this message type to add the player object to the game and notify the client with NetworkServer.AddPlayer().</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Animation">
      <summary>
        <para>Internal networking system message for sending synchronizing animation state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationParameters">
      <summary>
        <para>Internal networking system message for sending synchronizing animation parameter state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationTrigger">
      <summary>
        <para>Internal networking system message for sending animation triggers.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Command">
      <summary>Internal networking system message for sending a command from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Connect">
      <summary>Internal networking system message for communicating a connection has occurred.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.CRC">
      <summary>Internal networking system message for HLAPI CRC checking.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Disconnect">
      <summary>Internal networking system message for communicating a disconnect has occurred,.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Error">
      <summary>Internal networking system message for communicating an error.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Fragment">
      <summary>Internal networking system message for identifying fragmented packets.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Highest">
      <summary>The highest value of built-in networking system message ids. User messages must be above this value.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.InternalHighest">
      <summary>The highest value of internal networking system message ids. User messages must be above this value. User code cannot replace these handlers.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyAddPlayerFailed">
      <summary>Internal networking system message for communicating failing to add lobby player.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReadyToBegin">
      <summary>Internal networking system message for communicating a player is ready in the lobby.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReturnToLobby">
      <summary>Internal networking system messages used to return the game to the lobby scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbySceneLoaded">
      <summary>Internal networking system message for communicating a lobby player has loaded the game scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalChildTransform">
      <summary>Internal networking system message for sending tranforms for client object from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalClientAuthority">
      <summary>Internal networking system message for setting authority to a client for an object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalPlayerTransform">
      <summary>Internal networking system message for sending tranforms from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NetworkInfo">
      <summary>Internal networking system message for sending information about network peers to clients.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NotReady">
      <summary>
        <para>Internal networking system message for server to tell clients they are no longer ready.</para>
        <para>Can be used when switching scenes, to stop receiving network traffic during the switch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectDestroy">
      <summary>Internal networking system message for destroying objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectHide">
      <summary>Internal networking system message for hiding objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawn">
      <summary>Internal networking system message for spawning objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawnScene">
      <summary>Internal networking system message for spawning scene objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Owner">
      <summary>Internal networking system message for telling clients they own a player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.PeerClientAuthority">
      <summary>Internal networking system message for sending information about changes in authority for non-player objects to clients.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Ready">
      <summary>Internal networking system message for clients to tell server they are ready.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ReconnectPlayer">
      <summary>Internal networking system message used when a client connects to the new host of a game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.RemovePlayer">
      <summary>Internal networking system message for removing a player object which was spawned for a client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Rpc">
      <summary>Internal networking system message for sending a ClientRPC from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Scene">
      <summary>Internal networking system message that tells clients which scene to load when they connect to a server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SpawnFinished">
      <summary>Internal networking system messages used to tell when the initial contents of a scene is being spawned.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncEvent">
      <summary>Internal networking system message for sending a SyncEvent from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncList">
      <summary>Internal networking system message for sending a USyncList generic list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.UpdateVars">
      <summary>Internal networking system message for updating SyncVars on a client from a server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MsgType.MsgTypeToString(System.Int16)">
      <summary>Returns the name of internal message types by their id.</summary>
      <param name="value">A internal message id value.</param>
      <returns>The name of the internal message.</returns>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.contentType">
      <summary>
        <para>string The <c>Content-Type</c> header for this section, or <c>null</c>.</para>
        <para>Returns the value to use in this section's <c>Content-Type</c> header.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Will not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Will not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.Byte[])">
      <summary>
        <para>Raw data section, unnamed and no <c>Content-Type</c> header.</para>
        <para>Will not include either a filename or a <c>Content-Type</c> section header.</para>
      </summary>
      <param name="data">Data payload of this section.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Raw data section with a section name, no <c>Content-Type</c> header.</para>
        <para>Identical to the prior constructor, but with a section name included.</para>
      </summary>
      <param name="name">Section name.</param>
      <param name="data">Data payload of this section.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String,System.Byte[],System.String)">
      <summary>A raw data section with a section name and a <c>Content-Type</c> header.</summary>
      <param name="name">Section name.</param>
      <param name="data">Data payload of this section.</param>
      <param name="contentType">The value for this section's <c>Content-Type</c> header.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String,System.String,System.Text.Encoding,System.String)">
      <summary>
        <para>A named raw data section whose payload is derived from a string, with a <c>Content-Type</c> header.</para>
        <para>
          <c>data</c> will be encoded into raw bytes using <c>encoding</c>.</para>
      </summary>
      <param name="name">Section name.</param>
      <param name="data">String data payload for this section.</param>
      <param name="encoding">An encoding to marshal <c>data</c> to or from raw bytes.</param>
      <param name="contentType">The value for this section's <c>Content-Type</c> header.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>A named raw data section whose payload is derived from a UTF8 string, with a <c>Content-Type</c> header.</para>
        <para>For UTF8 strings with custom <c>Content-Type</c> headers, use this constructor. <c>data</c> will be assumed to be in UTF8 encoding and converted to raw bytes appropriately.</para>
      </summary>
      <param name="name">Section name.</param>
      <param name="data">String data payload for this section.</param>
      <param name="contentType">C.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String,System.String)">
      <summary>
        <para>A names raw data section whose payload is derived from a UTF8 string, with a default <c>Content-Type</c>.</para>
        <para>For UTF8 strings, use this constructor. <c>data</c> will be assumed to be in UTF8 encoding and converted appropriately. The section will be assigned a <c>Content-Type</c> of <c>text/plain; encoding=utf8</c>.</para>
      </summary>
      <param name="name">Section name.</param>
      <param name="data">String data payload for this section.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormDataSection.#ctor(System.String)">
      <summary>
        <para>An anonymous raw data section whose payload is derived from a UTF8 string, with a default <c>Content-Type</c>.</para>
        <para>Identical to the above, but without a section name.</para>
      </summary>
      <param name="data">String data payload for this section.</param>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.contentType">
      <summary>
        <para>string The <c>Content-Type</c> header for this section, or <c>null</c>.</para>
        <para>Returns the value of the section's <c>Content-Type</c> header.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Will not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Will not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.String,System.Byte[],System.String,System.String)">
      <summary>
        <para>Contains a named file section based on the raw bytes from <c>data</c>, with a custom <c>Content-Type</c> and file name.</para>
        <para>The full-control option. Manually specify a section name, raw data, file name and <c>Content-Type</c>. If <c>fileName</c> is null or empty, it defaults to <c>file.dat</c>. If contentType is null or empty, it defaults to <c>application/octet-stream</c>.</para>
      </summary>
      <param name="name">Name of this form section.</param>
      <param name="data">Raw contents of the file to upload.</param>
      <param name="fileName">Name of the file uploaded by this form section.</param>
      <param name="contentType">The value for this section's <c>Content-Type</c> header.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.Byte[])">
      <summary>
        <para>Contains an anonymous file section based on the raw bytes from <c>data</c>, assigns a default <c>Content-Type</c> and file name.</para>
        <para>Creates a file section based on the raw bytes from the <c>data</c> argument. Assigns a content-type of application/octet-stream and a file name of file.dat.</para>
      </summary>
      <param name="data">Raw contents of the file to upload.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Contains an anonymous file section based on the raw bytes from <c>data</c> with a specific file name. Assigns a default <c>Content-Type</c>.</para>
        <para>Assigns a <c>Content-Type</c> of <c>application/octet-stream</c>.</para>
      </summary>
      <param name="fileName">Name of the file uploaded by this form section.</param>
      <param name="data">Raw contents of the file to upload.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.String,System.String,System.Text.Encoding,System.String)">
      <summary>
        <para>Contains a named file section with data drawn from <c>data</c>, as marshaled by <c>dataEncoding</c>. Assigns a specific file name from <c>fileName</c> and a default <c>Content-Type</c>.</para>
        <para>
          <c>Content-Type</c> is assumed to be <c>text/plain</c>, with an <c>encoding</c> drawn from <c>dataEncoding</c>. If <c>dataEncoding</c> is null, defaults to UTF8.</para>
      </summary>
      <param name="name">Name of this form section.</param>
      <param name="data">Contents of the file to upload.</param>
      <param name="dataEncoding">A string encoding.</param>
      <param name="fileName">Name of the file uploaded by this form section.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.String,System.Text.Encoding,System.String)">
      <summary>
        <para>An anonymous file section with data drawn from <c>data</c>, as marshaled by <c>dataEncoding</c>. Assigns a specific file name from <c>fileName</c> and a default <c>Content-Type</c>.</para>
        <para>As above, but unnamed.</para>
      </summary>
      <param name="data">Contents of the file to upload.</param>
      <param name="dataEncoding">A string encoding.</param>
      <param name="fileName">Name of the file uploaded by this form section.</param>
    </member>
    <member name="M:UnityEngine.Networking.MultipartFormFileSection.#ctor(System.String,System.String)">
      <summary>
        <para>An anonymous file section with data drawn from the UTF8 string <c>data</c>. Assigns a specific file name from <c>fileName</c> and a default <c>Content-Type</c>.</para>
        <para>Convenience method. Specify file contents via the <c>data</c> string and assign a file name via <c>fileName</c>. Assumes the string is encoded in UTF8. Assigns a <c>Content-Type</c> of <c>text/plain; encoding=utf8</c>. If <c>fileName</c> is null or empty, assigns a file name of <c>file.txt</c>.</para>
      </summary>
      <param name="data">Contents of the file to upload.</param>
      <param name="fileName">Name of the file uploaded by this form section.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkAnimator.animator">
      <summary>The animator component to synchronize.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend(System.Int32)">
      <summary>Gets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <returns>True if the parameter should be sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend(System.Int32,System.Boolean)">
      <summary>Sets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.String)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.Int32)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
      <param name="hash">Hash id of trigger (from the Animator).</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient">
      <summary>The <see cref="UnityEngine.Networking.NetworkConnection" /> associated with this <see cref="UnityEngine.Networking.NetworkIdentity" />. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToServer">
      <summary>The <see cref="UnityEngine.Networking.NetworkConnection" /> associated with this <see cref="UnityEngine.Networking.NetworkIdentity" />. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>The <see cref="UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority" /> value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server / host. For objects with <see cref="UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority" /> set, authority is held by the client of that player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for "themselves" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players. This example shows processing input for only the local player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isServer">
      <summary>
        <para>Returns true if this object is active on an active server.</para>
        <para>This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority">
      <summary>This value is set on the NetworkIdentity and is accessible here for convenient access for scripts.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.netId">
      <summary>
        <para>The unique network Id of this object.</para>
        <para>This is assigned at runtime by the network server and will be unique for all objects for that network session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.playerControllerId">
      <summary>
        <para>The id of the player associated with the behaviour.</para>
        <para>This is only valid if the GameObject is a local player. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits">
      <summary>
        <para>This clears all the dirty bits that were set on this script by SetDirtyBits();</para>
        <para>This is automatically invoked when an update is sent for this object, but can be called manually as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The QoS channel for this script.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The time in seconds between updates.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeCommand(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a Command.</summary>
      <param name="cmdHash">Hash of the Command name.</param>
      <param name="reader">Parameters to pass to the command.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeRPC(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke an RPC function.</summary>
      <param name="cmdHash">Hash of the RPC name.</param>
      <param name="reader">Parameters to pass to the RPC function.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a SyncEvent.</summary>
      <param name="cmdHash">Hash of the SyncEvent name.</param>
      <param name="reader">Parameters to pass to the SyncEvent.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnCheckObserver(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Callback used by the visibility system to determine if an observer (player) can see this object.</para>
        <para>If this function returns true, the network connection will be added as an observer.</para>
      </summary>
      <param name="conn">Network connection of a player.</param>
      <returns>True if the player can see this object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy">
      <summary>
        <para>This is invoked on clients when the server has caused this object to be destroyed.</para>
        <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system to (re)construct the set of observers that can see this object.</para>
        <para>Implementations of this callback should add network connections of players that can see this object to the observers set.</para>
      </summary>
      <param name="initialize">True if the set of observers is being built for the first time.</param>
      <returns>Return true if this function did work.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system for objects on a host.</para>
        <para>Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host.</para>
      </summary>
      <param name="vis">New visibility state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartAuthority">
      <summary>
        <para>This is invoked on behaviours that have authority, based on context and <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" />.</para>
        <para>This is called after <see cref="UnityEngine.Networking.NetworkBehaviour.OnStartServer" /> and <see cref="UnityEngine.Networking.NetworkBehaviour.OnStartClient" />. When <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref="UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority" />, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
        <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer">
      <summary>
        <para>Called when the local player object has been set up.</para>
        <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartServer">
      <summary>
        <para>This is invoked for NetworkBehaviour objects when they become active on the server.</para>
        <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a "host" as well as for object on a dedicated server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStopAuthority">
      <summary>
        <para>This is invoked on behaviours when authority is removed.</para>
        <para>When <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority" /> is called on the server, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.PreStartClient">
      <summary>
        <para>An internal method called on client objects to resolve GameObject references.</para>
        <para>It is not safe to put user code in this function as it may be replaced by the network system's code generation process.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.SetDirtyBit(System.UInt32)">
      <summary>Used to set the behaviour as dirty, so that a network update will be sent for the object.</summary>
      <param name="dirtyBit">Bit mask to set.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.broadcastData">
      <summary>The data broadcast by the server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.serverAddress">
      <summary>The IP address of the server that broadcasts this data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.active">
      <summary>True if a network client is currently active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.allClients">
      <summary>
        <para>A list of all the active network clients in the current process.</para>
        <para>This is NOT a list of all clients that are connected to the remote server, it is client instances on the local game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.connection">
      <summary>The NetworkConnection object this client is using.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.handlers">
      <summary>The registered network message handlers.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.hostTopology">
      <summary>
        <para>The host topology that this client is using.</para>
        <para>This is read-only once the client is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.isConnected">
      <summary>This gives the current connection status of the client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.networkConnectionClass">
      <summary>
        <para>The class to use when creating new NetworkConnections.</para>
        <para>This can be set with SetNetworkConnectionClass. This allows custom classes that do special processing of data from the transport layer to be used with the NetworkClient.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.numChannels">
      <summary>The number of QoS channels currently configured for this client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverIp">
      <summary>
        <para>The IP address of the server that this client is connected to.</para>
        <para>This will be empty if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverPort">
      <summary>
        <para>The port of the server that this client is connected to.</para>
        <para>This will be zero if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.#ctor">
      <summary>Creates a new NetworkClient instance.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="config">Transport layer configuration object.</param>
      <param name="maxConnections">The maximum number of connections to allow.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="topology">Transport layer topology object.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect client to a NetworkServer instance.</para>
        <para>Connecting to a server is asynchronous. There is connection message that is fired when the client connects. If the connection fails, a MsgType.Error message will be generated. Once a connection is established you are able to send messages on the connection using NetworkClient.Send(). If using other features of the high level api, the client should call NetworkClient.IsReady() once it is ready to participate in the game. At that point the client will be sent spawned objects and state update messages.</para>
      </summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ConnectWithSimulator(System.String,System.Int32,System.Int32,System.Single)">
      <summary>Connect client to a NetworkServer instance with simulated latency and packet loss.</summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
      <param name="latency">Simulated latency in milliseconds.</param>
      <param name="packetLoss">Simulated packet loss percentage.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Disconnect">
      <summary>
        <para>Disconnect from server.</para>
        <para>The disconnect message will be invoked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetConnectionStats">
      <summary>Retrieves statistics about the network packets sent on this connection.</summary>
      <returns>Dictionary of packet statistics for the client's connection.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetRTT">
      <summary>
        <para>Gets the Return Trip Time for this connection.</para>
        <para>This value is calculated by the transport layer.</para>
      </summary>
      <returns>Return trip time in milliseconds.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ReconnectToNewHost(System.String,System.Int32)">
      <summary>This is used by a client that has lost the connection to the old host, to reconnect to the new host of a game.</summary>
      <param name="serverIp">The IP address of the new host.</param>
      <param name="serverPort">The port of the new host.</param>
      <returns>True if able to reconnect.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ResetConnectionStats">
      <summary>
        <para>Resets the statistics return by NetworkClient.GetConnectionStats() to zero values.</para>
        <para>Useful when building per-second network statistics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel.</para>
        <para>The message must be an instance of a class derived from MessageBase.</para>
        <para>The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">A message instance to send.</param>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>This sends a network message with a message Id to the server on a specific channel.</para>
        <para>This does the same thing as NetworkClient.Send(), but allows a transport layer QoS channel to be specified.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The channel to send the message on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends the data in an array of bytes to the server that the client is connected to.</para>
        <para>The data must be properly formatted.</para>
      </summary>
      <param name="data">Data to send.</param>
      <param name="numBytes">Number of bytes of data.</param>
      <param name="channelId">The QoS channel to send data on.</param>
      <returns>True if successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server on channel one, which by default is the unreliable channel.</para>
        <para>This does the same thing as NetworkClient.Send(), except that it send on the unreliable channel.</para>
      </summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of the NetworkWriter's buffer to the connected server on the specified channel.</para>
        <para>The format of the data in the writer must be properly formatted for it to be processed as a message by the server. The functions StartMessage() and FinishMessage() can be used to properly format messages:</para>
      </summary>
      <param name="writer">Writer object containing data to send.</param>
      <param name="channelId">QoS channel to send data on.</param>
      <returns>True if data successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetMaxDelay(System.Single)">
      <summary>Set the maximum amount of time that can pass for transmitting the send buffer.</summary>
      <param name="seconds">Delay in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Shutdown">
      <summary>
        <para>Shut down a client.</para>
        <para>This should be done when a client is no longer going to be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.UnregisterHandler(System.Int16)">
      <summary>Unregisters a network message handler.</summary>
      <param name="msgType">The message type to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetTotalConnectionStats">
      <summary>Retrieves statistics about the network packets sent on all connections.</summary>
      <returns>Dictionary of stats.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ShutdownAll">
      <summary>
        <para>Shuts down all network clients.</para>
        <para>This also shuts down the transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.address">
      <summary>The IP address associated with the connection.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.clientOwnedObjects">
      <summary>
        <para>A list of the NetworkIdentity objects owned by this connection.</para>
        <para>This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list is read only. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.connectionId">
      <summary>
        <para>Unique identifier for this connection that is assigned by the transport layer.</para>
        <para>On a server, this Id is unique for every connection on the server. On a client this Id is local to the client, it is not the same as the Id on the server for this connection. Transport layers connections begin at one. So on a client with a single connection to a server, the connectionId of that connection will be one. In NetworkServer, the connectionId of the local connection is zero. Clients do not know their connectionId on the server, and do not know the connectionId of other clients on the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.hostId">
      <summary>
        <para>Transport level host ID for this connection.</para>
        <para>This is assigned by the transport layer and passed to the connection instance through the Initialize function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.isConnected">
      <summary>
        <para>True if the connection is connected to a remote end-point.</para>
        <para>This applies to NetworkServer and NetworkClient connections. When not connected, the hostID will be -1. When connected, the hostID will be a positive integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.isReady">
      <summary>
        <para>Flag that tells if the connection has been marked as "ready" by a client calling ClientScene.Ready().</para>
        <para>This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.lastError">
      <summary>
        <para>The last error associated with this connection.</para>
        <para>Retrieve the last error that occurred on the connection, this value is set every time an event is received from the NetworkTransport. In the following example, OnServerDisconnect is overridden from NetworkManager:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.lastMessageTime">
      <summary>
        <para>The last time that a message was received on this connection.</para>
        <para>This includes internal system messages (such as Commands and ClientRpc calls) and user messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.logNetworkMessages">
      <summary>
        <para>Setting this to true will log the contents of network message to the console.</para>
        <para>Warning: this can be a lot of data and can be very slow. Both incoming and outgoing messages are logged. The format of the logs is: ConnectionSend con:1 bytes:11 msgId:5 FB59D743FD120000000000 ConnectionRecv con:1 bytes:27 msgId:8 14F21000000000016800AC3FE090C240437846403CDDC0BD3B0000 Note that these are application-level network messages, not protocol-level packets. There will typically be multiple network messages combined in a single protocol packet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.playerControllers">
      <summary>
        <para>The list of players for this connection.</para>
        <para>In most cases this will be a single player. But, for "Couch Multiplayer" there could be multiple players for a single client. To see the players on your own client see <see cref="UnityEngine.Networking.ClientScene.localPlayers" /> list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.CheckHandler(System.Int16)">
      <summary>
        <para>This function checks if there is a message handler registered for the message ID.</para>
        <para>This is usually not required, as InvokeHandler handles message IDs without handlers.</para>
      </summary>
      <param name="msgType">The message ID of the handler to look for.</param>
      <returns>True if a handler function was found.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Disconnect">
      <summary>Disconnects this connection.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Dispose">
      <summary>Disposes of this connection, releasing channel buffers that it holds.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.FlushChannels">
      <summary>
        <para>This causes the channels of the network connection to flush their data to the transport layer.</para>
        <para>This is called automatically by connections used by NetworkServer and NetworkClient, but can be called manually for connections used in other contexts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get statistics for incoming traffic.</summary>
      <param name="numMsgs">Number of messages received.</param>
      <param name="numBytes">Number of bytes received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get statistics for outgoing traffic.</summary>
      <param name="numMsgs">Number of messages sent.</param>
      <param name="numBufferedMsgs">Number of messages currently buffered for sending.</param>
      <param name="numBytes">Number of bytes sent.</param>
      <param name="lastBufferedPerSecond">How many messages were buffered in the last second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Initialize(System.String,System.Int32,System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This inializes the internal data structures of a NetworkConnection object, including channel buffers.</para>
        <para>This is called by NetworkServer and NetworkClient on connection objects, but if used outside of that context, this function should be called before the connection is used. This function can be overriden to perform additional initialization for the connection, but the base class Initialize function should always be called as it is required to setup internal state.</para>
      </summary>
      <param name="networkAddress">The host or IP connected to.</param>
      <param name="networkHostId">The transport hostId for the connection.</param>
      <param name="networkConnectionId">The transport connectionId for the connection.</param>
      <param name="hostTopology">The topology to be used.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(System.Int16,UnityEngine.Networking.NetworkReader,System.Int32)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="msgType">The message type of the handler to use.</param>
      <param name="reader">The stream to read the contents of the message from.</param>
      <param name="channelId">The channel that the message arrived on.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(UnityEngine.Networking.NetworkMessage)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="netMsg">The message object to process.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandlerNoData(System.Int16)">
      <summary>
        <para>This function invokes the registered handler function for a message, without any message data.</para>
        <para>This is useful to invoke handlers that dont have any additional data, such as the handlers for MsgType.Connect.</para>
      </summary>
      <param name="msgType">The message ID of the handler to invoke.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>This registers a handler function for a message Id.</summary>
      <param name="msgType">The message ID to register.</param>
      <param name="handler">The handler function to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ResetStats">
      <summary>Resets the statistics that are returned from NetworkClient.GetConnectionStats().</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel.</summary>
      <param name="msgType">The ID of the message to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>This sends a network message on the connection using a specific transport layer channel.</summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>This sends an array of bytes on the connection.</summary>
      <param name="bytes">The array of data to be sent.</param>
      <param name="numBytes">The number of bytes in the array to be sent.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>Success if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message ID on the connection. This message is sent on channel one, which by default is the unreliable channel.</summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of a NetworkWriter object on the connection.</para>
        <para>The example below constructs a writer and sends it on a connection.</para>
      </summary>
      <param name="writer">A writer object containing data to send.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>True if the data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetChannelOption(System.Int32,UnityEngine.Networking.ChannelOption,System.Int32)">
      <summary>
        <para>This sets an option on the network channel.</para>
        <para>Channel options are usually advanced tuning parameters.</para>
      </summary>
      <param name="channelId">The channel the option will be set on.</param>
      <param name="option">The option to set.</param>
      <param name="value">The value for the option.</param>
      <returns>True if the option was set.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetMaxDelay(System.Single)">
      <summary>
        <para>The maximum time in seconds that messages are buffered before being sent.</para>
        <para>If this is set to zero, then there will be no buffering of messages before they are sent to the transport layer. This may reduce latency but can lead to packet queue overflow issues if many small packets are being sent.</para>
      </summary>
      <param name="seconds">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ToString">
      <summary>Returns a string representation of the NetworkConnection object state.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportRecieve(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data from the network before it is passed to the application.</para>
        <para>The default implementation of this function calls HandleBytes() on the received data. Custom implmentations can also use HandleBytes(), but can pass modified versions of the data received or other data. This example logs the data received to the console, then passes it to HandleBytes.</para>
        <para>Other uses for this function could be data compression or data encryption. Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">The data recieved.</param>
      <param name="numBytes">The size of the data recieved.</param>
      <param name="channelId">The channel that the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportSend(System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data send by the application before it goes to the network transport layer.</para>
        <para>The default implementation of this function calls NetworkTransport.Send() with the supplied data, but custom implementations can pass modified versions of the data. This example logs the sent data to the console:</para>
        <para>Other uses for this function could be data compression or data encryption. Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">Data to send.</param>
      <param name="numBytes">Size of data to send.</param>
      <param name="channelId">Channel to send data on.</param>
      <param name="error">Error code for send.</param>
      <returns>True if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.UnregisterHandler(System.Int16)">
      <summary>This removes the handler registered for a message Id.</summary>
      <param name="msgType">The message ID to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the buffer, and call handler functions.</para>
        <para>The data is assumed to have come from the network, and contains network messages. This function is used by network connections when they receive data.</para>
      </summary>
      <param name="buffer">Data to process.</param>
      <param name="receivedSize">Size of the data to process.</param>
      <param name="channelId">Channel the data was recieved on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleReader(UnityEngine.Networking.NetworkReader,System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the stream, and call handler functions.</para>
        <para>The data in the stream is assumed to have come from the network, and contains network messages. This function is used by network connections when they receive data.</para>
      </summary>
      <param name="reader">Stream that contains data.</param>
      <param name="receivedSize">Size of the data.</param>
      <param name="channelId">Channel the data was received on.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scriptCRCCheck">
      <summary>
        <para>Enables a CRC check between server and client that ensures the <see cref="UnityEngine.Networking.NetworkBehaviour" /> scripts match.</para>
        <para>This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scripts">
      <summary>
        <para>A dictionary of script QoS channels.</para>
        <para>This is used to compare script network configurations between clients and servers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.RegisterBehaviour(System.String,System.Int32)">
      <summary>This is used to setup script network settings CRC data.</summary>
      <param name="name">Script name.</param>
      <param name="channel">QoS Channel.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.ReinitializeScriptCRCs">
      <summary>
        <para>This can be used to reinitialize the set of script CRCs.</para>
        <para>This is very rarely required - only when NetworkBehaviour scripts are dynamically loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastData">
      <summary>
        <para>The data to include in the broadcast message when running as a server.</para>
        <para>If using NetworkManager integration, this will be overriden with the NetworkManager's address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastInterval">
      <summary>How often in milliseconds to broadcast when running as a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastKey">
      <summary>A key to identify this application in broadcasts.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastPort">
      <summary>The network port to broadcast on and listen to.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastsReceived">
      <summary>
        <para>A dictionary of broadcasts received from servers.</para>
        <para>The key is the server address, and the value is a NetworkBroadcastResult object that contains the data sent by the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion">
      <summary>The sub-version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastVersion">
      <summary>The version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.hostId">
      <summary>The TransportLayer hostId being used (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isClient">
      <summary>True if running in client mode (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isServer">
      <summary>True if running in server mode (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetX">
      <summary>The horizontal offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetY">
      <summary>The vertical offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.running">
      <summary>True is broadcasting or listening (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.showGUI">
      <summary>True to draw the default Broacast control UI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.useNetworkManager">
      <summary>
        <para>True to integrate with the NetworkManager.</para>
        <para>When running as a server, this will include the NetworkManager's address in broadcast messages. When running as a client, this will be able to join matching games found by using the NetworkManager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.Initialize">
      <summary>Initializes the NetworkDiscovery component.</summary>
      <returns>Return true if the network port was available.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast(System.String,System.String)">
      <summary>This is a virtual function that can be implemented to handle broadcast messages when running as a client.</summary>
      <param name="fromAddress">The IP address of the server.</param>
      <param name="data">The data broadcast by the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsClient">
      <summary>Starts listening for broadcasts messages.</summary>
      <returns>True is able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsServer">
      <summary>Starts sending broadcast messages.</summary>
      <returns>True is able to broadcast.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StopBroadcast">
      <summary>Stops listening and broadcasting.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.IsValid">
      <summary>A valid NetworkHash has a non-zero value.</summary>
      <returns>True if the value is non-zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Reset">
      <summary>Resets the value of a NetworkHash to zero (invalid).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.ToString">
      <summary>Returns a string representation of a NetworkHash object.</summary>
      <returns>A hex asset string.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Parse(System.String)">
      <summary>This parses the string representation of a NetworkHash into a binary object.</summary>
      <param name="text">A hex string to parse.</param>
      <returns>A 128 bit network hash object.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback">
      <summary>
        <para>A callback that can be populated to be notified when the client-authority state of objects changes.</para>
        <para>Whenever an object is spawned using SpawnWithClientAuthority, or the client authority status of an object is changed with <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> or <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority" />, then this callback will be invoked. This callback is used by the NetworkMigrationManager to distribute client authority state to peers for host migration. If the NetworkMigrationManager is not being used, this callback does not need to be populated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.assetId">
      <summary>Unique identifier used to find the source assets when server spawns the on clients.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner">
      <summary>
        <para>The client that has authority for this object. This will be null if no client has authority.</para>
        <para>This is set for player objects with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" />, and for objects set with <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" />, and spawned with SpawnWithClientAuthority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToClient">
      <summary>The connection associated with this <see cref="UnityEngine.Networking.NetworkIdentity" />. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToServer">
      <summary>The UConnection associated with this NetworkIdentity. This is only valid for player objects on a local client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>This value is determined at runtime, as opposed to <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" /> which is set on the prefab. For most objects, authority is held by the server / host. For objects with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" /> set, authority is held by the client of that player. For objects that had their authority set by <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> on the server, this will be true on the client that owns the object. NOT on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>This is set when the server has spawned an object for this particular client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isServer">
      <summary>Returns true if running as a server, which spawned the object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.localPlayerAuthority">
      <summary>
        <para>
          <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" /> means that the client of the "owning" player has authority over their own player object.</para>
        <para>Authority for this object will be on the player's client. So <see cref="UnityEngine.Networking.NetworkIdentity.hasAuthority" /> will be true on that client - and false on the server and on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.netId">
      <summary>Unique identifier for this particular object instance, used for tracking objects between networked clients and the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.observers">
      <summary>The set of network connections (players) that can see this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.playerControllerId">
      <summary>
        <para>The id of the player associated with this GameObject.</para>
        <para>This is only valid if this GameObject is for a local player. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.sceneId">
      <summary>
        <para>A unique identifier for NetworkIdentity objects within a scene.</para>
        <para>This is used for spawning scene objects on clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.serverOnly">
      <summary>Flag to make this object only exist when the game is running as a server (or host).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.AssignClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This assigns control of an object to a client via the client's <see cref="UnityEngine.Networking.NetworkConnection" />.</para>
        <para>This causes <see cref="UnityEngine.Networking.NetworkIdentity.hasAuthority" /> to be set on the client that owns the object, and <see cref="UnityEngine.Networking.NetworkBehaviour.OnStartAuthority" /> will be called on that client. This object then will be in the <see cref="UnityEngine.Networking.NetworkConnection.clientOwnedObjects" /> list for the connection. Authority can be removed with <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority" />. Only one client can own an object at any time. Only NetworkIdentities with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority" /> set can have client authority assigned. This does not need to be called for player objects, as their authority is setup automatically.</para>
      </summary>
      <param name="conn">The connection of the client to assign authority to.</param>
      <returns>True if authority was assigned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.ForceSceneId(System.Int32)">
      <summary>
        <para>Force the scene ID to a specific value.</para>
        <para>This can be used to fix an invalid scene ID. If you process all the NetworkIdentity components in a scene you can assign them new values starting from 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RebuildObservers(System.Boolean)">
      <summary>This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour.</summary>
      <param name="initialize">True if this is the first time.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Removes ownership for an object for a client by its conneciton.</para>
        <para>This applies to objects that had authority set by <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" />, or <see cref="UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority" />. Authority cannot be removed for player objects.</para>
      </summary>
      <param name="conn">The connection of the client to remove authority for.</param>
      <returns>True if authority is removed.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkInstanceId.Invalid">
      <summary>
        <para>A static invalid NetworkInstanceId that can be used for comparisons.</para>
        <para>The default value of NetworkInstanceId.Value is zero, and IsEmpty() can be used to check this. But NetworkInstanceId.Invalid is available for specifically setting and checking for invalid IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkInstanceId.Value">
      <summary>The internal value of this identifier.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.IsEmpty">
      <summary>
        <para>Returns true if the value of the NetworkInstanceId is zero.</para>
        <para>Object that have not been spawned will have a value of zero.</para>
      </summary>
      <returns>True if zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.ToString">
      <summary>Returns a string of "NetID:value".</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the PlayScene.</para>
        <para>When CheckReadyToBegin starts the game from the lobby, a new player object is created from this prefab, and that object is made the active player object using [NetworkServer.ReplacePlayerForConnection].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the LobbyScene.</para>
        <para>This prefab must have a NetworkLobbyPlayer component on it. In the lobby scene, this will be the active player object, but in other scenes while the game is running, this will be replaced by a player object created from the GamePlayerPrefab. But once returned to the lobby scene this will again become the active player object. This can be used to store user data that persists for the lifetime of the session, such as color choices or weapon choices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyScene">
      <summary>The scene to use for the lobby. This is similar to the offlineScene of the NetworkManager.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyManager.lobbySlots">
      <summary>
        <para>These slots track players that enter the lobby.</para>
        <para>The slotId on players is global to the game - across all players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayers">
      <summary>
        <para>The maximum number of players allowed in the game.</para>
        <para>Note that this is the number "players" not clients or connections. There can be multiple players per client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection">
      <summary>
        <para>The maximum number of players per connection.</para>
        <para>Calling [ClientScene.AddPlayer] will fail if this limit is reached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.minPlayers">
      <summary>
        <para>The minimum number of players required to be ready for the game to start.</para>
        <para>If this is zero then the game can start with any number of players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.playScene">
      <summary>The scene to use for the playing the game from the lobby. This is similar to the onlineScene of the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.showLobbyGUI">
      <summary>
        <para>This flag enables display of the default lobby UI.</para>
        <para>This is rendered using the old GUI system, so is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin">
      <summary>
        <para>CheckReadyToBegin checks all of the players in the lobby to see if their readyToBegin flag is set.</para>
        <para>If all of the players are ready, then the server switches from the LobbyScene to the PlayScene - essentially starting the game. This is called automatically in response to NetworkLobbyPlayer.SendReadyToBeginMessage().</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed">
      <summary>
        <para>Called on the client when adding a player to the lobby fails.</para>
        <para>This could be because the lobby is full, or the connection is not allowed to have more players.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when it connects to server.</summary>
      <param name="conn">The connection that connected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when disconnected from a server.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientEnter">
      <summary>This is a hook to allow custom behaviour when the game client enters the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit">
      <summary>This is a hook to allow custom behaviour when the game client exits the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when the client is finished loading a new networked scene.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a new client connects to the server.</summary>
      <param name="conn">The new connection.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the GamePlayer object on the server.</para>
        <para>By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the lobby-player on the connection.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player on the connnection.</param>
      <returns>A new GamePlayer object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the lobby-player object on the server.</para>
        <para>By default the lobbyPlayerPrefab is used to create the lobby-player, but this function allows that behaviour to be customized.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player.</param>
      <returns>The new lobby-player object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a client disconnects.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>This is called on the server when a player is removed.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady">
      <summary>
        <para>This is called on the server when all the players in the lobby are ready.</para>
        <para>The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the lobby are ready, such as adding a countdown or a confirmation for a group leader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged(System.String)">
      <summary>This is called on the server when a networked scene finishes loading.</summary>
      <param name="sceneName">Name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This is called on the server when it is told that a client has finished switching from the lobby scene to a game player scene.</para>
        <para>When switching from the lobby, the lobby-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the lobby-player to the game-player object.</para>
      </summary>
      <param name="lobbyPlayer">The lobby player object.</param>
      <param name="gamePlayer">The game player object.</param>
      <returns>False to not allow this player to replace the lobby player.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>This is called on the client when a client is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartHost">
      <summary>This is called on the host when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer">
      <summary>This is called on the server when the server is started - including when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient">
      <summary>This is called on the client when the client stops.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost">
      <summary>This is called on the host when the host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby">
      <summary>Sends a message to the server to make the game return to the lobby scene.</summary>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby">
      <summary>Calling this causes the server to switch back to the lobby scene.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer">
      <summary>
        <para>This is used on clients to attempt to add a player to the game.</para>
        <para>This may fail if the game is full or the connection cannot have more players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin">
      <summary>
        <para>This is a flag that control whether this player is ready for the game to begin.</para>
        <para>When all players are ready to begin, the game will start. This should not be set directly, the SendReadyToBeginMessage function should be called on the client to set it on the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI">
      <summary>
        <para>This flag controls whether the default UI is shown for the lobby player.</para>
        <para>As this UI is rendered using the old GUI system, it is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.slot">
      <summary>
        <para>The slot within the lobby that this player inhabits.</para>
        <para>Lobby slots are global for the game - each player has a unique slotId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientEnterLobby">
      <summary>
        <para>This is a hook that is invoked on all player objects when entering the lobby.</para>
        <para>Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby">
      <summary>This is a hook that is invoked on all player objects when exiting the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientReady(System.Boolean)">
      <summary>
        <para>This is a hook that is invoked on clients when a LobbyPlayer switches between ready or not ready.</para>
        <para>This function is called when the a client player calls SendReadyToBeginMessage() or SendNotReadyToBeginMessage().</para>
      </summary>
      <param name="readyState">Whether the player is ready or not.</param>
      <seealso cref="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage" />
      <seealso cref="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer">
      <summary>
        <para>This removes this player from the lobby.</para>
        <para>This player object will be destroyed - on the server and on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is not ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage">
      <summary>
        <para>This is used on clients to tell the server that the client has switched from the lobby to the GameScene and is ready to play.</para>
        <para>This message triggers the server to replace the lobby player with the game player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.networkSceneName">
      <summary>
        <para>The name of the current network scene.</para>
        <para>This is populated if the NetworkManager is doing scene management. This should not be changed directly. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.singleton">
      <summary>The NetworkManager singleton object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.autoCreatePlayer">
      <summary>A flag to control whether or not player objects are automatically created on connect, and on scene change.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.channels">
      <summary>The Quality-of-Service channels to use for the network transport layer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.client">
      <summary>
        <para>The current NetworkClient being used by the manager.</para>
        <para>This is populated when StartClient or StartLocalClient are called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.clientLoadedScene">
      <summary>
        <para>This is true if the client loaded a new scene when connecting to the server.</para>
        <para>This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.connectionConfig">
      <summary>
        <para>The custom network configuration to use.</para>
        <para>This will be used to configure the network transport layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.customConfig">
      <summary>Flag to enable custom network configuration.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.dontDestroyOnLoad">
      <summary>
        <para>A flag to control whether the NetworkManager object is destroyed when the scene changes.</para>
        <para>This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.globalConfig">
      <summary>
        <para>The transport layer global configuration to be used.</para>
        <para>This defines global settings for the operation of the transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.isNetworkActive">
      <summary>
        <para>True if the NetworkServer or NetworkClient isactive.</para>
        <para>This is read-only. Calling StopServer() or StopClient() turns this off.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.logLevel">
      <summary>The log level specifically to user for network log messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matches">
      <summary>
        <para>The list of matches that are available to join.</para>
        <para>This will be populated if UMatch.ListMatches() has been called. It will contain the most recent set of results from calling ListMatches.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchHost">
      <summary>
        <para>The hostname of the matchmaking server.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchInfo">
      <summary>
        <para>A MatchInfo instance that will be used when StartServer() or StartClient() are called.</para>
        <para>This should be populated from the data handed to the callback for <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> or <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" />. It contains all the information necessary to connect to the match in question.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchMaker">
      <summary>
        <para>The UMatch MatchMaker object.</para>
        <para>This is populated if StartMatchMaker() has been called. It is used to communicate with the matchmaking service. This should be shut down after the match is complete to clean up its internal state. If this object is null then the client is not setup to communicate with MatchMaker yet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchName">
      <summary>
        <para>The name of the current match.</para>
        <para>A text string indicating the name of the current match in progress.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchPort">
      <summary>The port of the matchmaking service.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchSize">
      <summary>The maximum number of players in the current match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxConnections">
      <summary>
        <para>The maximum number of concurrent network connections to support.</para>
        <para>The effects the memory usage of the network layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.migrationManager">
      <summary>The migration manager being used with the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkAddress">
      <summary>
        <para>The network address currently in use.</para>
        <para>For clients, this is the address of the server that is connected to. For servers, this is the local address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkPort">
      <summary>
        <para>The network port currently in use.</para>
        <para>For clients, this is the port of the server connected to. For servers, this is the listen port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.numPlayers">
      <summary>
        <para>NumPlayers is the number of active player objects across all connections on the server.</para>
        <para>This is only valid on the host / server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.offlineScene">
      <summary>
        <para>The scene to switch to when offline.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.onlineScene">
      <summary>
        <para>The scene to switch to when online.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.packetLossPercentage">
      <summary>
        <para>The percentage of incoming and outgoing packets to be dropped for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerPrefab">
      <summary>
        <para>The default prefab to be used to create player objects on the server.</para>
        <para>Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerSpawnMethod">
      <summary>The current method of spawning players used by the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.runInBackground">
      <summary>
        <para>Controls whether the program runs when it is in the background.</para>
        <para>This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.scriptCRCCheck">
      <summary>
        <para>Flag for using the script CRC check between server and clients.</para>
        <para>Enables a CRC check between server and client that ensures the NetworkBehaviour scripts match. This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.secureTunnelEndpoint">
      <summary>
        <para>Allows you to specify an EndPoint object instead of setting networkAddress and networkPort (required for some platforms such as Xbox One).</para>
        <para>Setting this object overrides the networkAddress and networkPort fields, and will be used instead of making connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindAddress">
      <summary>
        <para>The IP address to bind the server to.</para>
        <para>This is only used if serverBindToIP is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindToIP">
      <summary>
        <para>Flag to tell the server whether to bind to a specific IP address.</para>
        <para>If this is false, then no specific IP address is bound to (IP_ANY).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.simulatedLatency">
      <summary>
        <para>The delay in milliseconds to be added to incoming and outgoing packets for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.spawnPrefabs">
      <summary>
        <para>List of prefabs that will be registered with the spawning system.</para>
        <para>For each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.startPositions">
      <summary>The list of currently registered player start positions for the current scene.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useSimulator">
      <summary>Flag that control whether clients started by this NetworkManager will use simulated latency and packet loss.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useWebSockets">
      <summary>
        <para>This makes the NetworkServer listen for WebSockets connections instead of normal transport layer connections.</para>
        <para>This allows WebGL clients to connect to the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.GetStartPosition">
      <summary>
        <para>This finds a spawn position based on NetworkStartPosition objects in the scene.</para>
        <para>This is used by the default implementation of OnServerAddPlayer.</para>
      </summary>
      <returns>Returns the transform to spawn a player at, or null.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.IsClientConnected">
      <summary>
        <para>This checks if the NetworkManager has a client and that it is connected to a server.</para>
        <para>This is more specific than NetworkClient.isActive, which will be true if there are any clients active, rather than just the NetworkManager's client.</para>
      </summary>
      <returns>True if the NetworkManagers client is connected to a server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the client when connected to a server.</para>
        <para>The default implementation of this function sets the client as ready and adds a player.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on clients when disconnected from a server.</summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on clients when a network error occurs.</summary>
      <param name="conn">Connection to a server.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a servers tells the client it is no longer ready.</para>
        <para>This is commonly used when switching scenes.</para>
      </summary>
      <param name="conn">Connection to a server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.</para>
        <para>Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.</para>
      </summary>
      <param name="conn">The network connection that the scene change message arrived on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnDestroyMatch(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.DestroyMatch" /> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnDropConnection(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.DropConnection" /> match request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchCreate(System.Boolean,System.String,UnityEngine.Networking.Match.MatchInfo)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
      <param name="matchInfo">The information about the newly created match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchJoined(System.Boolean,System.String,UnityEngine.Networking.Match.MatchInfo)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
      <param name="matchInfo">The info for the newly joined match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchList(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches" /> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerAddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>Called on the server when a client adds a new player with ClientScene.AddPlayer.</para>
        <para>The default implementation for this function creates a new player object from the playerPrefab.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="playerControllerId">Id of the new player.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a new client connects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a client disconnects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on the server when a network error occurs for a client connection.</summary>
      <param name="conn">Connection from client.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a client is ready.</para>
        <para>The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerRemovePlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.PlayerController)">
      <summary>
        <para>Called on the server when a client removes a player.</para>
        <para>The default implementation of this function destroys the corresponding player object.</para>
      </summary>
      <param name="conn">The connection to remove the player from.</param>
      <param name="player">The player controller to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerSceneChanged(System.String)">
      <summary>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</summary>
      <param name="sceneName">The name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnSetMatchAttributes(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.SetMatchAttributes" /> has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is a hook that is invoked when the client is started.</para>
        <para>StartClient has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
      <param name="client">The NetworkClient object that was started.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartHost">
      <summary>
        <para>This hook is invoked when a host is started.</para>
        <para>StartHost has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartServer">
      <summary>
        <para>This hook is invoked when a server is started - including when a host is started.</para>
        <para>StartServer has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopClient">
      <summary>This hook is called when a client is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopHost">
      <summary>This hook is called when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopServer">
      <summary>This hook is called when a server is stopped - including when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.ServerChangeScene(System.String)">
      <summary>
        <para>This causes the server to switch scenes and sets the networkSceneName.</para>
        <para>Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.</para>
      </summary>
      <param name="newSceneName">The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetMatchHost(System.String,System.Int32,System.Boolean)">
      <summary>
        <para>This sets the address of the MatchMaker service.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
      <param name="newHost">Hostname of MatchMaker service.</param>
      <param name="port">Port of MatchMaker service.</param>
      <param name="https">Protocol used by MatchMaker service.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetupMigrationManager(UnityEngine.Networking.NetworkMigrationManager)">
      <summary>
        <para>This sets up a NetworkMigrationManager object to work with this NetworkManager.</para>
        <para>The NetworkManager will automatically call functions on the migration manager, such as <see cref="UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient" /> when network events happen.</para>
      </summary>
      <param name="man">The migration manager object to use with the NetworkManager.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartClient">
      <summary>
        <para>This starts a network client. It uses the networkAddress and networkPort properties as the address to connect to.</para>
        <para>This makes the newly created client connect to the server immediately.</para>
      </summary>
      <returns>The client object created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartHost">
      <summary>
        <para>This starts a network "host" - a server and client in the same application.</para>
        <para>The client returned from StartHost() is a special "local" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client.</para>
      </summary>
      <returns>The client object created - this is a "local client".</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartMatchMaker">
      <summary>
        <para>This starts MatchMaker for the NetworkManager.</para>
        <para>This uses the matchHost and matchPort properties as the address of the MatchMaker service to connect to. Please call SetMatchHost prior to calling this function if you are not using the default MatchMaker address.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartServer">
      <summary>
        <para>This starts a new server.</para>
        <para>This uses the networkPort property as the listen port.</para>
      </summary>
      <returns>True is the server was started.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopClient">
      <summary>Stops the client that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopHost">
      <summary>This stops both the client and the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopMatchMaker">
      <summary>
        <para>Stops the MatchMaker that the NetworkManager is using.</para>
        <para>This should be called after a match is complete and before starting or joining a new match.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopServer">
      <summary>Stops the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UseExternalClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This allows the NetworkManager to use a client object created externally to the NetworkManager instead of using StartClient().</para>
        <para>The StartClient() function creates a client object, but this is not always what is desired. UseExternalClient allows a NetworkClient object to be created by other code and used with the NetworkManager. The client object will have the standard NetworkManager message handlers registered on it.</para>
      </summary>
      <param name="externalClient">The NetworkClient object to use.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.RegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Registers the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by NetworkStartPosition components, but can be done manually from user script code.</para>
      </summary>
      <param name="start">Transform to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.Shutdown">
      <summary>
        <para>Shuts down the NetworkManager completely and destroy the singleton.</para>
        <para>This is required if a new NetworkManager instance needs to be created after the original one was destroyed. The example below has a reference to the GameObject with the NetworkManager on it and destroys the instance before calling Shutdown() and switching scenes.</para>
        <para>This cleanup allows a new scene with a new NetworkManager to be loaded.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UnRegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Unregisters the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by the <see cref="UnityEngine.Networking.NetworkStartPosition" /> component, but can be done manually from user code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.manager">
      <summary>The NetworkManager associated with this HUD.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetX">
      <summary>The horizontal offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetY">
      <summary>The vertical offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.showGUI">
      <summary>Whether to show the default control HUD at runtime.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.MaxMessageSize">
      <summary>
        <para>The size of the largest message in bytes that can be sent on a NetworkConnection.</para>
        <para>Note that channels that are not Fragmented cannot send messages larger than the Maximum Transmission Unity (MTU) size, which is about 1400 bytes by default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.channelId">
      <summary>The transport layer channel the message was sent on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.conn">
      <summary>The connection the message was recieved on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.msgType">
      <summary>The id of the message type of the message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.reader">
      <summary>
        <para>A NetworkReader object that contains the contents of the message.</para>
        <para>For some built-in message types with no body, this can be null.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.Dump(System.Byte[],System.Int32)">
      <summary>Returns a string with the numeric representation of each byte in the payload.</summary>
      <param name="payload">Network message payload to dump.</param>
      <param name="sz">Length of payload in bytes.</param>
      <returns>Dumped info from payload.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.client">
      <summary>
        <para>The client instance that is being used to connect to the host.</para>
        <para>This is populated by the Initialize() method. It will be set automatically by the NetworkManager if one is being used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost">
      <summary>True is this is a client that has been disconnected from a host.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostMigration">
      <summary>
        <para>Controls whether host migration is active.</para>
        <para>If this is not true, then SendPeerInfo() will not send peer information to clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown">
      <summary>True if this was the host and the host has been shut down.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.matchInfo">
      <summary>Information about the match. This may be null if there is no match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.newHostAddress">
      <summary>
        <para>The IP address of the new host to connect to.</para>
        <para>The FindNewHost utility function will set this address. Methods of choosing the new host that are implemented by users should also set this address. The default UI button to "Reconnect to New Host" uses this address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetX">
      <summary>The X offset in pixels of the migration manager default GUI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetY">
      <summary>The Y offset in pixels of the migration manager default GUI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId">
      <summary>
        <para>The connectionId that this client was assign on the old host.</para>
        <para>This is the Id that will be set on the ClientScene as the ReconnectId. This Id will be used to identify the client when it connects to the new host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.peers">
      <summary>
        <para>The set of peers involved in the game. This includes the host and this client.</para>
        <para>This is populated on clients when they recieve a MsgType.NetworkInfo message from the host. That message is sent when SendPeerInfo() is called on the host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.pendingPlayers">
      <summary>
        <para>The player objects that have been disabled, and are waiting for their corresponding clients to reconnect.</para>
        <para>There may be multiple pending player GameObjects for each peer. Each will have a different playerControllerId. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.showGUI">
      <summary>Flag to toggle display of the default UI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost">
      <summary>True if this is a client that was disconnected from the host and is now waiting to reconnect to the new host.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost">
      <summary>True if this is a client that was disconnected from the host, and was chosen as the new host.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost(System.Int32)">
      <summary>
        <para>This causes a client that has been disconnected from the host to become the new host of the game.</para>
        <para>This starts a server, initializes it with the state of the existing networked objects, and starts a local client so that this client becomes a host. The old NetworkClient instance that was connected to the old host is destroyed. This will cause OnStartServer to be called on networked objects in the scene. Any player objects for this peer will automatically be re-added through the local client that was created.</para>
      </summary>
      <param name="port">The network port to listen on.</param>
      <returns>True if able to become the new host.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects">
      <summary>
        <para>This causes objects for known players to be disabled.</para>
        <para>These objects are added to the pendingPlayers list, and will be re-enabled when their clients reconnect. This happens when the connection to the host of the game is lost.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.FindNewHost(UnityEngine.Networking.NetworkSystem.PeerInfoMessage@,System.Boolean@)">
      <summary>
        <para>This is a utility function to pick one of the peers in the game as the new host.</para>
        <para>This function implements the default host-choosing strategy of picking the peer with the lowest connectionId on the server. Applications are not required to use this function to choose the new host. They can use any method they want. The choice does not have to be made synchronously, so it is possible to communicate with an external service to choose the new host. However, the default UI of the NetworkMigrationManager calls into this function.</para>
      </summary>
      <param name="newHostInfo">Information about the new host, including the IP address.</param>
      <param name="youAreNewHost">True if this client is to be the new host.</param>
      <returns>True if able to pick a new host.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Initialize(UnityEngine.Networking.NetworkClient,UnityEngine.Networking.Match.MatchInfo)">
      <summary>
        <para>Used to initialize the migration manager with client and match information.</para>
        <para>This is called automatically by the NetworkManager from within StartClient() if a NetworkManager is being used with the migration manager.</para>
      </summary>
      <param name="newClient">The NetworkClient being used to connect to the host.</param>
      <param name="newMatchInfo">Information about the match being used. This may be null if there is no match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This should be called on a client when it has lost its connection to the host.</para>
        <para>This will caus the virtual function OnClientDisconnectedFromHost to be invoked. This is called automatically by the NetworkManager if one is in use.</para>
      </summary>
      <param name="conn">The connection of the client that was connected to the host.</param>
      <returns>True if the client should stay in the on-line scene.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost">
      <summary>
        <para>This should be called on a host when it has has been shutdown.</para>
        <para>This causes the virtual function OnServerHostShutdown to be invoked. This is called automatically by the NetworkManager if one is in use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>This re-establishes a non-player object with client authority with a client that is reconnected. It is similar to NetworkServer.SpawnWithClientAuthority().</para>
        <para>This is called by the default implementation of OnServerReconnectObject.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldObject">The object with client authority that is being reconnected.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <returns>True if the object was reconnected.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16)">
      <summary>
        <para>This re-establishes a player object with a client that is reconnected. It is similar to NetworkServer.AddPlayerForConnection(). The player game object will become the player object for the new connection.</para>
        <para>This is called by the default implementation of OnServerReconnectPlayer.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is rejoining.</param>
      <returns>True if able to re-add this player.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Reset(System.Int32)">
      <summary>Resets the migration manager, and sets the ClientScene's ReconnectId.</summary>
      <param name="reconnectId">The connectionId for the ClientScene to use when reconnecting.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo">
      <summary>
        <para>This sends the set of peers in the game to all the peers in the game.</para>
        <para>This is called automatically by the NetworkManager if one is active. It happens when clients connect to and disconnect from the server, and when players are added and removed from clients. The function SendPeers() udpates all clients with the information about which client owns which objects. It is automatically called when players are added and removed via the NetworkManager, but there is no hook in the NetworkManager when non-player client authority objects are added and removed. SendPeerInfo() is NOT called automatically. It is up to user code to call SendPeerInfo() when they want to update the set of client-owned objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnAuthorityUpdated(UnityEngine.GameObject,System.Int32,System.Boolean)">
      <summary>
        <para>A virtual function that is called when the authority of a non-player object changes.</para>
        <para>This is called on the host and on clients when the AssignClientAuthority, RemoveClientAuthority and NetworkServer.SpawnWithClientAuthority are used.</para>
      </summary>
      <param name="go">The game object whose authority has changed.</param>
      <param name="connectionId">The id of the connection whose authority changed for this object.</param>
      <param name="authorityState">The new authority state for the object.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnClientDisconnectedFromHost(UnityEngine.Networking.NetworkConnection,Networking.NetworkMigrationManager.SceneChangeOption)">
      <summary>
        <para>A virtual function that is called when the client is disconnected from the host.</para>
        <para>The sceneChange parameter allows the game to choose to stay in the current scene, or switch to the offline scene.</para>
      </summary>
      <param name="conn">The connection to the old host.</param>
      <param name="sceneChange">How to handle scene changes.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnPeersUpdated(UnityEngine.Networking.NetworkSystem.PeerListMessage)">
      <summary>
        <para>A virtual function that is called when the set of peers in the game changes.</para>
        <para>This happens when a new client connects to the host, a client disconnects from the host, and when players are added and removed from clients. The list of peers is stored in the member variable peers on the migration manager. This is used when the connection to the host is lost, to choose the new host and to re-add player objects.</para>
      </summary>
      <param name="peers">The set of peers in the game.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerHostShutdown">
      <summary>
        <para>A virtual function that is called when the host is shutdown.</para>
        <para>Calling NetworkManager.StopHost() will cause this function to be invoked if there is an active NetworkMigrationManager. Using the Stop Host button of the NetworkManagerHUD will cause this to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectObject(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>A virtual function that is called for non-player objects with client authority on the new host when a client from the old host reconnects to the new host.</para>
        <para>The base class version of this function calls ReconnectObjectForConnection() to hookup the object for the new client.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldObject">The object with authority that is being reconnected.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16)">
      <summary>
        <para>A virtual function that is called on the new host when a client from the old host reconnects to the new host.</para>
        <para>The base class version of this function calls ReconnectPlayerForConnection() to hookup the new client. ReconnectPlayerForConnection does not have to be called from within this function, it can be done asynchronously.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object associated with this client.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is re-joining.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16,UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>A virtual function that is called on the new host when a client from the old host reconnects to the new host.</para>
        <para>The base class version of this function calls ReconnectPlayerForConnection() to hookup the new client. ReconnectPlayerForConnection does not have to be called from within this function, it can be done asynchronously.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object associated with this client.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is re-joining.</param>
      <param name="extraMessageReader">Additional message data (optional).</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.checkMethod">
      <summary>Which method to use for checking proximity of players.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.forceHidden">
      <summary>
        <para>Flag to force this object to be hidden for players.</para>
        <para>If this object is a player object, it will not be hidden for that player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visRange">
      <summary>The maximim range that objects will be visible at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval">
      <summary>How often (in seconds) that this object should update the set of players that can see it.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Length">
      <summary>The current length of the buffer.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Position">
      <summary>The current position within the buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor">
      <summary>Creates a new NetworkReader object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor(System.Byte[])">
      <summary>Creates a new NetworkReader object.</summary>
      <param name="buffer">A buffer to construct the reader with, this buffer is NOT copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBoolean">
      <summary>Reads a boolean from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadByte">
      <summary>Reads a byte from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytes(System.Int32)">
      <summary>Reads a number of bytes from the stream.</summary>
      <param name="count">Number of bytes to read.</param>
      <returns>Bytes read. (this is a copy).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytesAndSize">
      <summary>
        <para>This read a 16-bit byte count and a array of bytes of that size from the stream.</para>
        <para>The format used by this function is the same as NetworkWriter.WriteBytesAndSize().</para>
      </summary>
      <returns>The bytes read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadChar">
      <summary>Reads a char from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor">
      <summary>Reads a unity Color objects.</summary>
      <returns>The color read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor32">
      <summary>Reads a unity color32 objects.</summary>
      <returns>The colo read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDecimal">
      <summary>Reads a decimal from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDouble">
      <summary>Reads a double from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadGameObject">
      <summary>Reads a reference to a GameObject from the stream.</summary>
      <returns>The GameObject referenced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt16">
      <summary>Reads a signed 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt32">
      <summary>Reads a signed 32bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt64">
      <summary>Reads a signed 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMatrix4x4">
      <summary>Reads a unity Matrix4x4 object.</summary>
      <returns>The matrix read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkHash128">
      <summary>Reads a NetworkHash128 assetId.</summary>
      <returns>The assetId object read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkId">
      <summary>Reads a NetworkInstanceId from the stream.</summary>
      <returns>The NetworkInstanceId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkIdentity">
      <summary>Reads a reference to a NetworkIdentity from the stream.</summary>
      <returns>The NetworkIdentity object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt32">
      <summary>Reads a 32-bit variable-length-encoded value.</summary>
      <returns>The 32 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt64">
      <summary>Reads a 64-bit variable-length-encoded value.</summary>
      <returns>The 64 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPlane">
      <summary>Reads a unity Plane object.</summary>
      <returns>The plane read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadQuaternion">
      <summary>Reads a Unity Quaternion object.</summary>
      <returns>The quaternion read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRay">
      <summary>Reads a Unity Ray object.</summary>
      <returns>The ray read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRect">
      <summary>Reads a Unity Rect object.</summary>
      <returns>The rect read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSByte">
      <summary>Reads a signed byte from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSceneId">
      <summary>Reads a NetworkSceneId from the stream.</summary>
      <returns>The NetworkSceneId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSingle">
      <summary>Reads a float from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadString">
      <summary>Reads a string from the stream. (max of 32k bytes).</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadTransform">
      <summary>
        <para>Reads a reference to a Transform from the stream.</para>
        <para>The game object of this Transform must have a NetworkIdentity.</para>
      </summary>
      <returns>The transform object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt16">
      <summary>Reads an unsigned 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt32">
      <summary>Reads an unsigned 32 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt64">
      <summary>Reads an unsigned 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector2">
      <summary>Reads a Unity Vector2 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector3">
      <summary>Reads a Unity Vector3 objects.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector4">
      <summary>Reads a Unity Vector4 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.SeekZero">
      <summary>Sets the current position of the reader's stream to the start of the stream.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ToString">
      <summary>Returns a string representation of the reader's buffer.</summary>
      <returns>Buffer contents.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkSceneId.Value">
      <summary>The internal value for this object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.IsEmpty">
      <summary>Returns true if the value is zero. Non-scene objects - ones which are spawned at runtime will have a sceneId of zero.</summary>
      <returns>True if zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.ToString">
      <summary>Returns a string like SceneId:value.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.active">
      <summary>
        <para>Checks if the server has been started.</para>
        <para>This will be true after NetworkServer.Listen() has been called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.connections">
      <summary>
        <para>A list of all the current connections from clients.</para>
        <para>The connections in the list are at the index of their connectionId. There may be nulls in this list for disconnected clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.dontListen">
      <summary>
        <para>If you enable this, the server will not listen for incoming connections on the regular network port.</para>
        <para>This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection().</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.handlers">
      <summary>
        <para>Dictionary of the message handlers registered with the server.</para>
        <para>The key to the dictionary is the message Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.hostTopology">
      <summary>
        <para>The host topology that the server is using.</para>
        <para>This is read-only once the server is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.listenPort">
      <summary>The port that the server is listening on.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localClientActive">
      <summary>
        <para>True is a local client is currently active on the server.</para>
        <para>This will be true for "Hosts" on hosted server games.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localConnections">
      <summary>A list of local connections on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.networkConnectionClass">
      <summary>
        <para>The class to be used when creating new network connections.</para>
        <para>This can be set with SetNetworkConnectionClass. This allows custom classes that do special processing of data from the transport layer to be used with the NetworkServer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.numChannels">
      <summary>The number of channels the network is configure with.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the server.</para>
        <para>The key to the dictionary is NetworkIdentity netId.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.serverHostId">
      <summary>The transport layer hostId used by this server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.useWebSockets">
      <summary>
        <para>This makes the server listen for WebSockets connections instead of normal transport layer connections.</para>
        <para>This allows WebGL clients to connect to this server. Note that WebGL clients cannot listen for WebSocket connections, they can only make outgoing WebSockets connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddExternalConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This accepts a network connection from another external source and adds it to the server.</para>
        <para>This connection will use the callbacks registered with the server, and can have players added to it like any other connection.</para>
      </summary>
      <param name="conn">Network connection to add.</param>
      <returns>True if added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection.</para>
        <para>When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for "adding" a player, not for "replacing" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.BecomeHost(UnityEngine.Networking.NetworkClient,System.Int32,UnityEngine.Networking.Match.MatchInfo)">
      <summary>
        <para>This allows a client that has been disconnected from a server, to become the host of a new version of the game.</para>
        <para>This is used by the NetworkMigrationManager.</para>
      </summary>
      <returns>The local client connected to the new host.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearHandlers">
      <summary>Clear all registered callback handlers.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearLocalObjects">
      <summary>This clears all of the networked objects that the server is aware of. This can be required if a scene change deleted all of the objects without destroying them in the normal manner.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearSpawners">
      <summary>Clears all registered spawn prefab and spawn handler functions for this server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>This configures the transport layer settings for the server.</summary>
      <param name="config">Transport layer confuration object.</param>
      <param name="maxConnections">The maximum number of client connections to allow.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.HostTopology)">
      <summary>This configures the transport layer settings for the server.</summary>
      <param name="topology">Transport layer topology object to use.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Destroy(UnityEngine.GameObject)">
      <summary>
        <para>Destroys this object and corresponding objects on all clients.</para>
        <para>In some cases it is useful to remove an object but not delete it on the server. For that, use NetworkServer.UnSpawn() instead of NetworkServer.Destroy().</para>
      </summary>
      <param name="obj">Game object to destroy.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DestroyPlayersForConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This destroys all the player objects associated with a NetworkConnections on a server.</para>
        <para>This is used when a client disconnects, to remove the players for that client. This also destroys non-player objects that have client authority set for this connection.</para>
      </summary>
      <param name="conn">The connections object to clean up for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DisconnectAll">
      <summary>
        <para>Disconnect all currently connected clients.</para>
        <para>This can only be called on the server. Clients will receive the Disconnect message.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.FindLocalObject(UnityEngine.Networking.NetworkInstanceId)">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
        <para>Since netIds are the same on the server and all clients for a game, this allows clients to send a netId of a local game objects, and have the server find the corresponding server object.</para>
      </summary>
      <param name="netId">The netId of the NetworkIdentity object to find.</param>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetConnectionStats">
      <summary>Gets aggregate packet stats for all connections.</summary>
      <returns>Dictionary of msg types and packet statistics.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the server.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.String,System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the Relay server instead of a local socket.</summary>
      <param name="ipAddress">The IP address to bind to (optional).</param>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the Relay server instead of a local socket.</summary>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>Starts a server using a Relay server. This is the manual way of using the Relay server, as the regular NetworkServer.Connect() will automatically use the Relay server if a match exists.</summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
        <para>The system message types are listed below:</para>
        <para>Most of these messages are for internal use only. Users should not define message ids in this range.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RemoveExternalConnection(System.Int32)">
      <summary>This removes an external connection added with AddExternalConnection().</summary>
      <param name="connectionId">The id of the connection to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ReplacePlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>This replaces the player object for a connection with a different player object. The old player object is not destroyed.</para>
        <para>If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changin scenes.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was replaced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Reset">
      <summary>Reset the NetworkServer singleton.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ResetConnectionStats">
      <summary>Resets the packet stats on all connections.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToAll(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients on a specified transport layer QoS channel.</summary>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to use.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToReady(UnityEngine.GameObject,System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients that are "ready" on a specified transport layer QoS channel.</summary>
      <param name="contextObj">An object to use for context when calculating object visibility. If null, then the message is sent to all ready clients.</param>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToPlayer(UnityEngine.GameObject,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to a specific player.</para>
        <para>This bypasses the usual serialization and message structures, allowing raw bytes to be send to a player. The contents will be processed as a message on the client of the player, so it must be structured properly.</para>
      </summary>
      <param name="player">The player to send the bytes to.</param>
      <param name="buffer">Array of bytes to send.</param>
      <param name="numBytes">Size of array.</param>
      <param name="channelId">Transport layer channel id to send bytes on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToReady(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to all ready players.</para>
        <para>This bypasses the usual serialization and message structures, allowing raw bytes to be send to all ready players. The contents will be processed as a message on the client of the player, so it must be structured properly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToAll``1(System.Int16,``0)">
      <summary>
        <para>Send a message structure with the given type number to all connected clients.</para>
        <para>This applies to clients that are ready and not-ready.</para>
      </summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClient``1(System.Int32,System.Int16,``0)">
      <summary>Send a message to the client which owns the given connection ID.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClientOfPlayer``1(UnityEngine.GameObject,System.Int16,``0)">
      <summary>
        <para>Send a message to the client which owns the given player object instance.</para>
        <para>This function is not very efficient. It is better to send a message directly on the connection object of the player - which can be obtained from the "connectionToClient" member variable on NetworkBehaviour components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToReady``1(System.Int16,``0)">
      <summary>
        <para>Send a message structure with the given type number to only clients which are ready.</para>
        <para>See Networking.NetworkClient.Ready.</para>
      </summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToAll``1(System.Int16,``0)">
      <summary>Send given message structure as an unreliable message to all connected clients.</summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToReady``1(System.Int16,``0)">
      <summary>
        <para>Send given message structure as an unreliable message only to ready clients.</para>
        <para>See Networking.NetworkClient.Ready.</para>
      </summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendWriterToReady(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>Sends the contents of a NetworkWriter object to the ready players.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetAllClientsNotReady">
      <summary>
        <para>Marks all connected clients as no longer ready.</para>
        <para>All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client of the connection to be not-ready.</para>
        <para>Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady().</para>
      </summary>
      <param name="conn">The connection of the client to make not ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client to be ready.</para>
        <para>When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed.</para>
      </summary>
      <param name="conn">The connection of the client to make ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Shutdown">
      <summary>This shuts down the server and disconnects all clients.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Spawn(UnityEngine.GameObject)">
      <summary>
        <para>Spawn the given game object on all clients which are ready.</para>
        <para>This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function.</para>
      </summary>
      <param name="obj">Game object with NetworkIdentity to spawn.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnObjects">
      <summary>
        <para>This causes NetworkIdentity objects in a scene to be spawned on a server.</para>
        <para>NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them.</para>
      </summary>
      <returns>Success if objects where spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority" /> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnregisterHandler(System.Int16)">
      <summary>Unregisters a handler for a particular message type.</summary>
      <param name="msgType">The message type to remove the handler for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnSpawn(UnityEngine.GameObject)">
      <summary>
        <para>This takes an object that has been spawned and un-spawns it.</para>
        <para>The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object. Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later.</para>
      </summary>
      <param name="obj">The spawned object to be unspawned.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.connections">
      <summary>A read-only list of the current connections being managed.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.handlers">
      <summary>The message handler functions that are registered.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.hostTopology">
      <summary>
        <para>The transport layer host-topology that the server is configured with.</para>
        <para>A host topology object can be passed to the Listen() function, or a default host topology that is compatible with the default topology of NetworkClient will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.listenPort">
      <summary>The network port that the server is listening on.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageBuffer">
      <summary>The internal buffer that the server reads data from the network into. This will contain the most recent data read from the network when OnData() is called.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageReader">
      <summary>A NetworkReader object that is bound to the server's messageBuffer.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.networkConnectionClass">
      <summary>
        <para>The type of class to be created for new network connections from clients.</para>
        <para>By default this is the NetworkConnection class, but it can be changed with SetNetworkConnectionClass() to classes derived from NetworkConnections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.serverHostId">
      <summary>The transport layer hostId of the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.useWebSockets">
      <summary>
        <para>This causes the server to listen for WebSocket connections instead of regular transport layer connections.</para>
        <para>This allows WebGL clients to talk to the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ClearHandlers">
      <summary>Clears the message handlers that are registered.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>This configures the network transport layer of the server.</summary>
      <param name="config">The transport layer configuration to use.</param>
      <param name="maxConnections">Maximum number of network connections to allow.</param>
      <returns>True if configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.HostTopology)">
      <summary>This configures the network transport layer of the server.</summary>
      <param name="topology">The transport layer host topology to use.</param>
      <returns>True if configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Disconnect(System.Int32)">
      <summary>This disconnects the connection of the corresponding connection id.</summary>
      <param name="connectionId">The id of the connection to disconnect.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections">
      <summary>This disconnects all of the active connections.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.FindConnection(System.Int32)">
      <summary>This looks up the network connection object for the specified connection Id.</summary>
      <param name="connectionId">The connection id to look up.</param>
      <returns>A NetworkConnection objects, or null if no connection found.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Initialize">
      <summary>Initialization function that is invoked when the server starts listening. This can be overridden to perform custom initialization such as setting the NetworkConnectionClass.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32)">
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param name="serverListenPort">The port to listen on.</param>
      <returns>True if able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param name="serverListenPort">The port to listen on.</param>
      <param name="topology">The transport layer host toplogy to configure with.</param>
      <returns>True if able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>Starts a server using a Relay server. This is the manual way of using the Relay server, as the regular NetworkServer.Connect() will automatically use the Relay server if a match exists.</summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for new network connections.</para>
        <para>By default OnConnected just invokes a connect event on the new connection.</para>
      </summary>
      <param name="conn">The new connection object.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnectError(System.Int32,System.Byte)">
      <summary>A virtual function that is invoked when there is a connection error.</summary>
      <param name="connectionId">The id of the connection with the error.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnData(UnityEngine.Networking.NetworkConnection,System.Int32,System.Int32)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality when data is received for a connection.</para>
        <para>By default this function calls HandleData() which will process the data and invoke message handlers for any messages that it finds.</para>
      </summary>
      <param name="conn">The connection that data was received on.</param>
      <param name="receivedSize">The amount of data received.</param>
      <param name="channelId">The channel that data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDataError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>A virtual function that is called when a data error occurs on a connection.</summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for disconnected network connections.</para>
        <para>By default OnConnected just invokes a disconnect event on the new connection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnectError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>A virtual function that is called when a disconnect error happens.</summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>This registers a handler function for a message Id.</summary>
      <param name="msgType">Message Id to register handler for.</param>
      <param name="handler">Handler function.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex(System.Int32)">
      <summary>
        <para>This removes a connection object from the server's list of connections.</para>
        <para>This is a low-level function that should not be used for regular connections. It is only safe to remove connections added with SetConnectionAtIndex() using this function.</para>
      </summary>
      <param name="connectionId">The id of the connection to remove.</param>
      <returns>True if removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendBytesTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>This sends the data in an array of bytes to the connected client.</summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="bytes">The data to send.</param>
      <param name="numBytes">The size of the data to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendWriterTo(System.Int32,UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>This sends the contents of a NetworkWriter object to the connected client.</summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="writer">The writer object to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This adds a connection created by external code to the server's list of connections, at the connection's connectionId index.</para>
        <para>Connections are usually added automatically, this is a low-level function for the rare special case of externally created connections.</para>
      </summary>
      <param name="conn">A new connection object.</param>
      <returns>True if added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Stop">
      <summary>This stops a server from listening.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UnregisterHandler(System.Int16)">
      <summary>This unregisters a registered message handler function.</summary>
      <param name="msgType">The message id to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Update">
      <summary>
        <para>This function pumps the server causing incoming network data to be processed, and pending outgoing data to be sent.</para>
        <para>This should be called each frame, and is called automatically for the server used by NetworkServer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UpdateConnections">
      <summary>
        <para>This function causes pending outgoing data on connections to be sent, but unlike Update() it works when the server is not listening.</para>
        <para>When the server is using externally added connections and the dontListen flag is set, the regular connection flush in the Update() function does not happen. In this case, UpdateConnections can be called to pump the external connections. This is an advanced usage that should not be required unless the server uses custom NetworkConnection classes that do not use the built-in transport layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.characterContoller">
      <summary>Cached CharacterController.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback2D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 2D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference. The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback3D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 3D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference. The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.grounded">
      <summary>
        <para>Tells the NetworkTransform that it is on a surface (this is the default).</para>
        <para>Object that are NOT grounded will not interpolate their vertical velocity. This avoid the problem of interpolation fighting with gravity on non-authoritative objects. This only works for RigidBody2D physics objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateMovement">
      <summary>
        <para>Enables interpolation of the synchronized movement.</para>
        <para>The larger this number is, the faster the object will interpolate to the target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateRotation">
      <summary>
        <para>Enables interpolation of the synchronized rotation.</para>
        <para>If this is not set, object will snap to the new rotation. The larger this number is, the faster the object will interpolate to the target facing direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.movementTheshold">
      <summary>The distance that an object can move without sending a movement synchronization update.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody2D">
      <summary>Cached Rigidbody2D.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody3D">
      <summary>Cached Rigidbody.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.sendInterval">
      <summary>
        <para>The sendInterval controls how often state updates are sent for this object.</para>
        <para>Unlike most NetworkBehaviour scripts, for NetworkTransform this is implemented at a per-object level rather than at the per-script level. This allows more flexibility as this component is used in various situation. If sendInterval is non-zero, then transform state updates are send at most once every sendInterval seconds. However, if an object is stationary, no updates are sent. If sendInterval is zero, then no automatic updates are sent. In this case, calling SetDirtyBits() on the NetworkTransform will cause an updates to be sent. This could be used for objects like bullets that have a predictable trajectory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.snapThreshold">
      <summary>If a movement update puts an object further from its current position that this value, it will snap to the position instead of moving smoothly.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation2D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation3D">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncVelocity">
      <summary>The velocity send for synchronization.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.transformSyncMode">
      <summary>What method to use to sync the object's position.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.childIndex">
      <summary>A unique Identifier for this NetworkTransformChild component on this root object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D">
      <summary>A callback function to allow server side validation of the movement of the child object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateMovement">
      <summary>
        <para>The rate to interpolate towards the target position.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateRotation">
      <summary>
        <para>The rate to interpolate to the target rotation.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.sendInterval">
      <summary>The sendInterval controls how often state updates are sent for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.target">
      <summary>The child transform to be synchronized.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab">
      <summary>The prefab to use for the visualization object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransport.IsStarted">
      <summary>Deprecated.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology" />.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology" />.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology" />.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology" /> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Tries to establish a connection to another peer.</para>
        <para>
          <see cref="UnityEngine.Networking.NetworkTransport.Connect" /> can still fail despite returning a non-zero connection id, so make sure to poll <see cref="UnityEngine.Networking.NetworkTransport.Receive" /> or <see cref="UnityEngine.Networking.NetworkTransport.ReceiveFromHost" /> to listen for events. If everything is OK a <see cref="UnityEngine.Networking.NetworkEventType.ConnectEvent" /> will be returned.</para>
      </summary>
      <param name="hostId">Host id associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="address">IPv4 address of the other peer.</param>
      <param name="port">Port of the other peer.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectAsNetworkHost(System.Int32,System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create dedicated connection to Relay server.</para>
        <para>Calling this function sets the connection as the owner of the network group on the Relay server. This client should call <see cref="UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost" /> periodically to be notified about connection/disconnection events to/from Relay server.</para>
      </summary>
      <param name="hostId">Host id associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="address">IPv4 address of the relay.</param>
      <param name="port">Port of the relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId" />.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID" />.</param>
      <param name="node">Slot id for this user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId" />.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectEndPoint(System.Int32,System.Net.EndPoint,System.Int32,System.Byte@)">
      <summary>
        <para>Try to establish connection to other peer, where the peer is specified using a C# System.EndPoint.</para>
        <para>This is primarily useful on platforms (such as Xbox One) that require passing in special structures representing the remote host (as compared to the usual IP/port combination). This is also useful for libraries relying on using an IPEndPoint object.</para>
      </summary>
      <param name="hostId">Host id associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Int32,System.Single,System.Byte@)">
      <summary>
        <para>Create a connection to another peer in the Relay group.</para>
        <para>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Connect" /> but using the Relay server.</para>
      </summary>
      <param name="hostId">Host id associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="address">IP address of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.address" />.</param>
      <param name="port">Port of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.port" />.</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="relaySlotId">Id of the remote peer in relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId" />.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID" />.</param>
      <param name="node">Slot id reserved for the user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId" />.</param>
      <param name="bytesPerSec">Average bandwidth (bandwidth will be throttled on this level).</param>
      <param name="bucketSizeFactor">Allowed peak bandwidth (peak bandwidth = factor*bytesPerSec, recommended value is 2.0) If data has not been sent for a long time, it is allowed to send more data, with factor 2 it is allowed send 2*bytesPerSec bytes per sec.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create a connection to another peer in the Relay group.</para>
        <para>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Connect" /> but using the Relay server.</para>
      </summary>
      <param name="hostId">Host id associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="address">IP address of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.address" />.</param>
      <param name="port">Port of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.port" />.</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="relaySlotId">Id of the remote peer in relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId" />.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID" />.</param>
      <param name="node">Slot id reserved for the user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch" /> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId" />.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectWithSimulator(System.Int32,System.String,System.Int32,System.Int32,System.Byte@,UnityEngine.Networking.ConnectionSimulatorConfig)">
      <summary>
        <para>Connect with simulated latency.</para>
        <para>Establishes a connection between peers and configures it to simulate Internet latency (only works with the Editor and development builds).</para>
      </summary>
      <param name="hostId">Host id associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <param name="address">IPv4 address of the other peer.</param>
      <param name="port">Port of the other peer.</param>
      <param name="exeptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="conf">A <see cref="UnityEngine.Networking.ConnectionSimulatorConfig" /> defined for this connection.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Disconnect(System.Int32,System.Int32,System.Byte@)">
      <summary>Send a disconnect signal to the connected peer and close the connection. Poll <see cref="UnityEngine.Networking.NetworkTransport.Receive" />() to be notified that the connection is closed. This signal is only sent once (best effort delivery). If this packet is dropped for some reason, the peer closes the connection by timeout.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">The connection id of the connection you want to close.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.DisconnectNetworkHost(System.Int32,System.Byte@)">
      <summary>This will disconnect the host and disband the group. DisconnectNetworkHost can only be called by the group owner on the relay server.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.FinishSendMulticast(System.Int32,System.Byte@)">
      <summary>Finalizes sending of a message to a group of connections. Only one multicast message at a time is allowed per host.</summary>
      <param name="hostId">Host id associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost" />).</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetAssetId(UnityEngine.GameObject)">
      <summary>The Unity Multiplayer spawning system uses assetIds to identify what remote objects to spawn. This function allows you to get the assetId for the prefab associated with an object.</summary>
      <param name="go">Target GameObject to get assetId for.</param>
      <returns>The assetId of the game object's prefab.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo(System.Int32,System.String@,System.Int32@,System.Byte@)">
      <summary>After <see cref="UnityEngine.Networking.NetworkTransport.Receive" />() returns <see cref="UnityEngine.Networking.NetworkEventType.BroadcastEvent" />, this function will return the connection information of the broadcast sender. This information can then be used for connecting to the broadcast sender.</summary>
      <param name="hostId">Id of the broadcast receiver.</param>
      <param name="address">IPv4 address of broadcast sender.</param>
      <param name="port">Port of broadcast sender.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>After <see cref="UnityEngine.Networking.NetworkTransport.Receive" />() returns <see cref="UnityEngine.Networking.NetworkEventType.BroadcastEvent" />, this function returns a complimentary message from the broadcast sender.</summary>
      <param name="hostId">Id of broadcast receiver.</param>
      <param name="buffer">Message buffer provided by caller.</param>
      <param name="bufferSize">Buffer size.</param>
      <param name="receivedSize">Received size (if received size &gt; bufferSize, corresponding error will be set).</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetConnectionInfo(System.Int32,System.Int32,System.String@,System.Int32@,UnityEngine.Networking.Types.NetworkID@,UnityEngine.Networking.Types.NodeID@,System.Byte@)">
      <summary>Returns the connection parameters for the specified connectionId. These parameters can be sent to other users to establish a direct connection to this peer. If this peer is connected to the host via Relay, the Relay-related parameters are set.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="address">IP address.</param>
      <param name="port">Port.</param>
      <param name="network">Relay network guid.</param>
      <param name="dstNode">Destination slot id.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentIncomingMessageAmount">
      <summary>Returns the number of unread messages in the read-queue.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentOutgoingMessageAmount">
      <summary>Returns the total number of messages still in the write-queue.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentRtt(System.Int32,System.Int32,System.Byte@)">
      <summary>Return the round trip time for the given connectionId.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetIOTimeuS">
      <summary>Function returns time spent on network I/O operations in microseconds.</summary>
      <returns>Time in micro seconds.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetworkLostPacketNum(System.Int32,System.Int32,System.Byte@)">
      <summary>Return the total number of packets that has been lost.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetworkTimestamp">
      <summary>Get a network timestamp. Can be used in your messages to investigate network delays together with Networking.GetRemoteDelayTimeMS.</summary>
      <returns>Timestamp.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetPacketReceivedRate(System.Int32,System.Int32,System.Byte@)">
      <summary>Return the current receive rate in bytes per second.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetPacketSentRate(System.Int32,System.Int32,System.Byte@)">
      <summary>Return the current send rate in bytes per second.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetRemoteDelayTimeMS(System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Returns the delay for the timestamp received.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <param name="remoteTime">Timestamp delivered from peer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Init">
      <summary>Initializes the NetworkTransport. Should be called before any other operations on the NetworkTransport are done.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.IsBroadcastDiscoveryRunning">
      <summary>Check if the broadcast discovery sender is running.</summary>
      <returns>True if it is running. False if it is not running.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Receive(System.Int32@,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Called to poll the underlying system for events.</summary>
      <param name="hostId">Host id associated with the event.</param>
      <param name="connectionId">The connectionId that received the event.</param>
      <param name="channelId">The channelId associated with the event.</param>
      <param name="buffer">The buffer that will hold the data received.</param>
      <param name="bufferSize">Size of the buffer supplied.</param>
      <param name="receivedSize">The actual receive size of the data.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveFromHost(System.Int32,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Receive" /> but will only poll for the provided hostId.</summary>
      <param name="hostId">The hostId to check for events.</param>
      <param name="connectionId">The connectionId that received the event.</param>
      <param name="channelId">The channelId associated with the event.</param>
      <param name="buffer">The buffer that will hold the data received.</param>
      <param name="bufferSize">Size of the buffer supplied.</param>
      <param name="receivedSize">The actual receive size of the data.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost(System.Int32,System.Byte@)">
      <summary>Polls the host for the following events: <see cref="UnityEngine.Networking.NetworkEventType.ConnectEvent" /> and <see cref="UnityEngine.Networking.NetworkEventType.DisconnectEvent" />. Can only be called by the relay group owner.</summary>
      <param name="hostId">The hostId to check for events.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.RemoveHost(System.Int32)">
      <summary>Closes the opened socket, and closes all connections belonging to that socket.</summary>
      <param name="hostId">Host id to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Send(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Send data to peer.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <param name="channelId">The channelId to send on.</param>
      <param name="buffer">Buffer containing the data to send.</param>
      <param name="size">Size of the buffer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SendMulticast(System.Int32,System.Int32,System.Byte@)">
      <summary>Add a connection for the multicast send.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="connectionId">Id of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SetBroadcastCredentials(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Sets the credentials required for receiving broadcast messages. Should any credentials of a received broadcast message not match, the broadcast discovery message is dropped.</summary>
      <param name="hostId">Host id associated with this broadcast.</param>
      <param name="key">Key part of the credentials associated with this broadcast.</param>
      <param name="version">Version part of the credentials associated with this broadcast.</param>
      <param name="subversion">Subversion part of the credentials associated with this broadcast.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SetPacketStat(System.Int32,System.Int32,System.Int32)">
      <summary>Used to inform the profiler of network packet statistics.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Shutdown">
      <summary>Shut down the NetworkTransport.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartBroadcastDiscovery(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>Starts sending a broadcasting message in all local subnets.</summary>
      <param name="hostId">Host id which should be reported via broadcast (broadcast receivers will connect to this host).</param>
      <param name="broadcastPort">Port used for the broadcast message.</param>
      <param name="key">Key part of the credentials associated with this broadcast.</param>
      <param name="version">Version part of the credentials associated with this broadcast.</param>
      <param name="subversion">Subversion part of the credentials associated with this broadcast.</param>
      <param name="buffer">Complimentary message. This message will delivered to the receiver with the broadcast event.</param>
      <param name="size">Size of message.</param>
      <param name="timeout">Specifies how often the broadcast message should be sent in milliseconds.</param>
      <returns>Return true if broadcasting request has been submitted.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartSendMulticast(System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Start to multicast send.</summary>
      <param name="hostId">Host id associated with this connection.</param>
      <param name="channelId">The channelId.</param>
      <param name="buffer">Buffer containing the data to send.</param>
      <param name="size">Size of the buffer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError" />
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StopBroadcastDiscovery">
      <summary>Stop sending the broadcast discovery message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkWriter.Position">
      <summary>The current position of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor">
      <summary>Creates a new NetworkWriter object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor(System.Byte[])">
      <summary>Creates a new NetworkWriter object.</summary>
      <param name="buffer">A buffer to write into. This is not copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.AsArray">
      <summary>Returns the internal array of bytes the writer is using. This is NOT a copy.</summary>
      <returns>Internal buffer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.FinishMessage">
      <summary>This fills out the size header of a message begun with StartMessage(), so that it can be send using Send() functions.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.SeekZero">
      <summary>Seeks to the start of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.StartMessage(System.Int16)">
      <summary>This begins a new message, which should be completed with FinishMessage() once the payload has been written.</summary>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.ToArray">
      <summary>Returns a copy of internal array of bytes the writer is using, it copies only the bytes used.</summary>
      <returns>Copy of data used by the writer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Char)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.SByte)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int16)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt16)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int64)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt64)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Single)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Double)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Decimal)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.String)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Boolean)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte[],System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="buffer">The byte buffer to write.</param>
      <param name="count">The number of bytes in the byte buffer to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="buffer">The byte buffer to write.</param>
      <param name="offset">The byte buffer array element to start writing from.</param>
      <param name="count">The number of bytes in the byte buffer to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector2)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector3)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector4)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Color)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Color32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.GameObject)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Quaternion)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Rect)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Plane)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Ray)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Matrix4x4)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.MessageBase)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="msg">The network message to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkHash128)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkIdentity)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkInstanceId)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkSceneId)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Transform)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesAndSize(System.Byte[],System.Int32)">
      <summary>This writes a 16-bit count and a array of bytes of that length to the stream.</summary>
      <param name="buffer">Array of bytes to write.</param>
      <param name="count">Number of bytes from the array to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesFull(System.Byte[])">
      <summary>
        <para>This writes a 16-bit count and an array of bytes of that size to the stream.</para>
        <para>Note that this will be the full allocated size of the array. So if the array is partially filled with data to send - then you should be using WriteBytesAndSize instead.</para>
      </summary>
      <param name="buffer">Bytes to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt32(System.UInt32)">
      <summary>This writes the 32-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt64(System.UInt64)">
      <summary>This writes the 64-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.MaxPlayersPerClient">
      <summary>The maximum number of local players that a client connection can have.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.gameObject">
      <summary>The game object for this player.</summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerController.IsValid">
      <summary>Checks if this PlayerController has an actual player attached to it.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.playerControllerId">
      <summary>
        <para>The local player ID number of this player.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.unetView">
      <summary>The NetworkIdentity component of the player.</summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerController.ToString">
      <summary>String representation of the player objects state.</summary>
      <returns>String with the object state.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Add``1(``0)">
      <summary>Same as List:Add() but the item is added on clients.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Clear">
      <summary>Same as List:Clear() but the list is cleared on clients.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Contains``1(``0)">
      <summary>Determines whether the list contains item <c>item</c>.</summary>
      <param name="item">Item to search for.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.CopyTo``1(``0[],System.Int32)">
      <summary>Copies the elements of the SyncList&lt;T&gt; to an Array, starting at a particular Array index.</summary>
      <param name="array">Array to copy elements to.</param>
      <param name="index">The zero-based index in <c>array</c> at which copying begins.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Dirty(System.Int32)">
      <summary>Marks an item in the list as dirty, so it will be updated on clients.</summary>
      <param name="index">Index of item to dirty.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the SyncList&lt;T&gt;.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.SyncList&lt;T0&gt;.HandleMsg``1(System.Byte,System.Int32,``0)">
      <summary>Internal function used for remote list operations.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.IndexOf``1(``0)">
      <summary>Determines the index of a specific item in the SyncList&lt;T&gt;.</summary>
      <param name="item">The item to return the index for.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.InitializeBehaviour(UnityEngine.Networking.NetworkBehaviour,System.Int32)">
      <summary>Internal function.</summary>
      <param name="beh">The behaviour the list belongs to.</param>
      <param name="cmdHash">Identifies this list.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Insert``1(System.Int32,``0)">
      <summary>Same as List::Insert() but also inserts into list on clients.</summary>
      <param name="index">Where to insert the item.</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Remove``1(``0)">
      <summary>Same as List:Remove except removes on clients also.</summary>
      <param name="item">Item to remove.</param>
      <returns>Success if removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.RemoveAt(System.Int32)">
      <summary>Same as List:Remove except it removes the index on clients also.</summary>
      <param name="index">Index to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.DeserializeItem``1(UnityEngine.Networking.NetworkReader)">
      <summary>This method is used when deserializing SyncList items from a stream.</summary>
      <param name="reader">Stream to read from.</param>
      <returns>New instance of the SyncList value type.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.SerializeItem``1(UnityEngine.Networking.NetworkWriter,``0)">
      <summary>This is used to write a value object from a SyncList to a stream.</summary>
      <param name="writer">Stream to write to.</param>
      <param name="item">Item to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncListBool.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListBool)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListFloat.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListFloat)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListInt)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListString.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListString)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListUInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListUInt)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbCREATE">
      <summary>The string "CREATE", commonly used as the verb for an HTTP CREATE request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbDELETE">
      <summary>The string "DELETE", commonly used as the verb for an HTTP DELETE request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbGET">
      <summary>The string "GET", commonly used as the verb for an HTTP GET request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbHEAD">
      <summary>The string "HEAD", commonly used as the verb for an HTTP HEAD request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbPOST">
      <summary>The string "POST", commonly used as the verb for an HTTP POST request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbPUT">
      <summary>The string "PUT", commonly used as the verb for an HTTP PUT request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.chunkedTransfer">
      <summary>
        <para>Indicates whether the UnityWebRequest system should employ the HTTP/1.1 chunked-transfer encoding method.</para>
        <para>This property indicates whether the <see cref="UnityEngine.Networking.UnityWebRequest" /> should employ the HTTP/1.1 chunked-transfer encoding method, which allows the system to send partial data and be prompted by the server for more data with a 100/Continue HTTP response. This property cannot be changed after calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />. In general, this property should usually be set to <c>true</c>, as it can conserve bandwidth when sending large amounts of data to the server. This setting has no impact on requests with do not transmit data to the server, such as <c>GET</c> requests. <c>Note:</c> On WebGL build targets, this setting is ignored. Instead, the web browser handles protocol negotiations. <c>Default value:</c><c>true</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.disposeDownloadHandlerOnDispose">
      <summary>
        <para>If true, any <see cref="UnityEngine.Networking.DownloadHandler" /> attached to this <see cref="UnityEngine.Networking.UnityWebRequest" /> will have <see cref="UnityEngine.Networking.DownloadHandler.Dispose" /> called automatically when <see cref="UnityEngine.Networking.UnityWebRequest.Dispose" /> is called.</para>
        <para>Default: true. If no <see cref="UnityEngine.Networking.DownloadHandler" /> is attached to this <see cref="UnityEngine.Networking.UnityWebRequest" />, this property has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.disposeUploadHandlerOnDispose">
      <summary>
        <para>If true, any <see cref="UnityEngine.Networking.UploadHandler" /> attached to this <see cref="UnityEngine.Networking.UnityWebRequest" /> will have <see cref="UnityEngine.Networking.UploadHandler.Dispose" /> called automatically when <see cref="UnityEngine.Networking.UnityWebRequest.Dispose" /> is called.</para>
        <para>Default: true. If no <see cref="UnityEngine.Networking.UploadHandler" /> is attached to this <see cref="UnityEngine.Networking.UnityWebRequest" />, this property has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadedBytes">
      <summary>
        <para>Returns the number of bytes of body data the system has downloaded from the remote server. (Read Only)</para>
        <para>If the UnityWebRequest has no download handler, this method will always return zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadHandler">
      <summary>
        <para>Holds a reference to a <see cref="UnityEngine.Networking.DownloadHandler" /> object, which manages body data received from the remote server by this <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
        <para>Setting this property to <c>null</c> indicates that this <see cref="UnityEngine.Networking.UnityWebRequest" /> does not care about the response’s body data; all received body data will be ignored and discarded. This property cannot be changed after calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />. <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadProgress">
      <summary>
        <para>Returns a floating-point value between 0.0 and 1.0, indicating the progress of downloading body data from the server. (Read Only)</para>
        <para>
          <c>Note:</c> This property only works if the server’s response contains a Content-Length header and the <see cref="UnityEngine.Networking.UnityWebRequest" /> has a <see cref="UnityEngine.Networking.DownloadHandler" /> attached to the <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler" /> property. If the <see cref="UnityEngine.Networking.UnityWebRequest" /> is complete (either a success or a system error), this property will always return 1. If the <see cref="UnityEngine.Networking.UnityWebRequest" /> is still communicating with the remote server, and <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler" /> is <c>null</c>, this property will return 0.5. If <see cref="UnityEngine.Networking.UnityWebRequest.Send" /> has not yet been called, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.error">
      <summary>
        <para>A human-readable string describing any system errors encountered by this <see cref="UnityEngine.Networking.UnityWebRequest" /> object while handling HTTP requests or responses. (Read Only)</para>
        <para>If the <see cref="UnityEngine.Networking.UnityWebRequest" /> has not encountered a system error, this property will return <c>null</c>. Examples of system errors include socket errors, errors resolving DNS entries, or the redirect limit being exceeded. <c>Note:</c> Error-type return codes from the server, such as 404/File Not Found or 500/Internal Server Error are not considered system errors. <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isDone">
      <summary>
        <para>Returns <c>true</c> after the <see cref="UnityEngine.Networking.UnityWebRequest" /> has finished communicating with the remote server. (Read Only)</para>
        <para>This property will return <c>true</c> both when the <see cref="UnityEngine.Networking.UnityWebRequest" /> finishes successfully, or when it encounters a system error. All post-download processing by the <see cref="UnityEngine.Networking.DownloadHandler" /> (if any) will be completed before this property returns <c>true</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isError">
      <summary>
        <para>Returns <c>true</c> after this <see cref="UnityEngine.Networking.UnityWebRequest" /> encounters a system error. (Read Only)</para>
        <para>Examples of system errors include failure to resolve a DNS entry, a socket error or a redirect limit being exceeded. When this property returns <c>true</c>, the <see cref="UnityEngine.Networking.UnityWebRequest.error" /> property will contain a human-readable string describing the error. <c>Note:</c> Error-type server return codes, such as 404/Not Found and 500/Internal Server Error are not considered system errors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isModifiable">
      <summary>
        <para>Returns <c>true</c> while a <see cref="UnityEngine.Networking.UnityWebRequest" />’s configuration properties can be altered. (Read Only)</para>
        <para>Examples of configuration properties include <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler" />, <see cref="UnityEngine.Networking.UnityWebRequest.method" /> and <see cref="UnityEngine.Networking.UnityWebRequest.url" />. This property will return <c>false</c> after a call to <see cref="UnityEngine.Networking.UnityWebRequest.Send" />.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.method">
      <summary>
        <para>Defines the HTTP verb used by this <see cref="UnityEngine.Networking.UnityWebRequest" />, such as <c>GET</c> or <c>POST</c>.</para>
        <para>This property may be set to any non-zero-length alphabetic string, and will be used verbatim. Therefore, this property can be employed to set the UnityWebRequest to transmit any custom HTTP verb required by an application. This property cannot be changed after calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />. <c>Note:</c> This method will always return strings in UPPERCASE. When setting the verb, the input value will automatically be converted to UPPERCASE. <c>Default value:</c><c>GET</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.redirectLimit">
      <summary>
        <para>Indicates the number of redirects which this <see cref="UnityEngine.Networking.UnityWebRequest" /> will follow before halting with a “Redirect Limit Exceeded” system error.</para>
        <para>If you wish to disable redirects altogether, set this property to zero - this UnityWebRequest will then refuse to follow redirects. If a redirect is encountered while redirects are disabled, the request will halt with a “Redirect Limit Exceeded” system error. If you do not wish to limit the number of redirects, you may set this property to any negative number. This is not recommended. If the redirect limit is disabled and the UnityWebRequest encounters a redirect loop, the UnityWebRequest will consume processor time until <see cref="UnityEngine.Networking.UnityWebRequest.Abort" /> is called. <c>Default value:</c><c>32</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.responseCode">
      <summary>
        <para>The numeric HTTP response code returned by the server, such as <c>200</c>, <c>404</c> or <c>500</c>. (Read Only)</para>
        <para>If the UnityWebRequest has received multiple responses (due to redirects), then this property will return the response code of the newest (or final) HTTP response. If the UnityWebRequest has not yet processed a response, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadedBytes">
      <summary>
        <para>Returns the number of bytes of body data the system has uploaded to the remote server. (Read Only)</para>
        <para>If this UnityWebRequest has no upload handler, this property will always return zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadHandler">
      <summary>
        <para>Holds a reference to the <see cref="UnityEngine.Networking.UploadHandler" /> object which manages body data to be uploaded to the remote server.</para>
        <para>Setting this property to <c>null</c> indicates that this <see cref="UnityEngine.Networking.UnityWebRequest" /> has no body data to upload. This property cannot be set after calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadProgress">
      <summary>
        <para>Returns a floating-point value between 0.0 and 1.0, indicating the progress of uploading body data to the server.</para>
        <para>If the <see cref="UnityEngine.Networking.UnityWebRequest" /> is complete (either a success or a system error), this property will always return 1. If the <see cref="UnityEngine.Networking.UnityWebRequest" /> is still communicating with the remote server, and <see cref="UnityEngine.Networking.UnityWebRequest.uploadHandler" /> is <c>null</c>, this property will return zero. If <see cref="UnityEngine.Networking.UnityWebRequest.Send" /> has not yet been called, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.url">
      <summary>
        <para>Defines the target URL for the <see cref="UnityEngine.Networking.UnityWebRequest" /> to communicate with.</para>
        <para>This property cannot be set after calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />. If the <see cref="UnityEngine.Networking.UnityWebRequest" /> encounters and follows redirects, this property will be updated with the URL to which the <see cref="UnityEngine.Networking.UnityWebRequest" /> was redirected. When inputting URLs, absolute URLs are preferred. However, if you input a partial URL, the system will follow these rules: If the input URL starts with two slashes (//), then the input is assumed to be a domain and path intended for use over HTTP. On non-WebGL platforms, the system will prepend <c>http:</c>. On WebGL, the system will inherit the scheme of the path by which the Unity WebGL application is being accessed. Examples: If the WebGL app is being accessed via https, the system will prepend <c>https:</c>. If the WebGL app is being accessed via http, the system will prepend <c>http:</c>. If the input URL starts with a single slash (/), then the system assumes the inout is a path relative to the current domain on which the Unity application is running. On non-WebGL platforms, the system will prepend <c>http://localhost</c> to the URL. On WebGL, the system will prepend the scheme and host of the path by which the Unity WebGL application is being accessed. For example, if the Unity WebGL app is being accessed via <c>http://unity3d.com/myapp</c>, then the system will prepend <c>http://unity3d.com</c> to relative paths. If neither of the above rules apply, the system validates your input string via the built-in <c>System.Uri</c> class. If this class throws a <c>URIFormatException</c>, the system attempts to append the input string to the absolute URL by which the Unity app is being accessed. (see above) Any further exceptions will be re-thrown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.useHttpContinue">
      <summary>
        <para>Determines whether this UnityWebRequest will include <c>Expect: 100-Continue</c> in its outgoing request headers. (Default: <c>true</c>).</para>
        <para>If this property is set to <c>true</c>, then this UnityWebRequest will include an <c>Expect: 100-Continue</c> header in the initial outbound request. If set to <c>false</c>, an empty <c>Expect</c> header will be sent, which will suppress usage of the <c>100 Continue</c> response code. As detailed in <see href="rfc2616-sec8" cref="RFC 2616, Section 8" />, the <c>100 Continue</c> response code is intended to allow a remote server to decide whether or not it will accept a request based on a request's headers, prior to the client transmitting the full request body. This is useful in cases where the client need not transmit its full request to every server in a request/response chain, such as in a load-balanced application. For example, a client would present its request, with a <c>Expect: 100-Continue</c> header, to a load-balancing server. The load-balancing server would then respond with a redirect to a processing server. Next, the client would connect to the processing server and transmit the same request, again with a <c>Expect: 100-Continue</c> server. The processing server would then respond with a <c>100 Continue</c> HTTP status code, and the client would finally respond with the full body of its request. By using the <c>100 Continue</c> status code, the client only had to transmit the full body of its request to one server. If not using the <c>100 Continue</c> status code, the client must transmit the full body of its request to every server it communicates with, needlessly consuming bandwidth and processing time on both the client and any servers issuing redirects. In general, one should leave <c>100 Continue</c> enabled. Exceptions include requests which have a very small or no request body, or applications where the client knows the server will not issue a redirect. This property defaults to <c>true</c>. Note: On WebGL build targets, header negotiation is performed by the host browser. Therefore, this setting's value has no effect on WebGL builds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.#ctor">
      <summary>
        <para>Creates a UnityWebRequest with the default options and no attached <see cref="UnityEngine.Networking.DownloadHandler" /> or <see cref="UnityEngine.Networking.UploadHandler" />. Default method is <c>GET</c>.</para>
        <para>The raw constructor is useful for use cases which require detailed custom configuration of a <see cref="UnityEngine.Networking.UnityWebRequest" />. Most use cases will require the attachment of a <see cref="UnityEngine.Networking.DownloadHandler" />, an <see cref="UnityEngine.Networking.UploadHandler" /> or both in order to function propertly.</para>
      </summary>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetRequestHeader(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetTexture(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetAudioClip(System.String,UnityEngine.AudioType)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Head(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.Byte[])" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Delete(System.String)" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.#ctor(System.String)">
      <summary>
        <para>Creates a UnityWebRequest with the default options and no attached <see cref="UnityEngine.Networking.DownloadHandler" /> or <see cref="UnityEngine.Networking.UploadHandler" />. Default method is <c>GET</c>.</para>
        <para>The raw constructor is useful for use cases which require detailed custom configuration of a <see cref="UnityEngine.Networking.UnityWebRequest" />. Most use cases will require the attachment of a <see cref="UnityEngine.Networking.DownloadHandler" />, an <see cref="UnityEngine.Networking.UploadHandler" /> or both in order to function propertly.</para>
      </summary>
      <param name="url">The target URL with which this UnityWebRequest will communicate. Also accessible via the <see cref="UnityEngine.Networking.UnityWebRequest.url" /> property.</param>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetRequestHeader(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetTexture(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetAudioClip(System.String,UnityEngine.AudioType)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Head(System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,System.String)" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.Byte[])" />
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.Delete(System.String)" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Abort">
      <summary>
        <para>If in progress, halts the UnityWebRequest as soon as possible.</para>
        <para>This method may be called at any time. If the UnityWebRequest has not already completed, the UnityWebRequest will halt uploading or downloading data as soon as possible. Aborted UnityWebRequests are considered to have encountered a system error. The <see cref="UnityEngine.Networking.UnityWebRequest.isError" /> property will return <c>true</c> and the <see cref="UnityEngine.Networking.UnityWebRequest.error" /> property will be <c>"User Aborted"</c>. If this method is called prior to calling <see cref="UnityEngine.Networking.UnityWebRequest.Send" />, then the UnityWebRequest will abort immediately after the call to <see cref="UnityEngine.Networking.UnityWebRequest.Send" />. Calls to this method have no effect after this UnityWebRequest has encountered a different error, or has successfully finished communicating with the remote server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Dispose">
      <summary>
        <para>Signals that this [UnityWebRequest] is no longer being used, and should clean up any resources it is using.</para>
        <para>You must call Dispose once you have finished using a [UnityWebRequest] object, regardless of whether the request succeeded or failed. For safety, it is usually a best practice to employ the <see href="yh598w02" cref="using statement" /> to ensure that a [UnityWebRequest] is properly cleaned up in case of uncaught exceptions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetRequestHeader(System.String)">
      <summary>
        <para>Retrieves the value of a custom request header.</para>
        <para>This method retrieves the value of custom (i.e. user-set) request headers. These are the headers which will be transmitted <c>to</c> the remote server as part of the HTTP request.</para>
      </summary>
      <param name="name">Name of the custom request header. Case-insensitive.</param>
      <returns>The value of the custom request header. If no custom header with a matching name has been set, returns an empty string.</returns>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.SetRequestHeader(System.String,System.String)" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetResponseHeader(System.String)">
      <summary>
        <para>Retrieves the value of a response header from the latest HTTP response received.</para>
        <para>In the case that this UnityWebRequest has received multiple responses (such as during redirects), only headers from the newest (or final) response are checked.</para>
      </summary>
      <param name="name">The name of the HTTP header to retrieve. Case-insensitive.</param>
      <returns>The value of the HTTP header from the latest HTTP response. If no header with a matching name has been received, or no responses have been received, returns <c>null</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetResponseHeaders">
      <summary>
        <para>Retrieves a dictionary containing all the response headers received by this UnityWebRequest in the latest HTTP response.</para>
        <para>In the case that the UnityWebRequest has received multiple responses (such as during redirects), only headers from the latest/final response will be included. <c>Note:</c> This method allocates a new Dictionary object each time it is called. You may wish to cache the return value from this call if you are retrieving it multiple times.</para>
      </summary>
      <returns>A dictionary containing all the response headers received in the latest HTTP response. If no responses have been received, returns <c>null</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Send">
      <summary>
        <para>Begin communicating with the remote server.</para>
        <para>After calling this method, the UnityWebRequest will perform DNS resolution (if necessary), transmit an HTTP request to the remote server at the target URL and process the server’s response. This method can only be called once on any given UnityWebRequest object. Once this method is called, you cannot change any of the UnityWebRequest’s properties. This method returns an <see cref="UnityEngine.AsyncOperation" /> object. Yielding the AsyncOperation inside a coroutine will cause the coroutine to pause until the UnityWebRequest encounters a system error or finishes communicating.</para>
      </summary>
      <returns>An <see cref="UnityEngine.AsyncOperation" /> indicating the progress/completion state of the UnityWebRequest. Yield this object to wait until the UnityWebRequest is done.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.SetRequestHeader(System.String,System.String)">
      <summary>
        <para>Set a HTTP request header to a custom value.</para>
        <para>Header keys and values must be valid according to RFC 2616. Neither string may contain certain illegal characters, such as control characters. Both strings must be non-null and contain a minimum of 1 character. This method cannot be called after <see cref="UnityEngine.Networking.UnityWebRequest.Send" /> has been called. These headers cannot be set with custom values on any platform: <c>accept-charset</c>, <c>access-control-request-headers</c>, <c>access-control-request-method</c>, <c>connection</c>, <c>date</c>, <c>dnt</c>, <c>expect</c>, <c>host</c>, <c>keep-alive</c>, <c>origin</c>, <c>referer</c>, <c>te</c>, <c>trailer</c>, <c>transfer-encoding</c>, <c>upgrade</c>, <c>via</c>. It is possible to set a custom value for the <c>accept-encoding</c> header but the resulting behavior is unreliable so it is strongly recommended to let it be automatically handled unless you can accept the risk of unexpected results. The <c>content-length</c> header will be automatically populated based on the contents of the attached <see cref="UnityEngine.Networking.DownloadHandler" />, if any, and cannot be set to a custom value. The <c>user-agent</c> and <c>x-unity-version</c> headers are automatically set by Unity and may not be set to custom values. In addition to the above, the following headers are filled by the web browser on the WebGL platform, and therefore may not have custom values set: <c>cookie</c>, <c>cookie2</c>.</para>
      </summary>
      <param name="name">The key of the header to be set. Case-sensitive.</param>
      <param name="value">The header's intended value.</param>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Delete(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured for HTTP <c>DELETE</c>.</para>
        <para>This method creates a UnityWebRequest, sets the verb to <c>DELETE</c> and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches no <see cref="UnityEngine.Networking.DownloadHandler" /> or <see cref="UnityEngine.Networking.UploadHandler" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
      </summary>
      <param name="uri">The URI to which a <c>DELETE</c> request should be sent.</param>
      <returns>A UnityWebRequest configured to send an HTTP <c>DELETE</c> request.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GenerateBoundary">
      <summary>Generate a random 40-byte array for use as a multipart form boundary.</summary>
      <returns>40 random bytes, guaranteed to contain only printable ASCII values.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Get(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured for HTTP GET.</para>
        <para>This method creates a UnityWebRequest and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This handler will buffer the data received from the server and make it available to script when this request is complete. This method attaches no <see cref="UnityEngine.Networking.UploadHandler" /> to the UnityWebRequest.</para>
      </summary>
      <param name="uri">The URI of the resource to retrieve via HTTP GET.</param>
      <returns>A UnityWebRequest object configured to retrieve data from <c>uri</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This <see cref="UnityEngine.Networking.DownloadHandler" /> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle" /> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest" /> will complete once the Asset Bundle has finished loading from the cache.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This <see cref="UnityEngine.Networking.DownloadHandler" /> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle" /> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest" /> will complete once the Asset Bundle has finished loading from the cache.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="version">An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle. Analogous to the <c>version</c> parameter for <see cref="UnityEngine.WWW.LoadFromCacheOrDownload" />.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,UnityEngine.Hash128,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This <see cref="UnityEngine.Networking.DownloadHandler" /> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle" /> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle" /> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest" /> will complete once the Asset Bundle has finished loading from the cache.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="hash">A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAudioClip(System.String,UnityEngine.AudioType)">
      <summary>
        <para>Create a <see cref="UnityEngine.Networking.UnityWebRequest" /> intended to download an audio clip via HTTP GET and create an <see cref="UnityEngine.AudioClip" /> based on the retrieved data.</para>
        <para>This method creates a <see cref="UnityEngine.Networking.UnityWebRequest" /> and sets the target URL to the string <c>uri</c> argument. This method sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAudioClip" /> object to the <see cref="UnityEngine.Networking.UnityWebRequest" />. <see cref="UnityEngine.Networking.DownloadHandlerAudioClip" /> is a specialized <see cref="UnityEngine.Networking.DownloadHandler" /> which is optimized for storing data which is to be used as an audio clip in the Unity Engine. Using this class significantly reduces memory reallocation compared to downloading raw bytes and creating an audio clip manually in script. This method attaches no <see cref="UnityEngine.Networking.UploadHandler" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
      </summary>
      <param name="uri">The URI of the audio clip to download.</param>
      <param name="audioType">The type of audio encoding for the downloaded audio clip. See <see cref="UnityEngine.AudioType" />.</param>
      <returns>A <see cref="UnityEngine.Networking.UnityWebRequest" /> properly configured to download an audio clip and convert it to an <see cref="UnityEngine.AudioClip" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetTexture(System.String)">
      <summary>
        <para>Create a <see cref="UnityEngine.Networking.UnityWebRequest" /> intended to download an image via HTTP GET and create a <see cref="UnityEngine.Texture" /> based on the retrieved data.</para>
        <para>This method creates a <see cref="UnityEngine.Networking.UnityWebRequest" /> and sets the target URL to the string <c>uri</c> argument. This method sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> object to the <see cref="UnityEngine.Networking.UnityWebRequest" />. <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> is a specialized <see cref="UnityEngine.Networking.DownloadHandler" /> which is optimized for storing images which are to be used as textures in the Unity Engine. Using this class significantly reduces memory reallocation compared to downloading raw bytes and creating a texture manually in script. In addition, texture conversion will be performed on a worker thread. This method attaches no <see cref="UnityEngine.Networking.UploadHandler" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
      </summary>
      <param name="uri">The URI of the image to download.</param>
      <returns>A <see cref="UnityEngine.Networking.UnityWebRequest" /> properly configured to download an image and convert it to a <see cref="UnityEngine.Texture" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetTexture(System.String,System.Boolean)">
      <summary>
        <para>Create a <see cref="UnityEngine.Networking.UnityWebRequest" /> intended to download an image via HTTP GET and create a <see cref="UnityEngine.Texture" /> based on the retrieved data.</para>
        <para>This method creates a <see cref="UnityEngine.Networking.UnityWebRequest" /> and sets the target URL to the string <c>uri</c> argument. This method sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> object to the <see cref="UnityEngine.Networking.UnityWebRequest" />. <see cref="UnityEngine.Networking.DownloadHandlerTexture" /> is a specialized <see cref="UnityEngine.Networking.DownloadHandler" /> which is optimized for storing images which are to be used as textures in the Unity Engine. Using this class significantly reduces memory reallocation compared to downloading raw bytes and creating a texture manually in script. In addition, texture conversion will be performed on a worker thread. This method attaches no <see cref="UnityEngine.Networking.UploadHandler" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
      </summary>
      <param name="uri">The URI of the image to download.</param>
      <param name="nonReadable">If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: <c>false</c>.</param>
      <returns>A <see cref="UnityEngine.Networking.UnityWebRequest" /> properly configured to download an image and convert it to a <see cref="UnityEngine.Texture" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Head(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured to send a HTTP <c>HEAD</c> request.</para>
        <para>This method creates a UnityWebRequest, sets the verb to <c>HEAD</c> and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches no <see cref="UnityEngine.Networking.DownloadHandler" /> or <see cref="UnityEngine.Networking.UploadHandler" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />.</para>
      </summary>
      <param name="uri">The URI to which to send a HTTP <c>HEAD</c> request.</param>
      <returns>A UnityWebRequest configured to transmit a HTTP <c>HEAD</c> request.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be set to <c>application/x-www-form-urlencoded</c> by default. Note: Many server backend languages do not properly handle <c>POST</c> requests with <c>Content-Type</c> headers set to encoding others than <c>application/x-www-form-urlencoded</c> or <c>multipart/form-data</c>. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler" /> to check replies from the server, particularly in the case of REST APIs. The data in <c>postData</c> will be escaped via WWWTranscoder.URLEncode, then interpreted into a byte stream via <c>System.Text.Encoding.UTF8</c>. The resulting byte stream will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> and the Upload Handler will be attached to this UnityWebRequest.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <param name="postData">Form body data. Will be URLEncoded via WWWTranscoder.URLEncode prior to transmission.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,UnityEngine.WWWForm)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be copied from the <c>formData</c> parameter. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler" /> to check replies from the server, particularly in the case of REST APIs. The <c>formData</c> object will generate an appropriately-formatted byte stream, depending on its contents. The resulting byte stream will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> and the Upload Handler will be attached to this UnityWebRequest.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <param name="formData">Form fields or files encapsulated in a <see cref="UnityEngine.WWWForm" /> object, for formatting and transmission to the remote server.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be set to <c>multipart/form-data</c>, with an appropriate boundary specification. If you supply a custom <c>boundary</c> byte array, note that the sequence of bytes must be guaranteed to be unique and must not appear anywhere in the body of your form data. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler" /> to check replies from the server, particularly in the case of REST APIs. The List of <see cref="UnityEngine.Networking.IMultipartFormSection" /> objects in <c>multipartFormSections</c> will be formatted into a valid multipart form body. Each object will be interpreted as a discrete form section. The byte stream resulting from formatting this multipart form body will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> and attached to this UnityWebRequest. Using IMultipartFormSection To provide greater control over how you specify your form data, the UnityWebRequest system contains a (user-implementable) <see cref="UnityEngine.Networking.IMultipartFormSection" /> interface. For standard applications, Unity also provides default implementations for data and file sections. A List of IMultipartFormSection objects can be provided to this method. The list's members will be formatted into a multipart form, as defined by <c>RFC 2388</c>. Multipart forms require a unique boundary string to define the separation between fields. The boundary string must be guaranteed to not be present anywhere within the body of any form field in the request. If you do not supply a boundary, Unity will generate one. The generated boundary is 40 random printable bytes, which effectively never collide with form field data. However, if your application requires you to supply a custom boundary string, you may do so. The supplied boundary, if any, will be automatically converted from a byte array to UTF8 characters.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
      <seealso cref="T:UnityEngine.Networking.MultipartFormDataSection" />
      <seealso cref="T:UnityEngine.Networking.MultipartFormFileSection" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,System.Byte[])">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be set to <c>multipart/form-data</c>, with an appropriate boundary specification. If you supply a custom <c>boundary</c> byte array, note that the sequence of bytes must be guaranteed to be unique and must not appear anywhere in the body of your form data. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler" /> to check replies from the server, particularly in the case of REST APIs. The List of <see cref="UnityEngine.Networking.IMultipartFormSection" /> objects in <c>multipartFormSections</c> will be formatted into a valid multipart form body. Each object will be interpreted as a discrete form section. The byte stream resulting from formatting this multipart form body will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> and attached to this UnityWebRequest. Using IMultipartFormSection To provide greater control over how you specify your form data, the UnityWebRequest system contains a (user-implementable) <see cref="UnityEngine.Networking.IMultipartFormSection" /> interface. For standard applications, Unity also provides default implementations for data and file sections. A List of IMultipartFormSection objects can be provided to this method. The list's members will be formatted into a multipart form, as defined by <c>RFC 2388</c>. Multipart forms require a unique boundary string to define the separation between fields. The boundary string must be guaranteed to not be present anywhere within the body of any form field in the request. If you do not supply a boundary, Unity will generate one. The generated boundary is 40 random printable bytes, which effectively never collide with form field data. However, if your application requires you to supply a custom boundary string, you may do so. The supplied boundary, if any, will be automatically converted from a byte array to UTF8 characters.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <param name="boundary">A unique boundary string, which will be used when separating form fields in a multipart form. If not supplied, a boundary will be generated for you.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
      <seealso cref="T:UnityEngine.Networking.MultipartFormDataSection" />
      <seealso cref="T:UnityEngine.Networking.MultipartFormFileSection" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be set to <c>application/x-www-form-urlencoded</c>. The Dictionary of strings in <c>formFields</c> will be interpreted as a list of form fields whose field IDs are the dictionary keys, and whose field values are the dictionary values. Both keys and values will be escaped via WWWTranscoder.URLEncode, and then joined into a URL-encoded form string. (e.g. <c>key1=value1&amp;key2=value2</c>). This method, by default, attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the <see cref="UnityEngine.Networking.UnityWebRequest" />. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler" /> to check replies from the server, particularly in the case of REST APIs. The URL-encoded form string generated from <c>formFields</c> will be converted into a byte stream and stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw" />, which will be attached to this UnityWebRequest.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.Byte[])">
      <summary>
        <para>Create a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.</para>
        <para>This method creates a UnityWebRequest, sets the target URL to the string <c>uri</c> argument and the <c>method</c> to <c>PUT</c>. It also sets the <c>Content-Type</c> header to <c>application/octet-stream</c>. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the UnityWebRequest. This is for convenience during development, as well as for applications which return status information regarding the uploaded data in the HTTP response body. This method stores the input upload data in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> object and attaches it to the <see cref="UnityEngine.Networking.UnityWebRequest" />. <see cref="UnityEngine.Networking.UploadHandlerRaw" /> copies the input data into a buffer. Therefore, changes to the <c>bodyData</c> array performed after the call to this method will not be reflected in the data sent to the server.</para>
      </summary>
      <param name="uri">The URI to which the data will be sent.</param>
      <param name="bodyData">The data to transmit to the remote server. If a string, the string will be converted to raw bytes via <see href="system.text.encoding" cref="System.Text.Encoding.UTF8" />.</param>
      <returns>A UnityWebRequest configured to transmit <c>bodyData</c> to <c>uri</c> via HTTP PUT.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.</para>
        <para>This method creates a UnityWebRequest, sets the target URL to the string <c>uri</c> argument and the <c>method</c> to <c>PUT</c>. It also sets the <c>Content-Type</c> header to <c>application/octet-stream</c>. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer" /> to the UnityWebRequest. This is for convenience during development, as well as for applications which return status information regarding the uploaded data in the HTTP response body. This method stores the input upload data in an <see cref="UnityEngine.Networking.UploadHandlerRaw" /> object and attaches it to the <see cref="UnityEngine.Networking.UnityWebRequest" />. <see cref="UnityEngine.Networking.UploadHandlerRaw" /> copies the input data into a buffer. Therefore, changes to the <c>bodyData</c> array performed after the call to this method will not be reflected in the data sent to the server.</para>
      </summary>
      <param name="uri">The URI to which the data will be sent.</param>
      <param name="bodyData">The data to transmit to the remote server. If a string, the string will be converted to raw bytes via <see href="system.text.encoding" cref="System.Text.Encoding.UTF8" />.</param>
      <returns>A UnityWebRequest configured to transmit <c>bodyData</c> to <c>uri</c> via HTTP PUT.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.SerializeFormSections(System.Byte[])">
      <summary>Converts a List of IMultipartFormSection objects into a byte array containing raw multipart form data.</summary>
      <param name="boundary">A unique boundary string to separate the form sections.</param>
      <returns>A byte array of raw multipart form data.</returns>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.GenerateBoundary" />
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.SerializeSimpleForm">
      <summary>
        <para>Serialize a dictionary of strings into a byte array containing URL-encoded UTF8 characters.</para>
        <para>This method will URL-encode the strings, then concatenate them as if they were in an HTTP query string. Keys and values will be separated with an equals sign (=) and different key-value pairs will be separated with ampersands (&amp;).</para>
      </summary>
      <returns>A byte array containing the serialized form. The form's keys and values have been URL-encoded.</returns>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.contentType">
      <summary>
        <para>Determines the default <c>Content-Type</c> header which will be transmitted with the outbound HTTP request.</para>
        <para>If the parent <see cref="UnityEngine.Networking.UnityWebRequest" /> does not have a custom <c>Content-Type</c> header set, then the value of this property will be used to determine the value of the <c>Content-Type</c> header for the HTTP request. <c>Note:</c> If the parent <see cref="UnityEngine.Networking.UnityWebRequest" /> has a custom <c>Content-Type</c> header set, then the value of this property is ignored. If this property is <c>null</c> or an empty string, and the parent <see cref="UnityEngine.Networking.UnityWebRequest" /> has no custom <c>Content-Type</c> header, then a default <c>Content-Type</c> will be assigned (usually <c>application/octet-stream</c>). <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.data">
      <summary>The raw data which will be transmitted to the remote server as body data. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.progress">
      <summary>
        <para>Returns the proportion of data uploaded to the remote server compared to the total amount of data to upload. (Read Only)</para>
        <para>Behaves identically to <see cref="UnityEngine.Networking.UnityWebRequest.uploadProgress" />.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UploadHandler.Dispose">
      <summary>
        <para>Signals that this [UploadHandler] is no longer being used, and should clean up any resources it is using.</para>
        <para>This method must be called once you have finished using an [UploadHandler] object. For convenience, [UnityWebRequest] exposes the [UnityWebRequest.disposeUploadHandlerOnDispose] property, which will automatically call this method when [UnityWebRequest.Dispose] is called. If you elect not to use [UnityWebRequest.disposeUploadHandlerOnDispose] (by setting it to false), then you must call Dispose on the [UploadHandler] yourself. This should only be in rare cases, such as when you wish to use the [UploadHandler] to transmit the same data multiple times.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UploadHandlerRaw.#ctor(System.Byte[])">
      <summary>General constructor. Contents of the <c>input</c> argument are copied into a native buffer.</summary>
      <param name="data">Raw data to transmit to the remote server.</param>
    </member>
    <member name="M:UnityEngine.Networking.Utility.GetAccessTokenForNetwork(UnityEngine.Networking.Types.NetworkID)">
      <summary>Utility function to get this client's access token for a particular network, if it has been set.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Utility.GetSourceID">
      <summary>Utility function to get the client's SourceID for unique identification.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Utility.SetAccessTokenForNetwork(UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.NetworkAccessToken)">
      <summary>Utility function that accepts the access token for a network after it's received from the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.contentType">
      <summary>
        <para>string The value to use in the <c>Content-Type</c> header, or <c>null</c>.</para>
        <para>Returns the value to use in the <c>Content-Type</c> header for this form section.</para>
        <para>If this property returns a non-null, non-empty string, then the returned string will be set as the <c>Content-Type</c> of this form section. If this property returns null or an empty string, then the <c>Content-Type</c> header will be omitted from this form section. How the server will handle this data is left up to the individual server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
        <para>If this property returns a non-null string, then this is assumed to be a file section, and the file's name will be defined by the returned string. If you do not wish your section to be a file section, simply return <c>null</c> from this property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Must not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Must not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
        <para>Returns the name of this section; this is equivalent to the name of the form field which this section represents. In HTML terms, it is the name attribute on the input element represented by this form section. If this property returns null, the section is assumed to be unnamed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPendingBuffers">
      <summary>
        <para>The option to set the number of pending buffers for a channel.</para>
        <para>These buffers are allocated dynamically as required when writes to the transport layer fail. Each buffer will be the size of maxPacketSize for the channel - usually around 1400 bytes. The default is 16 buffers. This only applies to reliable channels. If a reliable channel runs out of pnding buffers, data will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.AllowFragmentation">
      <summary>
        <para>The option to allow packet fragmentation for a channel.</para>
        <para>The transport layer has a MTU packet size limit of about 1400 bytes. This option allows larger packets sent on NetworkConnections to be automatically fragmented so that they can be sent with the transport layer. The limit for these packets is 64K. This type of packet fragmentation can lead to additional delays in the delivery of packets and additional memory usage. This is only allowed for reliable, sequenced channels.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPacketSize">
      <summary>
        <para>The option to set the maximum packet size allowed for a channel.</para>
        <para>It is possible to set a maximum packet size for a connection in the transport layer using the ConnectionConfig class, and globally using the GlobalConfig class. This option allows the maximum packet size for an individual channel to be set. This can only be set to less than the connection's maximum packets size, not more. This can only be done before sending any data on the connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Ok">
      <summary>The operation completed successfully.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongHost">
      <summary>The specified host not available.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongConnection">
      <summary>The specified connectionId doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongChannel">
      <summary>The specified channel doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.NoResources">
      <summary>Not enough resources are available to process this request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.BadMessage">
      <summary>Not a data message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Timeout">
      <summary>Connection timed out.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.MessageToLong">
      <summary>The message is too long to fit the buffer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongOperation">
      <summary>Operation is not supported.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.VersionMismatch">
      <summary>The protocol versions are not compatible. Check your library versions.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.CRCMismatch">
      <summary>The <see cref="UnityEngine.Networking.ConnectionConfig" /> does not match the other endpoint.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.DNSFailure">
      <summary>The address supplied to connect to was invalid or could not be resolved.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DataEvent">
      <summary>Data event received. Indicating that data was received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.ConnectEvent">
      <summary>Connection event received. Indicating that a new connection was established.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DisconnectEvent">
      <summary>Disconnection event received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.Nothing">
      <summary>No new event was received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.BroadcastEvent">
      <summary>Broadcast discovery event received. To obtain sender connection info and possible complimentary message from them, call <see cref="UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo" />() and <see cref="UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage" />() functions.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.Random">
      <summary>
        <para>Spawn players at a randomly chosen starting position.</para>
        <para>A NetworkStartPosition will be randomly chosen by the NetworkManager from the set of NetworkStartPositions in the current scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.RoundRobin">
      <summary>
        <para>Spawn players at the next start position.</para>
        <para>The NetworkManager will spawn players at each NetworkStartPosition in the scene on a round-robin basis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Unreliable">
      <summary>There is no guarantee of delivery or ordering.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableFragmented">
      <summary>There is no guarantee of delivery or ordering, but allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableSequenced">
      <summary>There is no guarantee of delivery and all unordered messages will be dropped. Example: VoIP.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Reliable">
      <summary>Each message is guaranteed to be delivered but not guaranteed to be in order.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableFragmented">
      <summary>Each message is guaranteed to be delivered, also allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableSequenced">
      <summary>Each message is guaranteed to be delivered and in order.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.StateUpdate">
      <summary>An unreliable message. Only the last message in the send buffer is sent. Only the most recent message in the receive buffer will be delivered.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableStateUpdate">
      <summary>A reliable message. Note: Only the last message in the send buffer is sent. Only the most recent message in the receive buffer will be delivered.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.AllCostDelivery">
      <summary>A reliable message that will be re-sent with a high frequency until it is acknowledged.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.SelectReactor">
      <summary>Network thread will sleep up to threadawake timeout, or up to receive event on socket will happened. Awaked thread will try to read up to maxpoolsize packets from socket and will try update connections ready to send (with fixing awaketimeout rate).</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.FixRateReactor">
      <summary>Network thread will sleep up to threadawake timeout, after that it will try receive up to maxpoolsize amount of messages and then will try perform send operation for connection whihc ready to send.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Version.Current">
      <summary>The current UNET version.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientRpcAttribute.channel">
      <summary>The channel ID which this RPC transmission will use.</summary>
    </member>
    <member name="F:UnityEngine.Networking.CommandAttribute.channel">
      <summary>The QoS channel to use to send this command on, see <see cref="UnityEngine.Networking.QosType" />.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.channel">
      <summary>
        <para>The QoS channel to use for updates for this script.</para>
        <para>Updates for SyncVar variables will be sent on the specified QoS channel. The default channel for scripts is zero.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.sendInterval">
      <summary>
        <para>The sendInterval control how frequently updates are sent for this script.</para>
        <para>If sendInterval is zero, updates will be sent at the end of the frame when dirty bits are set for that script. Note that setting the value of a SyncVar will automatically set dirty bits. If sendInterval is non-zero, updates are deferred until sendInterval seconds have passed since the last update for that script. So it can be used as a throttle in cases where the Sync value is changing constantly on the server, but you don't want it to be updated every frame. The default sendInterval for scripts is 0.1f seconds. The send interval can also be customized by implementing the virtual function GetNetworkSendInterval() on NetworkBehaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncEventAttribute.channel">
      <summary>
        <para>The UNET QoS channel that this event should be sent on.</para>
        <para>This defaults to zero - the default reliable channel. This can be used to make events that are not essential for game play (such as effects) unreliable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncVarAttribute.hook">
      <summary>The hook attribute can be used to specify a function to be called when the sync var changes value on the client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.TargetRpcAttribute.channel">
      <summary>The channel ID which this RPC transmission will use.</summary>
    </member>
  </members>
</doc>