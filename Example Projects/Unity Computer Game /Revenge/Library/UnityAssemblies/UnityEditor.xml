<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.7.0.1 -->
  <assembly>
    <name>UnityEditor</name>
  </assembly>
  <members>
    <member name="T:UnityEditor.GenericMenu.MenuFunction">
      <summary>Callback function, called when a menu item is selected.</summary>
    </member>
    <member name="T:UnityEditor.GenericMenu.MenuFunction2">
      <summary>Callback function with user data, called when a menu item is selected.</summary>
    </member>
    <member name="T:UnityEditor.Handles.DrawCapFunction">
      <summary>
        <para>The function to use for drawing the handle e.g. Handles.RectangleCap.</para>
        <para>This delegate is obsolete. Use <see href="Handles.CapFunction" cref="CapFunction" /> instead.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</para>
        <para>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require locking of files. This can be used as a callback to know when Assets are saved. You can then make actions such as run code generator.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Advertisements.AdvertisementSettings">
      <summary>Editor API for the Unity Services editor feature. Normally UnityAds is enabled from the Services window, but if writing your own editor extension, this API can be used.</summary>
    </member>
    <member name="T:UnityEditor.AI.NavMeshBuilder">
      <summary>Navigation mesh builder interface.</summary>
    </member>
    <member name="T:UnityEditor.Analytics.AnalyticsSettings">
      <summary>Editor API for the Unity Services editor feature. Normally Analytics is enabled from the Services window, but if writing your own editor extension, this API can be used.</summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimBool">
      <summary>
        <para>Lerp from 0 - 1.</para>
        <para>When value is 0 returns false, when value &gt; 0.5 returns true. Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimFloat">
      <summary>
        <para>An animated float value.</para>
        <para>Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimQuaternion">
      <summary>
        <para>An animated Quaternion value.</para>
        <para>Animated using Quaternion.Slerp.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimVector3">
      <summary>
        <para>An animated Vector3 value.</para>
        <para>Animated using Vector3.Lerp.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.BaseAnimValue``1">
      <summary>
        <para>Abstract base class for Animated Values.</para>
        <para>Animated Values are an editor only concept for values that have a current value and a target. The value will tween towards the target at a given speed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorCondition">
      <summary>Condition that is used to determine if a transition must be taken.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorController">
      <summary>The Animator Controller controls animation through layers with state machines, controlled by parameters.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorControllerLayer">
      <summary>The Animation Layer contains a state machine that controls animations of a model or part of it.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorState">
      <summary>States are the basic building blocks of a state machine. Each state contains a Motion ( AnimationClip or BlendTree) which will play while the character is in that state. When an event in the game triggers a state transition, the character will be left in a new state whose animation sequence will then take over.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateMachine">
      <summary>A graph controlling the interaction of states. Each state references a motion.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from one state to another. <see cref="UnityEditor.Animations.AnimatorStateTransition" /> always originate from an Animator State (or AnyState) and have timing parameters.</para>
        <para>A transition happens when all its conditions are met. <see cref="UnityEditor.Animations.AnimatorStateTransition" /> derives from <see cref="UnityEditor.Animations.AnimatorTransitionBase" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry. They do not define timing parameters.</para>
        <para>A transition happens when all its conditions are met.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransitionBase">
      <summary>
        <para>Base class for animator transitions. Transitions define when and how the state machine switches from one state to another.</para>
        <para>A transition happens when all its conditions are met.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AvatarMask">
      <summary>
        <para>AvatarMask are used to mask out humanoid body parts and transforms.</para>
        <para>They can be used when importing animation or in an animator controller layer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.BlendTree">
      <summary>Blend trees are used to blend continuously animation between their childs. They can either be 1D or 2D.</summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorState">
      <summary>Structure that represents a state in the context of its parent state machine.</summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorStateMachine">
      <summary>Structure that represents a state machine in the context of its parent state machine.</summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildMotion">
      <summary>Structure that represents a motion in the context of its parent blend tree.</summary>
    </member>
    <member name="T:UnityEditor.Animations.StateMachineBehaviourContext">
      <summary>This class contains all the owner's information for this State Machine Behaviour.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorConditionMode">
      <summary>The mode of the condition.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorLayerBlendingMode">
      <summary>Specifies how the layer is blended with the previous layers.</summary>
    </member>
    <member name="T:UnityEditor.Animations.AvatarMaskBodyPart">
      <summary>Avatar body part.</summary>
    </member>
    <member name="T:UnityEditor.Animations.BlendTreeType">
      <summary>The type of blending algorithm that the blend tree uses.</summary>
    </member>
    <member name="T:UnityEditor.Animations.TransitionInterruptionSource">
      <summary>Which AnimatorState transitions can interrupt the Transition.</summary>
    </member>
    <member name="T:UnityEditor.Callbacks.DidReloadScripts">
      <summary>
        <para>Add this attribute to a method to get a notification after scripts have been reloaded.</para>
        <para>DidReloadScripts has an option to provide an order index. This lets you change the order in which the callback is invoked. (Builtin callbacks always have a value of 0).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.OnOpenAssetAttribute">
      <summary>
        <para>Callback attribute for opening an asset in Unity (e.g the callback is fired when double clicking an asset in the Project Browser).</para>
        <para>Adding this attribute to a static method will make the method be called when Unity is about to open an asset. The method should have the following signature: <c>static bool OnOpenAsset(int instanceID, int line)</c> Return true if you handled the opening of the asset or false if an external tool should open it.</para>
        <para>OnOpenAssetAttribute has an option to provide an order index in the callback, starting at 0. This is useful if you have more than one OnOpenAssetAttribute callback, and you would like them to be called in a certain order. Callbacks are called in order, starting at zero.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessBuildAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the player.</para>
        <para>PostProcessBuildAttribute has an option to provide an order index in the callback, starting at 0. This is useful if you have more than one PostProcessBuildAttribute callback, and you would like them to be called in a certain order. Callbacks are called in order, starting at zero.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessSceneAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the scene.</para>
        <para>A method with this attribute will also get called when entering Playmode, when <see href="Application.LoadLevel" cref="Application.LoadLevel" /> or <see href="Application.LoadLevelAdditive" cref="Application.LoadLevelAdditive" /> is called. PostProcessSceneAttribute has an option to provide an order index in the callback, starting at 0. This is useful if you have more than one OnPostprocessScene callback, and you would like them to be called in a certain order. Callbacks are called in order, starting at zero.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CrashReporting.CrashReportingSettings">
      <summary>Editor API for the Unity Services editor feature. Normally CrashReporting is enabled from the Services window, but if writing your own editor extension, this API can be used.</summary>
    </member>
    <member name="T:UnityEditor.EditorTests.Batch">
      <summary>This class can invoke editor tests runs.</summary>
    </member>
    <member name="T:UnityEditor.EditorTests.ITestResult">
      <summary>Interface for editor tests runner callback.</summary>
    </member>
    <member name="T:UnityEditor.EditorTests.ITestRunnerCallback">
      <summary>Callback for the editor tests runner.</summary>
    </member>
    <member name="T:UnityEditor.EditorTests.TestResultState">
      <summary>Result of an editor test run.</summary>
    </member>
    <member name="T:UnityEditor.EditorTestsRunner.EditorTestsWithLogParser">
      <summary>Base class for editor tests which have the ability to assert log messages.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PBXProject">
      <summary>Represents an Xcode project (pbxproj file).</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistDocument">
      <summary>Represents an Apple's plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElement">
      <summary>Represents a plist element.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElementArray">
      <summary>Represents an array element in plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElementBoolean">
      <summary>Represents a boolean element in plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElementDict">
      <summary>Represents a dictionary element in plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElementInteger">
      <summary>Represents an integer element in plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PlistElementString">
      <summary>Represents a string element in plist document.</summary>
    </member>
    <member name="T:UnityEditor.iOS.Xcode.PBXSourceTree">
      <summary>Specifies source trees for files.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.Connection">
      <summary>
        <para>A pair of from and to indices describing what thing keeps what other thing alive.</para>
        <para>The indicies index into a virtual list of all GC handles, followed by all native objects.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.FieldDescription">
      <summary>Description of a field of a managed type.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.MemorySection">
      <summary>A dump of a piece of memory from the player that's being profiled.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.MemorySnapshot">
      <summary>
        <para>MemorySnapshot is a profiling tool to help diagnose memory usage.</para>
        <para>MemorySnapshot, and all types in UnityEditor.MemoryProfiler.* are very experimental API, and will very likely change significantly going forward. Currently only il2cpp-based players are able to provide memory snapshots. The editor, and mono-based players will not respond to requests for new snapshots.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedGCHandle">
      <summary>A description of a GC handle used by the virtual machine.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedMemorySnapshot">
      <summary>PackedMemorySnapshot is a compact representation of a memory snapshot that a player has sent through the profiler connection.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedNativeType">
      <summary>A description of a C++ unity type.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject">
      <summary>Description of a C++ unity object in memory.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.TypeDescription">
      <summary>Description of a managed type.</summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.VirtualMachineInformation">
      <summary>Information about a virtual machine that provided a memory snapshot.</summary>
    </member>
    <member name="T:UnityEditor.Purchasing.PurchasingSettings">
      <summary>Editor API for the Unity Services editor feature. Normally Purchasing is enabled from the Services window, but if writing your own editor extension, this API can be used.</summary>
    </member>
    <member name="T:UnityEditor.Rendering.EditorGraphicsSettings">
      <summary>Editor-specific script interface for Graphics Settings.</summary>
    </member>
    <member name="T:UnityEditor.Rendering.PlatformShaderSettings">
      <summary>
        <para>Used to set up shader settings, per-platorm and per-shader-hardware-tier.</para>
        <para>This struct is deprecated. Please use <see cref="UnityEditor.Rendering.TierSettings" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Rendering.TierSettings">
      <summary>Used to set up per-platorm per-shader-hardware-tier graphics settings.</summary>
    </member>
    <member name="T:UnityEditor.Rendering.ShaderQuality">
      <summary>Shader quality preset.</summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager">
      <summary>Scene management in the Editor.</summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.SceneSetup">
      <summary>The setup information for a scene in the SceneManager.</summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.NewSceneMode">
      <summary>Used when creating a new scene in the Editor.</summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.NewSceneSetup">
      <summary>Used when creating a new scene in the Editor.</summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.OpenSceneMode">
      <summary>Used when opening a scene in the Editor to specify how a scene should be opened.</summary>
    </member>
    <member name="T:UnityEditor.Sprites.AtlasSettings">
      <summary>
        <para>Describes the final atlas texture.</para>
        <para>Note that if not all Sprites can be fit to an area defined by maxWidth and maxHeight, multiple atlas pages will be generated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer">
      <summary>Sprite Packer helpers.</summary>
    </member>
    <member name="T:UnityEditor.Sprites.PackerJob">
      <summary>
        <para>Current Sprite Packer job definition.</para>
        <para>To be used in IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.SpriteUtility">
      <summary>Helper utilities for accessing <see cref="UnityEngine.Sprite" /> data.</summary>
    </member>
    <member name="T:UnityEditor.Sprites.IPackerPolicy">
      <summary>Sprite packing policy interface. Provide a custom implementation to control which Sprites go into which atlases.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset">
      <summary>This class containes information about the version control state of an asset.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.AssetList">
      <summary>A list of version control information about assets.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSet">
      <summary>Wrapper around a changeset description and ID.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSets">
      <summary>Simply a list of changetsets.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ConfigField">
      <summary>This class describes the.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message">
      <summary>Messages from the version control system.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Plugin">
      <summary>The plugin class describes a version control plugin and which configuratin options it has.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Provider">
      <summary>This class provides acces to the version control API.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Task">
      <summary>A UnityEditor.VersionControl.Task is created almost everytime UnityEditor.VersionControl.Provider is ask to perform an action.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CheckoutMode">
      <summary>What to checkout when starting the Checkout task through the version control Provider.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CompletionAction">
      <summary>Different actions a version control task can do upon completion.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.FileMode">
      <summary>Mode of the file.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.MergeMethod">
      <summary>Which method to use when merging.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.OnlineState">
      <summary>Represent the connection state of the version control provider.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ResolveMethod">
      <summary>How assets should be resolved.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.RevertMode">
      <summary>Defines the behaviour of the version control revert methods.</summary>
    </member>
    <member name="T:UnityEditor.VersionControl.SubmitResult">
      <summary>The status of an operation returned by the VCS.</summary>
    </member>
    <member name="T:UnityEditor.AlphabeticalSort">
      <summary>Hierarchy sort method to allow for items and their children to be sorted alphabetically.</summary>
    </member>
    <member name="T:UnityEditor.AnimationClipCurveData">
      <summary>An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component / material attached to a game object / animated bone.</summary>
    </member>
    <member name="T:UnityEditor.AnimationMode">
      <summary>
        <para>
          <see cref="UnityEditor.AnimationMode" /> is used by the AnimationWindow to store properties modified by the <see cref="UnityEngine.AnimationClip" /> playback.</para>
        <para>When exiting <see cref="UnityEditor.AnimationMode" /> all properties are reverted to their default state. Animated properties are also highlighted by the inspector. Use <see cref="UnityEditor.AnimationMode.StartAnimationMode" /> to enter animation mode. In Animation mode the editor is tinted to show that it is animating. Properties can be animated via <see cref="UnityEditor.AnimationMode.SampleAnimationClip" />. The following script example shows how a GameObject can be animated. <see cref="UnityEditor.AnimationMode" /> has functions which support this. The demo can be launched from the "Examples/AnimationMode demo" menu. Once this demo starts it requires a GameObject to be selected in the Scene window. (This example requires the game to not be running in the Game view.) After a GameObject has been selected the example window will change. Choose a created animation clip for the chosen GameObject. Once the animation clip has been loaded the animation can be applied to the GameObject. Clicking the Animate button adds a slider to the window. Using the slider will apply the animation to the selected GameObject. The Lock button prevents the animation to be applied to a different GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationUtility">
      <summary>Editor utility functions for modifying animation clips.</summary>
    </member>
    <member name="T:UnityEditor.ArrayUtility">
      <summary>Helpers for builtin arrays ...</summary>
    </member>
    <member name="T:UnityEditor.AssetBundleBuild">
      <summary>
        <para>AssetBundle building map entry.</para>
        <para>This class is used with <see cref="UnityEditor.BuildPipeline.BuildAssetBundles" /> to specify the name of a bundle and the names of the assets that it will contain. The array of AssetBundleBuild elements that is passed to the function is known as the "building map" and serves as an alternative to specifying the contents of bundles from the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDatabase">
      <summary>An Interface for accessing assets and performing operations on assets.</summary>
    </member>
    <member name="T:UnityEditor.AssetImporter">
      <summary>Base class from which asset importers for specific asset types derive.</summary>
    </member>
    <member name="T:UnityEditor.AssetPostprocessor">
      <summary>
        <para>AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.</para>
        <para>During model import the functions are called in the the following order: - <see cref="UnityEditor.AssetPostprocessor.OnPreprocessModel" /> is called at the very beginning and you can override <see cref="UnityEditor.ModelImporter" /> settings that are used for the whole model import process. - Once Meshes and Materials are imported, we create GameObjects hierarchy from the imported nodes. Every GameObject that represents imported node gets correspondent MeshFilter, MeshRenderer and MeshCollider components. Before assigning a Material to the MeshRenderer <see cref="UnityEditor.AssetPostprocessor.OnAssignMaterialModel" /> function is invoked. - After GameObject has initialized MeshRenderers and "userdata" exists <see cref="UnityEditor.AssetPostprocessor.OnPostprocessGameObjectWithUserProperties" /> is called. That happens before children GameObjects are generated. - If animation generation was not disabled at previous stages (see <see cref="UnityEditor.ModelImporter.generateAnimations" />), then SkinnedMesh and Animations are generated. If possible Avatar is also created and GameObjecs hierarchy is optimized. After that <see cref="UnityEditor.AssetPostprocessor.OnPostprocessModel" /> is called for the root GameObject. <see cref="UnityEditor.AssetPostprocessor.OnPreprocessSpeedTree" /> and <see cref="UnityEditor.AssetPostprocessor.OnPostprocessSpeedTree" /> are called on SpeedTree assets (.spm file) the same way as <see cref="UnityEditor.AssetPostprocessor.OnPreprocessModel" /> and <see cref="UnityEditor.AssetPostprocessor.OnPostprocessModel" />, except that the <see cref="UnityEditor.AssetPostprocessor.assetImporter" /> type is <see cref="UnityEditor.SpeedTreeImporter" />. In a production pipeline AssetPostprocessors should always be placed in pre-built dll's in the project instead of in scripts. AssetPostprocessors change the output of imported assets, thus a compile error in one of the scripts will lead to assets being imported differently. This can be a severe issue when working in a production pipeline. By using dll's for AssetPostprocessors you ensure that they can always be executed even if the scripts have compile errors. This way you can override default values in the import settings or modify the imported data like textures or meshes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPreview">
      <summary>Utility for fetching asset previews by instance ID of assets, See <see cref="UnityEditor.AssetPreview.GetAssetPreview" />. Since previews are loaded asynchronously methods are provided for requesting if all previews have been fully loaded, see <see cref="UnityEditor.AssetPreview.IsLoadingAssetPreviews" />. Loaded previews are stored in a cache, the size of the cache can be controlled by calling [AssetPreview.SetPreviewTextureCacheSize].</summary>
    </member>
    <member name="T:UnityEditor.AudioCurveRendering">
      <summary>Antialiased curve rendering functionality used by audio tools in the editor.</summary>
    </member>
    <member name="T:UnityEditor.AudioImporter">
      <summary>
        <para>Audio importer lets you modify <see cref="UnityEngine.AudioClip" /> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Audio Import Settings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioImporterSampleSettings">
      <summary>This structure contains a collection of settings used to define how an AudioClip should be imported. This structure is used with the AudioImporter to define how the AudioClip should be imported and treated during loading within the scene.</summary>
    </member>
    <member name="T:UnityEditor.BaseHierarchySort">
      <summary>
        <para>The base class used to create new sorting.</para>
        <para>Example of a natural compare hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildPipeline">
      <summary>Lets you programmatically build players or AssetBundles which can be loaded from the web.</summary>
    </member>
    <member name="T:UnityEditor.BuildPlayerOptions">
      <summary>Provide various options to control the behavior of <see cref="UnityEditor.BuildPipeline.BuildPlayer" />.</summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationInfoCurve">
      <summary>Stores a curve and its name that will be used to create additionnal curves during the import process.</summary>
    </member>
    <member name="T:UnityEditor.ColorPickerHDRConfig">
      <summary>Used as input to ColorField to configure the HDR color ranges in the ColorPicker.</summary>
    </member>
    <member name="T:UnityEditor.DDSImporter">
      <summary>Texture importer lets you modify <see cref="UnityEngine.Texture2D" /> import settings for DDS textures from editor scripts.</summary>
    </member>
    <member name="T:UnityEditor.DecoratorDrawer">
      <summary>
        <para>Base class to derive custom decorator drawers from.</para>
        <para>A DecoratorDrawer is similar to a <see cref="UnityEditor.PropertyDrawer" />, except that it doesn't draw a property but rather draws decorative elements based purely on the data it gets from its corresponding <see cref="UnityEngine.PropertyAttribute" />. Unity uses builtin DecoratorDrawers for the <see cref="UnityEngine.SpaceAttribute" /> and <see cref="UnityEngine.HeaderAttribute" />. You can also create your own DecoratorDrawers with matching PropertyAttributes. Although a DecoratorDrawer conceptually is not meant to be associated with a specific field, its attribute still needs to be placed above a field in the script. However, unlike PropertyDrawer attributes, there can be multiple DecoratorDrawers attributes above the same field. Also unlike PropertyDrawers, if a DecoratorDrawer attribute is placed above a field that is a List or an array, the decorator will only show up once before the array; not for every array element. The example below comes in two scripts. The first script defines the an example attribute called "ColorSpacer", and then defines a DecoratorDrawer which determines how it should be drawn in the inspector. The second script is an example MonoBehaviour which uses the ColorSpacer attribute to visually separate two groups of public properties in the inspector.</para>
        <para>And this second script is the one which makes use of the ColorSpacer attribute defined above:</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DefaultAsset">
      <summary>
        <para>DefaultAsset is used for assets that does not have a specific type (yet).</para>
        <para>Search for <c>t:DefaultAsset</c> in the project browser to see which assets are of that type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDrop">
      <summary>Editor drag &amp; drop operations.</summary>
    </member>
    <member name="T:UnityEditor.Editor">
      <summary>
        <para>Base class to derive custom Editors from. Use this to create your own custom inspectors and editors for your objects.</para>
        <para>Consider a script MyPlayer with variables for armor, damage, and a reference to a gun GameObject:</para>
        <para>Using a custom Editor, the apperance of the script in the Inspector can be changed, for example to look like this: <c>Custom editor in the Inspector.</c> You can attach the Editor to a custom component by using the <see cref="UnityEditor.CustomEditor" /> attribute. There are multiple ways to design custom Editors. If you want the Editor to support multi-object editing, you can use the <see cref="UnityEditor.CanEditMultipleObjects" /> attribute. Instead of modifying script variables directly, it's advantageous to use the <see cref="UnityEditor.SerializedObject" /> and <see cref="UnityEditor.SerializedProperty" /> system to edit them, since this automatically handles multi-object editing, undo, and prefab overrides. If this approach is used a user can select multiple assets in the hierarchy window and change the values for all of them at once.</para>
        <para>Alternatively, if automatic handling of multi-object editing, undo, and prefab overrides is not needed, the script variables can be modified directly by the editor without using the <see cref="UnityEditor.SerializedObject" /> and <see cref="UnityEditor.SerializedProperty" /> system, as in the example below.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication">
      <summary>Main Application class.</summary>
    </member>
    <member name="T:UnityEditor.EditorBuildSettings">
      <summary>This class allows you to modify the Editor Build Settings via script. See <see cref="UnityEditor.EditorBuildSettings.scenes" /> for an example of how to use this class.</summary>
    </member>
    <member name="T:UnityEditor.EditorBuildSettingsScene">
      <summary>This class is used for entries in the Scenes list, as displayed in the Build Settings window. This class contains the scene path of a scene and an enabled flag that indicates wether the scene is enabled in the BuildSettings window or not. You can use this class in combination with <see cref="UnityEditor.EditorBuildSettings.scenes" /> to populate the list of Scenes included in the build via script. This is useful when creating custom editor scripts to automate your build pipeline. See <see cref="UnityEditor.EditorBuildSettings.scenes" /> for an example script.</summary>
    </member>
    <member name="T:UnityEditor.EditorCurveBinding">
      <summary>Defines how a curve is attached to an object that it controls.</summary>
    </member>
    <member name="T:UnityEditor.EditorGUI">
      <summary>These work pretty much like the normal GUI functions - and also have matching implementations in <see cref="UnityEditor.EditorGUILayout" />.</summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout">
      <summary>Auto-layouted version of <see cref="UnityEditor.EditorGUI" />.</summary>
    </member>
    <member name="T:UnityEditor.EditorGUIUtility">
      <summary>Miscellaneous helper stuff for <see cref="UnityEditor.EditorGUI" />.</summary>
    </member>
    <member name="T:UnityEditor.EditorJsonUtility">
      <summary>Utility functions for working with JSON data and engine objects.</summary>
    </member>
    <member name="T:UnityEditor.EditorPrefs">
      <summary>
        <para>Stores and accesses Unity editor preferences.</para>
        <para>On macOS, EditorPrefs are stored in <c>~/Library/Preferences/com.unity3d.UnityEditor.plist</c>. On Windows, EditorPrefs are stored in the registry under the <c>HKCU\Software\Unity Technologies\UnityEditor</c> key.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorStyles">
      <summary>Common GUIStyles used for EditorGUI controls.</summary>
    </member>
    <member name="T:UnityEditor.EditorUserBuildSettings">
      <summary>User build settings for the Editor</summary>
    </member>
    <member name="T:UnityEditor.EditorUtility">
      <summary>Editor utility functions.</summary>
    </member>
    <member name="T:UnityEditor.EditorWindow">
      <summary>
        <para>Derive from this class to create an editor window.</para>
        <para>Create your own custom editor window that can float free or be docked as a tab, just like the native windows in the Unity interface. Editor windows are typically opened using a menu item.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FileUtil">
      <summary>Lets you do <c>move</c>, <c>copy</c>, <c>delete</c> operations over files or directories.</summary>
    </member>
    <member name="T:UnityEditor.GameObjectUtility">
      <summary>GameObject utility functions.</summary>
    </member>
    <member name="T:UnityEditor.GenericMenu">
      <summary>
        <para>The GenericMenu lets you create a custom context and dropdown menus.</para>
        <para>The example below opens an Editor window with a green area. Context-clicking the green area shows a context menu, which triggers a callback to the script when an item is selected. .</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GUIDrawer">
      <summary>Base class for <see cref="UnityEditor.PropertyDrawer" /> and <see cref="UnityEditor.DecoratorDrawer" />.</summary>
    </member>
    <member name="T:UnityEditor.Handles">
      <summary>
        <para>Custom 3D GUI controls and drawing in the Scene view.</para>
        <para>Handles are the 3D controls that Unity uses to manipulate items in the Scene view. There are a number of built-in Handle GUIs, such as the familiar tools to position, scale and rotate a GameObject via the Transform component. However, it is also possible to define your own Handle GUIs to use with custom component editors. Such GUIs can be a very useful way to edit procedurally-generated Scene content, "invisible" items and groups of related GameObjects, such as waypoints and location markers. You can also supplement the 3D Handle GUI in the Scene with 2D buttons and other controls overlaid on the Scene view. Do this by enclosing standard Unity GUI calls in a Handles.BeginGUI / EndGUI pair within the //OnSceneGUI// function. Use HandleUtility.GUIPointToWorldRay and HandleUtility.WorldToGUIPoint to convert coordinates between 2D GUI and 3D world coordinates.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HandleUtility">
      <summary>
        <para>Helper functions for Scene View style 3D GUI.</para>
        <para>These are mainly mathematical functions that assist in converting between the 3D scene space and the 2D GUI. The functions are used in the construction of the Unity editor itself and so using them is a good way to make your own Handle GUIs consistent with Unity's.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Help">
      <summary>Helper class to access Unity documentation.</summary>
    </member>
    <member name="T:UnityEditor.Highlighter">
      <summary>Use this class to highlight elements in the editor for use in in-editor tutorials and similar.</summary>
    </member>
    <member name="T:UnityEditor.iOSDeviceRequirement">
      <summary>A device requirement description used for configuration of App Slicing.</summary>
    </member>
    <member name="T:UnityEditor.LightingDataAsset">
      <summary>
        <para>The lighting data asset used by the active scene.</para>
        <para>Please note that modifying this value currently does not affect the scene immediately, the lighting data is only patched into the active scene when loading the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings">
      <summary>
        <para>Various settings for the bake.</para>
        <para>The bake can be started via <see cref="UnityEditor.Lightmapping" /> class.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapParameters">
      <summary>A collection of parameters that impact lightmap and realtime GI computations.</summary>
    </member>
    <member name="T:UnityEditor.Lightmapping">
      <summary>
        <para>Allows to control the lightmapping job.</para>
        <para>Before starting the job the bake settings can be set via <see cref="UnityEditor.LightmapEditorSettings" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LODUtility">
      <summary>LOD Utility Helpers.</summary>
    </member>
    <member name="T:UnityEditor.MaterialEditor">
      <summary>
        <para>The Unity Material Editor.</para>
        <para>Extend this class to write your own custom material editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty">
      <summary>
        <para>Describes information and value of a single shader property.</para>
        <para>MaterialProperty is used with the <see cref="UnityEditor.MaterialEditor" /> when writing custom material editors, or implementing custom <see cref="UnityEditor.MaterialPropertyDrawer" /> classes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialPropertyDrawer">
      <summary>
        <para>Base class to derive custom material property drawers from.</para>
        <para>Use this to create custom UI drawers for your material properties, without having to write custom <see cref="UnityEditor.MaterialEditor" /> classes. This is similar to how <see cref="UnityEditor.PropertyDrawer" /> enables custom UI without writing custom inspectors. In shader code, C#-like attribute syntax can be used in front of shader properties to add drawers to them. Unity has several built-in drawers, and you can write your own. Here's a shader code snippet demonstrating the syntax:</para>
        <para>When implementing your own drawers, you should override OnGUI function. You can also optionally override GetPropertyHeight and Apply functions. Here's an example of a property drawer that displays a checkbox for a float property, with the value set to 0 or 1 depending on the state:</para>
        <para>The built-in MaterialPropertyDrawers are: ToggleDrawer, EnumDrawer, KeywordEnumDrawer, PowerSliderDrawer, IntRangeDrawer. In shader code, the "Drawer" suffix of the class name is not written; when Unity searches for the drawer class it adds "Drawer" automatically. Toggle displays a float as a toggle. The property value will be 0 or 1, depending on the toggle state. When it is on, a shader keyword with the uppercase property name +"_ON" will be set, or an explicitly specified shader keyword.</para>
        <para>Enum displays a popup menu for a float property. You can supply either an enum type name (preferably fully qualified with namespaces, in case there are multiple types), or explicit name/value pairs to display. Up to 7 name/value pairs can be specified.</para>
        <para>KeywordEnum displays a popup menu for a float property, and enables corresponding shader keyword. This is used with "#pragma multi_compile" in shaders, to enable or disable parts of shader code. Each name will enable "property name" + underscore + "enum name", uppercased, shader keyword. Up to 9 names can be provided.</para>
        <para>PowerSlider displays a slider with a non-linear response for a Range shader property.</para>
        <para>IntRange displays an integer slider for a Range shader property.</para>
        <para>When a property drawer class name ends with "Decorator", that is a property decorator, similar to <see cref="UnityEditor.DecoratorDrawer" />. They are used to create headings and dividers between properties that don't affect the property itself. A single property can have multiple decorators on it. The built-in decorator drawers are: SpaceDecorator, HeaderDecorator. Space creates vertical space before the shader property.</para>
        <para>Header creates a header text before the shader property.</para>
        <para>Note that for performance reasons, EditorGUILayout functions are not usable with MaterialPropertyDrawers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Menu">
      <summary>Menu class to manipulate the menu item.</summary>
    </member>
    <member name="T:UnityEditor.MenuCommand">
      <summary>Used to extract the context for a <see cref="UnityEditor.MenuItem" />. MenuCommand objects are passed to custom menu item functions defined using the <see cref="UnityEditor.MenuItem" /> attribute.</summary>
    </member>
    <member name="T:UnityEditor.MeshUtility">
      <summary>Various utilities for mesh manipulation.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporter">
      <summary>
        <para>Model importer lets you modify model import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Mesh Import Settings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterClipAnimation">
      <summary>Animation clips to split animation into.</summary>
    </member>
    <member name="T:UnityEditor.MonoScript">
      <summary>
        <para>Representation of Script assets.</para>
        <para>This class represents C#, JavaScript and Boo files stored in the project.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MovieImporter">
      <summary>AssetImporter for importing MovieTextures.</summary>
    </member>
    <member name="T:UnityEditor.ObjectNames">
      <summary>Helper class for constructing displayable names for objects.</summary>
    </member>
    <member name="T:UnityEditor.ObjectPreview">
      <summary>
        <para>Base Class to derive from when creating Custom Previews.</para>
        <para>You specify which type is the preview for, by using the <see cref="UnityEditor.ObjectPreview" /> attribute. Below you can see an small example that will display the name of the object being inspected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings">
      <summary>Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.</summary>
    </member>
    <member name="T:UnityEditor.PluginImporter">
      <summary>Represents plugin importer.</summary>
    </member>
    <member name="T:UnityEditor.PopupWindow">
      <summary>
        <para>Class used to display popup windows that inherit from <see cref="UnityEditor.PopupWindowContent" />.</para>
        <para>Popup Windows are borderless, and not draggable or resizable. They also will automatically close when they lose focus. They are intended to show short-lived information or options. An example of a Popup window in the editor is the "Scene View Effects" options, in the Editor's Scene View toolbar: Below is an example of a custom popup window which is displayed via a button in an editor window. The Popup has three toggle values, and will automatically close when it loses focus. The example is given as two scripts. The first defines an editor window that can be opened via a menu item. That editor window has a button which shows the popup. The second script defines the contents of the popup itself as a separate class. First, this is the code for the simple editor window which launches the popup:</para>
        <para>Next, this is the code for the popup itself:</para>
        <para>Each of these should be saved as separate files named after their class name. Neither are behaviours, so you do not need to place them on a gameobject. Once they are in your project, try it by going to the new "Example" menu and selecting Popup Example. Then click the button in the new editor window to reveal the popup options window. .</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindowContent">
      <summary>Class used to implement content for a popup window.</summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility">
      <summary>Utility class for any prefab related operations.</summary>
    </member>
    <member name="T:UnityEditor.PropertyDrawer">
      <summary>
        <para>Base class to derive custom property drawers from. Use this to create custom drawers for your own <c>Serializable</c> classes or for script variables with custom <see cref="UnityEngine.PropertyAttribute" />s.</para>
        <para>PropertyDrawers have two uses: - Customize the GUI of every instance of a <c>Serializable</c> class. - Customize the GUI of script members with custom <see cref="UnityEngine.PropertyAttribute" />s. If you have a custom <c>Serializable</c> class, you can use a PropertyDrawer to control how it looks in the Inspector. Consider the Serializable class Ingredient in the script below:</para>
        <para>Using a custom PropertyDrawer, every appearance of the Ingredient class in the Inspector can be changed. Compare the look of the Ingredient properties in the Inspector without and with a custom PropertyDrawer: <c>Class in the Inspector without (left) and with (right) custom PropertyDrawer.</c> You can attach the PropertyDrawer to a Serializable class by using the <see cref="UnityEditor.CustomPropertyDrawer" /> attribute and pass in the type of the Serializable class that it's a drawer for.</para>
        <para>The other use of PropertyDrawer is to alter the appearance of members in a script that have custom <see cref="UnityEngine.PropertyAttribute" />s. Say you want to limit floats or integers in your script to a certain range and show them as sliders in the Inspector. Using the built-in <see cref="UnityEngine.PropertyAttribute" /> called <see cref="UnityEngine.RangeAttribute" /> you can do just that:</para>
        <para>You can make your own <see cref="UnityEngine.PropertyAttribute" /> as well. We'll use the code for the <see cref="UnityEngine.RangeAttribute" /> as an example. The attribute must extend the PropertyAttribute class. If you want, your property can take parameters and store them as public member variables.</para>
        <para>Now that you have the attribute, you need to make a PropertyDrawer that draws properties that have that attribute. The drawer must extend the PropertyDrawer class, and it must have a <see cref="UnityEditor.CustomPropertyDrawer" /> attribute to tell it which attribute it's a drawer for.</para>
        <para>Note that for performance reasons, EditorGUILayout functions are not usable with PropertyDrawers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PropertyModification">
      <summary>
        <para>Defines a single modified property.</para>
        <para>Used by the prefab system to track any changes applied to an instance.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneAsset">
      <summary>
        <para>SceneAsset is used to reference scene objects in the Editor.</para>
        <para>This can be used as the type for ObjectField UI elements, to allow the user to pick a scene object as the value of the field. This example shows how to pick a scene in the editor. The ScenePicker component is placed on a game object in the scene:</para>
        <para>The ScenePickerEditor script must be in the Editor directory of the project. It provides the custom inspector in the editor that uses the SceneAsset class in an ObjectField to allow the user to pick a scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptableWizard">
      <summary>
        <para>Derive from this class to create an editor wizard.</para>
        <para>Editor wizards are typically opened using a menu item.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Selection">
      <summary>Access to the selection in the editor.</summary>
    </member>
    <member name="T:UnityEditor.SerializedObject">
      <summary>
        <para>SerializedObject and <see cref="UnityEditor.SerializedProperty" /> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedObject is used in conjunction with <see cref="UnityEditor.SerializedProperty" /> and <see cref="UnityEditor.Editor" /> classes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedProperty">
      <summary>
        <para>SerializedProperty and <see cref="UnityEditor.SerializedObject" /> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedProperty is used in conjunction with <see cref="UnityEditor.SerializedObject" /> and <see cref="UnityEditor.Editor" /> classes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderGUI">
      <summary>
        <para>Abstract class to derive from for defining custom GUI for shader properties and for extending the material preview.</para>
        <para>Derive from this class for controlling how shader properties should be presented. For a shader to use this custom GUI use the 'CustomEditor' property in the shader. Note that CustomEditor can also be used for classes deriving from MaterialEditor (search for: Custom Material Editors). Note: Only the ShaderGUI approach works with Substance materials this is therefore the recommended approach to custom gui for shaders. See <see cref="UnityEditor.ShaderGUI.OnGUI" />, <see cref="UnityEditor.ShaderGUI.OnMaterialPreviewGUI" />, <see cref="UnityEditor.ShaderGUI.OnMaterialPreviewSettingsGUI" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil">
      <summary>Utility functions to assist with working with shaders from the editor.</summary>
    </member>
    <member name="T:UnityEditor.SketchUpImportCamera">
      <summary>
        <para>Structure to hold camera data extracted from a SketchUp file.</para>
        <para>When importing a SketchUp file, Unity retrieves the current camera view the file is saved with and the camera view of all the scenes in the SketchUp file. The camera data of each scene is stored in <see cref="UnityEditor.SketchUpImportScene" /> This can be extracted later from <see cref="UnityEditor.SketchUpImporter" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImporter">
      <summary>
        <para>Derives from AssetImporter to handle importing of SketchUp files.</para>
        <para>From the SketchUpImporter, you can access certain properties that are extracted from the SketchUp file. The following is an example of showing the geo coordinate extracted from the SketchUp file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImportScene">
      <summary>
        <para>Structure to hold scene data extracted from a SketchUp file.</para>
        <para>When importing a SketchUp file, Unity retrieves all the scenes in the SketchUp file. This can be extracted later from <see cref="UnityEditor.SketchUpImporter" /> with <see cref="UnityEditor.SketchUpImporter.GetScenes" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpeedTreeImporter">
      <summary>AssetImportor for importing SpeedTree model assets.</summary>
    </member>
    <member name="T:UnityEditor.SpriteMetaData">
      <summary>Editor data used in producing a Sprite.</summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCulling">
      <summary>StaticOcclusionCulling lets you perform static occlusion culling operations.</summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCullingVisualization">
      <summary>Used to visualize static occlusion culling at development time in scene view.</summary>
    </member>
    <member name="T:UnityEditor.SubstanceArchive">
      <summary>Class for Substance Archive handling.</summary>
    </member>
    <member name="T:UnityEditor.SubstanceImporter">
      <summary>The SubstanceImporter class lets you access the imported ProceduralMaterial instances.</summary>
    </member>
    <member name="T:UnityEditor.TakeInfo">
      <summary>
        <para>A Takeinfo object contains all the information needed to describe a take.</para>
        <para>SA <see cref="UnityEditor.ModelImporter.importedTakeInfos" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporter">
      <summary>
        <para>Texture importer lets you modify <see cref="UnityEngine.Texture2D" /> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Texture Import Settings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterPlatformSettings">
      <summary>Stores platform specifics settings of a <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterSettings">
      <summary>Stores settings of a <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.Tools">
      <summary>Class used to manipulate the tools used in Unity's Scene View.</summary>
    </member>
    <member name="T:UnityEditor.TransformSort">
      <summary>Is the default sorting method used by the hierarchy.</summary>
    </member>
    <member name="T:UnityEditor.TrueTypeFontImporter">
      <summary>AssetImporter for importing Fonts.</summary>
    </member>
    <member name="T:UnityEditor.Undo">
      <summary>
        <para>Lets you register undo operations on specific objects you are about to perform changes on.</para>
        <para>The Undo system stores delta changes in the undo stack. Undo operations are automatically combined together based on events, e.g. mouse down events will split undo groups. Grouped undo operations will appear and work as a single undo. To control grouping manually use <see cref="UnityEditor.Undo.IncrementCurrentGroup" />. By default, the name shown in the UI will be selected from the actions belonging to the group using a hardcoded ordering of the different kinds of actions. To manually set the name, use <see cref="UnityEditor.Undo.SetCurrentGroupName" />. Undo operations store either per property or per object state. This way they scale well with any scene size. The most important operations are outlined below. Modifying a single property:</para>
        <para>Adding a component :</para>
        <para>Creating a new game object:</para>
        <para>Destroying a game object or component:</para>
        <para>Changing transform parenting:</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UnwrapParam">
      <summary>
        <para>Unwrapping settings.</para>
        <para>Allows you control over the parameters of the automatic UV <see cref="UnityEditor.Unwrapping" /> feature. Use this if you want to override the default unwrap settings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Unwrapping">
      <summary>
        <para>This class holds everything you may need in regard to uv-unwrapping.</para>
        <para>WARNING: preliminary interface, will be changed in future versions e.g. in future it will contain possibility to pack your uvs optimally etc.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ActionOnDotNetUnhandledException">
      <summary>The behavior in case of unhandled .NET exception.</summary>
    </member>
    <member name="T:UnityEditor.AndroidBuildSystem">
      <summary>Type of Android build system.</summary>
    </member>
    <member name="T:UnityEditor.AndroidGamepadSupportLevel">
      <summary>Gamepad support level for Android TV.</summary>
    </member>
    <member name="T:UnityEditor.AndroidPreferredInstallLocation">
      <summary>Preferred application install location.</summary>
    </member>
    <member name="T:UnityEditor.AndroidSdkVersions">
      <summary>Supported Android SDK versions.</summary>
    </member>
    <member name="T:UnityEditor.AndroidShowActivityIndicatorOnLoading">
      <summary>Application should show ActivityIndicator when loading.</summary>
    </member>
    <member name="T:UnityEditor.AndroidSplashScreenScale">
      <summary>Android splash screen scale modes.</summary>
    </member>
    <member name="T:UnityEditor.AndroidTargetDevice">
      <summary>Target Android device architecture.</summary>
    </member>
    <member name="T:UnityEditor.ApiCompatibilityLevel">
      <summary>.NET API compatibility level.</summary>
    </member>
    <member name="T:UnityEditor.AscentCalculationMode">
      <summary>
        <para>Method used for calculating a font's ascent.</para>
        <para>The ascent is the distance from the baseline to the top of the font. Font designers define this differently within the metrics of various fonts: some fonts will use the bounding box height, some will use cap height, and others will account for diacritics such as accent marks. Because these differences can affect vertical alignment of text, Unity offers multiple methods of determining the ascent value to use internally. See <see href="Typeface#Font_metrics" cref="https://en.wikipedia.org/wiki/Typeface#Font_metrics" /> for additional information about ascent and font metrics.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AspectRatio">
      <summary>
        <para>Aspect ratio.</para>
        <para>This enum is used when modifying and inspecting supported aspect ratios in PlayerSettings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDeleteResult">
      <summary>Result of Asset delete operation</summary>
    </member>
    <member name="T:UnityEditor.AssetMoveResult">
      <summary>Result of Asset move</summary>
    </member>
    <member name="T:UnityEditor.AudioSampleRateSetting">
      <summary>The sample rate setting used within the AudioImporter. This defines the sample rate conversion of audio on import.</summary>
    </member>
    <member name="T:UnityEditor.BuildAssetBundleOptions">
      <summary>Asset Bundle building options.</summary>
    </member>
    <member name="T:UnityEditor.BuildOptions">
      <summary>Building options. Multiple options can be combined together.</summary>
    </member>
    <member name="T:UnityEditor.BuildTarget">
      <summary>Target build platform.</summary>
    </member>
    <member name="T:UnityEditor.BuildTargetGroup">
      <summary>Build target group.</summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationMaskType">
      <summary>
        <para>AnimationClip mask options for <see cref="UnityEditor.ModelImporterClipAnimation" />.</para>
        <para>Mask can be used to specify which transforms animation should be imported when generating the clip.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D11FullscreenMode">
      <summary>
        <para>Direct3D 11 fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Windows standalone builds when using Direct3D 11.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D9FullscreenMode">
      <summary>
        <para>Direct3D 9 fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Windows standalone builds when using Direct3D 9.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDropVisualMode">
      <summary>Visual indication mode for Drag &amp; Drop operation.</summary>
    </member>
    <member name="T:UnityEditor.DrawCameraMode">
      <summary>Drawing modes for <see cref="UnityEditor.Handles.DrawCamera" />.</summary>
    </member>
    <member name="T:UnityEditor.EditorSelectedRenderState">
      <summary>The editor selected render mode for Scene View selection.</summary>
    </member>
    <member name="T:UnityEditor.EditorSkin">
      <summary>Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.</summary>
    </member>
    <member name="T:UnityEditor.ExportPackageOptions">
      <summary>Export package option. Multiple options can be combined together using the | operator.</summary>
    </member>
    <member name="T:UnityEditor.FontRenderingMode">
      <summary>Font rendering mode constants for TrueTypeFontImporter.</summary>
    </member>
    <member name="T:UnityEditor.FontTextureCase">
      <summary>Texture case constants for TrueTypeFontImporter.</summary>
    </member>
    <member name="T:UnityEditor.GizmoType">
      <summary>
        <para>Determines how a gizmo is drawn or picked in the Unity editor.</para>
        <para>The types can be combined together with an OR operator.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HighlightSearchMode">
      <summary>
        <para>Used to specify how to find a given element in the editor to highlight.</para>
        <para>Let's consider various approaches to highlighting the Scale control in the Transform component. Using the <see cref="UnityEditor.HighlightSearchMode.PrefixLabel" /> mode you can specify the label text "Scale" as the identifier to highlight the entire Scale control with both label and all three number fields included. This mode can't be used if you want to only highlight the X component of the Scale control. Since the label text of the X component is simply "X", you would get the X component of the Position control instead if you attempted that. The <see cref="UnityEditor.HighlightSearchMode.PrefixLabel" /> mode works for any control that uses <see cref="UnityEditor.EditorGUI.PrefixLabel" /> or <see cref="UnityEditor.EditorGUI.HandlePrefixLabel" />. If you use the <see cref="UnityEditor.HighlightSearchMode.Content" /> mode to seach for the text "Scale", only the label itself will be highlighted. This mode can highlight what corresponds to a single <see cref="UnityEngine.GUIStyle.Draw" /> call and hence cannot highlight composite controls. It is particularly useful for highlighting buttons. The <see cref="UnityEditor.HighlightSearchMode.Identifier" /> mode searches for rects explicitly marked to be highlightable using the <see cref="UnityEditor.Highlighter.HighlightIdentifier" /> function. This is for example done for all controls that uses the <see cref="UnityEditor.SerializedProperty" /> system, using the <see cref="UnityEditor.SerializedProperty.propertyPath" /> as the identifier. This means you could use this mode to highlight the X component of the Scale control by searching for "m_LocalScale.x". The <see cref="UnityEditor.HighlightSearchMode.Auto" /> mode searches using all the above modes and can be used in most cases. Searching for "Scale" using this mode will highlight the entire Scale control rather than just the label, since the PrefixLabel handling is hit before the <see cref="UnityEngine.GUIStyle.Draw" /> call of the label.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ImportAssetOptions">
      <summary>Asset importing options.</summary>
    </member>
    <member name="T:UnityEditor.iOSAppInBackgroundBehavior">
      <summary>Application behavior when entering background.</summary>
    </member>
    <member name="T:UnityEditor.iOSBackgroundMode">
      <summary>Background modes supported by the application corresponding to project settings in Xcode.</summary>
    </member>
    <member name="T:UnityEditor.iOSBuildType">
      <summary>Build configurations for the generated Xcode project.</summary>
    </member>
    <member name="T:UnityEditor.iOSSdkVersion">
      <summary>Supported iOS SDK versions.</summary>
    </member>
    <member name="T:UnityEditor.iOSShowActivityIndicatorOnLoading">
      <summary>Activity Indicator on loading.</summary>
    </member>
    <member name="T:UnityEditor.iOSStatusBarStyle">
      <summary>iOS status bar style.</summary>
    </member>
    <member name="T:UnityEditor.iOSTargetDevice">
      <summary>Target iOS device.</summary>
    </member>
    <member name="T:UnityEditor.iOSTargetOSVersion">
      <summary>Supported iOS deployment versions.</summary>
    </member>
    <member name="T:UnityEditor.LightmapBakeQuality">
      <summary>Bake quality setting for <see cref="UnityEditor.LightmapEditorSettings" />.</summary>
    </member>
    <member name="T:UnityEditor.MacFullscreenMode">
      <summary>
        <para>Mac fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled on macOS Standalones.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MessageType">
      <summary>User message types.</summary>
    </member>
    <member name="T:UnityEditor.MobileTextureSubtarget">
      <summary>Compressed texture format for target build platform.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationCompression">
      <summary>
        <para>Animation compression options for <see cref="UnityEditor.ModelImporter" />.</para>
        <para>Compressing animations saves space in the built game, but more compression introduces more artifacts in the animations.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationType">
      <summary>Animation mode for <see cref="UnityEditor.ModelImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateAnimations">
      <summary>Animation generation options for <see cref="UnityEditor.ModelImporter" />. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateMaterials">
      <summary>Material generation options for <see cref="UnityEditor.ModelImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterHumanoidOversampling">
      <summary>Humanoid Oversampling available multipliers.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialName">
      <summary>Material naming options for <see cref="UnityEditor.ModelImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialSearch">
      <summary>Material search options for <see cref="UnityEditor.ModelImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMeshCompression">
      <summary>
        <para>Mesh compression options for <see cref="UnityEditor.ModelImporter" />.</para>
        <para>Compressing meshes saves space in the built game, but more compression introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterNormals">
      <summary>
        <para>Vertex normal generation options for <see cref="UnityEditor.ModelImporter" />.</para>
        <para>Normals can either be imported from model file (default), calculated by Unity, or not included into imported mesh at all. Vertex normals are most often used for realtime lighting.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangents">
      <summary>
        <para>Vertex tangent generation options for <see cref="UnityEditor.ModelImporter" />.</para>
        <para>Tangentss can either be imported from model file, calculated by Unity using several methods (default is MikkTSpace), or not included into imported mesh at all. Vertex tangents are most often used for normal/bump mapping.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangentSpaceMode">
      <summary>Tangent space generation options for <see cref="UnityEditor.ModelImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.MouseCursor">
      <summary>Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.</summary>
    </member>
    <member name="T:UnityEditor.PivotMode">
      <summary>Where is the tool handle placed.</summary>
    </member>
    <member name="T:UnityEditor.PivotRotation">
      <summary>How is the tool handle oriented.</summary>
    </member>
    <member name="T:UnityEditor.PrefabType">
      <summary>The type of a prefab object as returned by <see cref="UnityEditor.PrefabUtility.GetPrefabType" />.</summary>
    </member>
    <member name="T:UnityEditor.PS4BuildSubtarget">
      <summary>Type of build to generate.</summary>
    </member>
    <member name="T:UnityEditor.PSP2BuildSubtarget">
      <summary>Target PS Vita build type.</summary>
    </member>
    <member name="T:UnityEditor.RemoveAssetOptions">
      <summary>Options for removing assets</summary>
    </member>
    <member name="T:UnityEditor.ReplacePrefabOptions">
      <summary>Flags for the PrefabUtility.ReplacePrefab function.</summary>
    </member>
    <member name="T:UnityEditor.ResolutionDialogSetting">
      <summary>
        <para>Resolution dialog setting.</para>
        <para>This enum is used when setting the behaviour of the resolution dialog in <see cref="UnityEditor.PlayerSettings" />.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptCallOptimizationLevel">
      <summary>Script call optimization level.</summary>
    </member>
    <member name="T:UnityEditor.ScriptingImplementation">
      <summary>
        <para>Scripting implementation (backend).</para>
        <para>Certain platforms might offer multiple scripting backends.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SelectionMode">
      <summary>
        <para>SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.</para>
        <para>The default transform selection mode is: SelectionMode.TopLevel | SelectionMode.ExcludePrefab | SelectionMode.Editable.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SemanticMergeMode">
      <summary>
        <para>Behavior of semantic merge.</para>
        <para>How the semantic merge of scene and prefab assets should behave.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedPropertyType">
      <summary>Type of a <see cref="UnityEditor.SerializedProperty" />.</summary>
    </member>
    <member name="T:UnityEditor.SplashScreenStyle">
      <summary>The style of builtin splash screen to use.</summary>
    </member>
    <member name="T:UnityEditor.SpriteImportMode">
      <summary>Texture importer modes for Sprite import.</summary>
    </member>
    <member name="T:UnityEditor.SpritePackerMode">
      <summary>Sprite Packer mode for the current project.</summary>
    </member>
    <member name="T:UnityEditor.StaticEditorFlags">
      <summary>Static Editor Flags.</summary>
    </member>
    <member name="T:UnityEditor.StereoRenderingPath">
      <summary>Enum used to specify what stereo rendering path to use.</summary>
    </member>
    <member name="T:UnityEditor.StrippingLevel">
      <summary>Managed code stripping level.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterAlphaSource">
      <summary>Select how the alpha of the imported texture is generated.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterCompression">
      <summary>Select the kind of compression you want for your texture.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterCubemapConvolution">
      <summary>
        <para>Defines <see cref="UnityEngine.Cubemap" /> convolution mode.</para>
        <para>This is useful if you need to pre-compute a diffuse or glossy specular reflections in the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterFormat">
      <summary>
        <para>Imported texture format for <see cref="UnityEditor.TextureImporter" />.</para>
        <para>Most of the values match the ones in <see cref="UnityEngine.TextureFormat" />, with addition of the "Automatic" ones that pick the best format based on platform and texture type or usage.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterGenerateCubemap">
      <summary>
        <para>Cubemap generation mode for <see cref="UnityEditor.TextureImporter" />.</para>
        <para>
          <see cref="UnityEngine.Cubemap" /> textures can be generated from 2D texture using one of these modes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterMipFilter">
      <summary>Mip map filter for <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNormalFilter">
      <summary>Normal map filtering mode for <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNPOTScale">
      <summary>Scaling mode for non power of two textures in <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterRGBMMode">
      <summary>
        <para>RGBM encoding mode for HDR textures in <see cref="UnityEditor.TextureImporter" />.</para>
        <para>HDR texture data (i.e. coming from .exr or .hdr files) can be encoded into RGBM format by Unity. This setting controls how the encoding is done. Default is "Auto", which means do RGBM encoding when source data is HDR. RGBM encoding packs [0;8] range into [0;1] with multiplier stored in the alpha channel. Final value is RGB*A*8.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterShape">
      <summary>Select the kind of shape of your texture.</summary>
    </member>
    <member name="T:UnityEditor.TextureImporterType">
      <summary>Select this to set basic parameters depending on the purpose of your texture.</summary>
    </member>
    <member name="T:UnityEditor.TizenOSVersion">
      <summary>Tizen OS compatibility.</summary>
    </member>
    <member name="T:UnityEditor.TizenShowActivityIndicatorOnLoading">
      <summary>Enumerator list of different activity indicators your game can show when loading.</summary>
    </member>
    <member name="T:UnityEditor.Tool">
      <summary>Which tool is active in the editor.</summary>
    </member>
    <member name="T:UnityEditor.tvOSSdkVersion">
      <summary>Supported tvOS SDK versions.</summary>
    </member>
    <member name="T:UnityEditor.tvOSTargetOSVersion">
      <summary>Supported tvOS deployment versions.</summary>
    </member>
    <member name="T:UnityEditor.VertexChannelCompressionFlags">
      <summary>
        <para>This enum is used to build a bitmask for controlling per-channel vertex compression.</para>
        <para>Default settings: Position and TextureCoordinate1 are uncompressed because high precision is usually desired. The rest of the channels are compressed to save memory and conserve bandwidth.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ViewTool">
      <summary>Enum for Tools.viewTool.</summary>
    </member>
    <member name="T:UnityEditor.WebGLCompressionFormat">
      <summary>
        <para>An enum containing different compression types.</para>
        <para>This enum is used within the WebGL platform to define what type of compression will be used for resources.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WebGLExceptionSupport">
      <summary>Options for Exception support in WebGL.</summary>
    </member>
    <member name="T:UnityEditor.WiiUBuildDebugLevel">
      <summary>Wii U Player debugging level.</summary>
    </member>
    <member name="T:UnityEditor.WiiUBuildOutput">
      <summary>Player packaging.</summary>
    </member>
    <member name="T:UnityEditor.WiiUTVResolution">
      <summary>Resolution setting for TV output.</summary>
    </member>
    <member name="T:UnityEditor.WSABuildType">
      <summary>Build configurations for Windows Store Visual Studio solutions.</summary>
    </member>
    <member name="T:UnityEditor.WSASDK">
      <summary>Specifies Windows SDK which used when building Windows Store Apps.</summary>
    </member>
    <member name="T:UnityEditor.WSASubtarget">
      <summary>Target device type for a Windows Store application to run on.</summary>
    </member>
    <member name="T:UnityEditor.XboxBuildSubtarget">
      <summary>Target Xbox build type.</summary>
    </member>
    <member name="T:UnityEditor.CallbackOrderAttribute">
      <summary>Base class for Attributes that require a callback index.</summary>
    </member>
    <member name="T:UnityEditor.CanEditMultipleObjects">
      <summary>
        <para>Attribute used to make a custom editor support multi-object editing.</para>
        <para>When multiple objects are selected, Editors that don't have this attribute will show the message "Multi-object editing not supported". See the <see cref="UnityEditor.Editor" /> class documentation on how to make an Editor support multi-object editing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomEditor">
      <summary>
        <para>Tells an Editor class which run-time type it's an editor for.</para>
        <para>When you make a custom editor for a component, you need put this attribute on the editor class.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomPreviewAttribute">
      <summary>
        <para>Adds an extra preview in the Inspector for the specified type.</para>
        <para>You can use this attribute to add your custom preview to any object that can be Inspected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomPropertyDrawer">
      <summary>
        <para>Tells a custom <see cref="UnityEditor.PropertyDrawer" /> or <see cref="UnityEditor.DecoratorDrawer" /> which run-time <c>Serializable</c> class or <see cref="UnityEngine.PropertyAttribute" /> it's a drawer for.</para>
        <para>When you make a custom <see cref="UnityEditor.PropertyDrawer" /> or <see cref="UnityEditor.DecoratorDrawer" />, you need put this attribute on the drawer class. If the drawer is for a <c>Serializable</c> class, then pass the type of the class to the CustomPropertyDrawer attribute (only valid for PropertyDrawers; not DecoratorDrawers). If the drawer is for a <see cref="UnityEngine.PropertyAttribute" />, then pass the type of the PropertyAttribute to the CustomPropertyDrawer attribute.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawGizmo">
      <summary>
        <para>The DrawGizmo attribute allows you to supply a gizmo renderer for any <see cref="UnityEngine.Component" />.</para>
        <para>The renderer function must be static, and take two parameters: the object for which the gizmo is being drawn, and a <see cref="UnityEditor.GizmoType" /> parameter which indicates the context in which the gizmo is being drawn. The renderer function can be defined in any class, including editor scripts. This allows you to keep your gizmo-drawing code out of your component scripts so that it is not included in builds.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadAttribute">
      <summary>
        <para>Allow an editor class to be initialized when Unity loads without action from the user.</para>
        <para>Note that static constructors with this attribute are called when Unity starts and when Run is pressed. In this second case the Unity runtime is intialised and this is treated as a Load.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadMethodAttribute">
      <summary>Allow an editor class method to be initialized when Unity loads without action from the user.</summary>
    </member>
    <member name="T:UnityEditor.MenuItem">
      <summary>
        <para>The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.</para>
        <para>The MenuItem attribute turns any static function into a menu command. Only static functions can use the MenuItem attribute. To create a hotkey you can use the following special characters: % (ctrl on Windows, cmd on macOS), # (shift), &amp; (alt). If no special modifier key combinations are required the key can be given after an underscore. For example to create a menu with hotkey shift-alt-g use <c>"MyMenu/Do Something #&amp;g"</c>. To create a menu with hotkey g and no key modifiers pressed use <c>"MyMenu/Do Something _g"</c>. Some special keyboard keys are supported as hotkeys, for example "#LEFT" would map to shift-left. The keys supported like this are: LEFT, RIGHT, UP, DOWN, F1 .. F12, HOME, END, PGUP, PGDN. A hotkey text must be preceded with a space character (<c>"MyMenu/Do_g"</c> won't be interpreted as hotkey, while <c>"MyMenu/Do _g"</c> will). When adding menu items to the "GameObject/" menu for creating custom game objects be sure to call <see cref="UnityEditor.GameObjectUtility.SetParentAndAlign" /> to ensure that the new GameObject is reparented correctly in the case of a context click (see example below). Your function should also call <see cref="UnityEditor.Undo.RegisterCreatedObjectUndo" /> to make the creation undoable and set <see cref="UnityEditor.Selection.activeObject" /> to the newly created object. Also note that in order for a menu item in "GameObject/" to be propagated to the hierarchy Create dropdown and hierarchy context menu, it must be grouped with the other GameObject creation menu items. This can be achieved by setting its priority to 10 (see example below). Note that for legacy purposes MenuItems in "GameObject/Create Other" with no explicit priority set will receive a priority of 10 instead of the default 1000 - we encourage using a more descriptive category name than "Create Other" and explicitly setting the priority to 10.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PreferenceItem">
      <summary>
        <para>The PreferenceItem attribute allows you to add preferences sections to the Preferences Window.</para>
        <para>The PreferenceItem attribute turns any static function into an OnGUI callback. Only static functions can use the PreferenceItem attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetModificationProcessor.IsOpenForEdit(System.String,System.String)">
      <summary>
        <para>This is called by Unity when inspecting an asset to determine if an editor should be disabled.</para>
        <para>This can also be called by custom editor scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetModificationProcessor.OnWillCreateAsset(System.String)">
      <summary>This is called by Unity when it is about to create an asset not imported by the user, eg. ".meta" files.</summary>
    </member>
    <member name="M:UnityEditor.AssetModificationProcessor.OnWillDeleteAsset(System.String,UnityEditor.RemoveAssetOptions)">
      <summary>
        <para>This is called by Unity when it is about to delete an asset from disk.</para>
        <para>If this is implemented, it allows you to delete the asset yourself. Deletion of a file can be prevented by returning AssetDeleteResult.FailedDelete You should not call any Unity AssetDatabase api from within this callback, preferably keep to file operations or VCS apis.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetModificationProcessor.OnWillMoveAsset(System.String,System.String)">
      <summary>
        <para>This is called by Unity when it is about to move an asset on disk.</para>
        <para>If this is implemented, it allows you to move the asset yourself but do remember to return the correct enum or do some other processing and let Unity move the file The moving of the asset can be prevented by returning AssetMoveResult.FailedMove You should not call any Unity AssetDatabase api from within this callback, preferably keep to file operations or VCS apis.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetModificationProcessor.OnWillSaveAssets(System.String[])">
      <summary>
        <para>This is called by Unity when it is about to write serialized assets or scene files to disk.</para>
        <para>If it is implemented, it allows you to override which files are written by returning an array containing a subset of the pathnames which have been passed by Unity. Note that this function is static.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.enabled">
      <summary>Global boolean for enabling or disabling the advertisement feature.</summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.initializeOnStartup">
      <summary>Controls if the advertisement system should be initialized immediately on startup.</summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.testMode">
      <summary>Controls if testing advertisements are used instead of production advertisements.</summary>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.GetGameId(UnityEngine.RuntimePlatform)">
      <summary>Gets the game identifier specified for a runtime platform.</summary>
      <returns>The platform specific game identifier.</returns>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.IsPlatformEnabled(UnityEngine.RuntimePlatform)">
      <summary>Returns if a specific platform is enabled.</summary>
      <returns>Boolean for the platform.</returns>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.SetGameId(UnityEngine.RuntimePlatform,System.String)">
      <summary>Sets the game identifier for the specified platform.</summary>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.SetPlatformEnabled(UnityEngine.RuntimePlatform,System.Boolean)">
      <summary>Enable the specific platform.</summary>
    </member>
    <member name="P:UnityEditor.AI.NavMeshBuilder.isRunning">
      <summary>Returns true if an asynchronous build is still running.</summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMesh">
      <summary>Build the Navmesh.</summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMeshAsync">
      <summary>Build the Navmesh Asyncronously.</summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMeshForMultipleScenes(System.String[])">
      <summary>
        <para>Builds the combined navmesh for the contents of multiple scenes.</para>
        <para>Loads all the scenes by path and then builds the combined navmesh data. The resulting navmesh data is stored in a single file. The navmesh file path is identical to the default path for the first scene in the array – e.g. "Assets/Scene1/NavMesh.asset". The navmesh data is shared between all the scenes specified. Note that your current scene will be saved before, and restored after, the build process. Additionally all scenes passed to this method will be saved in order to reference the combined navmesh data.</para>
      </summary>
      <param name="paths">Array of paths to scenes that are used for building the navmesh.</param>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.Cancel">
      <summary>Cancel Navmesh construction.</summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.ClearAllNavMeshes">
      <summary>Clear all Navmeshes.</summary>
    </member>
    <member name="P:UnityEditor.Analytics.AnalyticsSettings.enabled">
      <summary>This Boolean field will cause the Analytics feature in Unity to be enabled if true, or disabled if false.</summary>
    </member>
    <member name="P:UnityEditor.Analytics.AnalyticsSettings.testMode">
      <summary>
        <para>Set to true for testing Analytics integration only within the Editor.</para>
        <para>If set to true, <c>testMode</c> will cause Analytics events to be flushed immediately by bypassing the local caching (supported only in the Editor). Use this mode to see Analytics events in the Validator.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimatedValues.AnimBool.faded">
      <summary>Retuns the float value of the tween.</summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(UnityEngine.Events.UnityAction)">
      <summary>Constructor.</summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean,UnityEngine.Events.UnityAction)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.Fade(System.Single,System.Single)">
      <summary>Returns a value between from and to depending on the current value of the bools animation.</summary>
      <param name="from">Value to lerp from.</param>
      <param name="to">Value to lerp to.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.GetValue">
      <summary>Type specific implementation of BaseAnimValue_1.GetValue.</summary>
      <returns>Current value.</returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single,UnityEngine.Events.UnityAction)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.GetValue">
      <summary>Type specific implementation of BaseAnimValue_1.GetValue.</summary>
      <returns>Current Value.</returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion,UnityEngine.Events.UnityAction)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.GetValue">
      <summary>Type specific implementation of BaseAnimValue_1.GetValue.</summary>
      <returns>Current Value.</returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3,UnityEngine.Events.UnityAction)">
      <summary>Constructor.</summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.GetValue">
      <summary>Type specific implementation of BaseAnimValue_1.GetValue.</summary>
      <returns>Current Value.</returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue``1.BeginAnimating``1(``0,``0)">
      <summary>Begin an animation moving from the start value to the target value.</summary>
      <param name="newTarget">Target value.</param>
      <param name="newStart">Start value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue``1.GetValue``1">
      <summary>Abstract function to be overridden in derived types. Should return the current value of the animated value.</summary>
      <returns>Current Value.</returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue``1.StopAnim``1(``0)">
      <summary>Stop the animation and assign the given value.</summary>
      <param name="newValue">Value to assign.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.mode">
      <summary>The mode of the condition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.parameter">
      <summary>The name of the parameter used in the condition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.threshold">
      <summary>The AnimatorParameter's threshold value for the condition to be true.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.layers">
      <summary>
        <para>The layers in the controller.</para>
        <para>It's important to note that the <see cref="UnityEditor.Animations.AnimatorControllerLayer" /> are returned as a copy. The array should be set back into the property when changed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.parameters">
      <summary>
        <para>Parameters are used to communicate between scripting and the controller. They are used to drive transitions and blendtrees for example.</para>
        <para>It's important to note that the AnimatorControllerParameters are returned as a copy. The array should be set back into the property when changed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour(System.Type,UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState for layer layerIndex. This function should be used when you are dealing with synchronized layer and would like to add a state machine behaviour on a synchronized layer. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveEffectiveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour``1(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState for layer layerIndex. This function should be used when you are dealing with synchronized layer and would like to add a state machine behaviour on a synchronized layer. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveEffectiveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(System.String)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="name">The name of the Layer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(UnityEditor.Animations.AnimatorControllerLayer)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion)">
      <summary>
        <para>Utility function that creates a new state with the motion in it.</para>
        <para>The state asset that is created is added as a sub asset of the state machine to which it is added. This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion,System.Int32)">
      <summary>
        <para>Utility function that creates a new state with the motion in it.</para>
        <para>The state asset that is created is added as a sub asset of the state machine to which it is added. This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
      <param name="layerIndex">The layer where the Motion will be added.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(System.String,UnityEngine.AnimatorControllerParameterType)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
        <para>An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(UnityEngine.AnimatorControllerParameter)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
        <para>An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="paramater">The parameter to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateBlendTreeInController(System.String,UnityEditor.Animations.BlendTree@)">
      <summary>
        <para>Creates a BlendTree in a new AnimatorState.</para>
        <para>The BlendTree will be a sub asset of the AnimatorController. This function pushes an Undo operation.</para>
      </summary>
      <param name="name">The name of the BlendTree.</param>
      <param name="tree">The created BlendTree.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateBlendTreeInController(System.String,UnityEditor.Animations.BlendTree@,System.Int32)">
      <summary>
        <para>Creates a BlendTree in a new AnimatorState.</para>
        <para>The BlendTree will be a sub asset of the AnimatorController. This function pushes an Undo operation.</para>
      </summary>
      <param name="name">The name of the BlendTree.</param>
      <param name="tree">The created BlendTree.</param>
      <param name="layerIndex">The index where the BlendTree will be created.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetBehaviours``1">
      <summary>Returns all StateMachineBehaviour that match type <c>T</c> or are derived from <c>T</c>.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveBehaviours(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>Gets the effective state machine behaviour list for the AnimatorState. Behaviours are either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get Behaviour list that is effectively used.</summary>
      <param name="state">The AnimatorState which we want the Behaviour list.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState)">
      <summary>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueLayerName(System.String)">
      <summary>Creates a unique name for the layers.</summary>
      <param name="name">The desired name of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueParameterName(System.String)">
      <summary>Creates a unique name for the parameter.</summary>
      <param name="name">The desired name of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveLayer(System.Int32)">
      <summary>
        <para>Utility function to remove a layer from the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveParameter(System.Int32)">
      <summary>
        <para>Utility function to remove a parameter from the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveBehaviours(UnityEditor.Animations.AnimatorState,System.Int32,UnityEngine.StateMachineBehaviour[])">
      <summary>Sets the effective state machine Behaviour list for the AnimatorState. The Behaviour list is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Behaviour list that is effectively used.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion,System.Int32)">
      <summary>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
      <param name="layerIndex">The layer to set the Motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPath(System.String)">
      <summary>
        <para>Creates an AnimatorController at the given path.</para>
        <para>An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="path">The path where the AnimatorController asset will be created.</param>
      <returns>The created AnimationController or null if an error occured.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPathWithClip(System.String,UnityEngine.AnimationClip)">
      <summary>
        <para>Creates an AnimatorController at the given path, and automatically create an AnimatorLayer with an AnimatorStateMachine that will add a State with the AnimationClip in it.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="path">The path where the AnimatorController will be created.</param>
      <param name="clip">The default clip that will be played by the AnimatorController.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateStateMachineBehaviour(UnityEditor.MonoScript)">
      <summary>
        <para>This function will create a StateMachineBehaviour instance based on the class define in this script.</para>
        <para>This function will validate that the monoscript is a valid statemachine behaviour, the class must be a sub class of StateMachineBehaviour and shouldn't be a generic.</para>
      </summary>
      <param name="script">MonoScript class to instantiate.</param>
      <returns>Returns instance id of created object, returns 0 if something is not valid.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.FindStateMachineBehaviourContext(UnityEngine.StateMachineBehaviour)">
      <summary>
        <para>Use this function to retrieve the owner of this behaviour.</para>
        <para>Please note that this function is very slow. It is not recommended to use this function every frame.</para>
      </summary>
      <param name="behaviour">The State Machine Behaviour to get context for.</param>
      <returns>Returns the State Machine Behaviour edition context.</returns>
      <seealso cref="T:UnityEditor.Animations.StateMachineBehaviourContext" />
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.avatarMask">
      <summary>The AvatarMask that is used to mask the animation on the given layer.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.blendingMode">
      <summary>The blending mode used by the layer. It is not taken into account for the first layer.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.defaultWeight">
      <summary>The default blending weight that the layers has. It is not taken into account for the first layer.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.iKPass">
      <summary>When active, the layer will have an IK pass when evaluated. It will trigger an OnAnimatorIK callback.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.name">
      <summary>The name of the layer.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.stateMachine">
      <summary>
        <para>The state machine for the layer.</para>
        <para>When using Synced Layer, this state machine is overridden by the state machine of the synced layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerAffectsTiming">
      <summary>When active, the layer will take control of the duration of the Synced Layer.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerIndex">
      <summary>
        <para>Specifies the index of the Synced Layer.</para>
        <para>When set to -1 there is no Synced Layer and the layer uses its own AnimatorStateMachine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideBehaviours(UnityEditor.Animations.AnimatorState)">
      <summary>Gets the override behaviour list for the state on the given layer.</summary>
      <param name="state">The state which we want to get the behaviour list.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideMotion(UnityEditor.Animations.AnimatorState)">
      <summary>Gets the override motion for the state on the given layer.</summary>
      <param name="state">The state which we want to get the motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.SetOverrideBehaviours(UnityEditor.Animations.AnimatorState,UnityEngine.StateMachineBehaviour[])">
      <summary>Sets the override behaviour list for the state on the given layer.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.SetOverrideMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>Sets the override motion for the state on the given layer.</summary>
      <param name="state">The state which we want to set the motion.</param>
      <param name="motion">The motion that will be set.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.behaviours">
      <summary>The Behaviour list assigned to this state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffset">
      <summary>
        <para>Offset at which the animation loop starts. Useful for synchronizing looped animations. Units is normalized time.</para>
        <para>AnimationClip loop time needs to be checked to use cycle offset, otherwise cycle offset won't have any effect. Valid range is 0 to 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameter">
      <summary>The animator controller parameter that drives the cycle offset value.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameterActive">
      <summary>Define if the <c>cycle offset</c> value is driven by an Animator controller parameter or by the value set in the editor.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.iKOnFeet">
      <summary>Should Foot IK be respected for this state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirror">
      <summary>Should the state be mirrored.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameter">
      <summary>The animator controller parameter that drives the mirror value.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameterActive">
      <summary>Define if the <c>mirror</c> value is driven by an Animator controller parameter or by the value set in the editor.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.motion">
      <summary>The motion assigned to this state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.nameHash">
      <summary>The hashed name of the state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speed">
      <summary>
        <para>The default speed of the motion.</para>
        <para>1.0 is base speed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameter">
      <summary>The animator controller parameter that drives the speed value.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameterActive">
      <summary>Define if the <c>speed</c> value is driven by an Animator controller parameter or by the value set in the editor.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.tag">
      <summary>A tag can be used to identify a state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.transitions">
      <summary>The transitions that are going out of the state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.writeDefaultValues">
      <summary>Whether or not the AnimatorStates writes back the default values for properties that are not animated by its Motion.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <returns>The <see cref="UnityEditor.Animations.AnimatorStateTransition" /> that was added.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition(System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <returns>The <see cref="UnityEditor.Animations.AnimatorStateTransition" /> that was added.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour``1">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
        <para>The transition asset that is created is added as a sub asset of the state. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
        <para>The transition asset that is created is added as a sub asset of the state. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationStateMachine">The destination state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationStateMachine">The destination state machine.</param>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to add an outgoing transition.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The transition to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.RemoveTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove a transition from the state.</para>
        <para>If the transition is a sub asset of the state, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">Transition to remove.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStatePosition">
      <summary>The position of the AnyState node.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStateTransitions">
      <summary>
        <para>The list of AnyState transitions.</para>
        <para>Its important that AnyStateTransitions are added to the root state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.behaviours">
      <summary>The Behaviour list assigned to this state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.defaultState">
      <summary>The state that the state machine will be in when it starts.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryPosition">
      <summary>The position of the entry node.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryTransitions">
      <summary>The list of entry transitions in the state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.exitPosition">
      <summary>The position of the exit node.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.parentStateMachinePosition">
      <summary>The position of the parent state machine node. Only valid when in a hierachic state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.stateMachines">
      <summary>The list of sub state machines.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.states">
      <summary>The list of states.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
        <para>The transition asset that is created is added as a sub asset of the state machine. Its important that AnyStateTransitions are added to the root state machine. AnyStateTranistions added to a sub state machine will be discarded at runtime. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
        <para>The transition asset that is created is added as a sub asset of the state machine. Its important that AnyStateTransitions are added to the root state machine. AnyStateTranistions added to a sub state machine will be discarded at runtime. This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationStateMachine">The destination statemachine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="destinationState">The destination <see cref="UnityEditor.Animations.AnimatorState" /> state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="destinationStateMachine">The destination <see cref="UnityEditor.Animations.AnimatorStateMachine" /> state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>The state asset that is created is added as a sub asset of the state machine. The API returns an <see cref="UnityEditor.Animations.AnimatorState" /> which you can use to add transitions. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <returns>The AnimatorState that was created for this state.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>The state asset that is created is added as a sub asset of the state machine. The API returns an <see cref="UnityEditor.Animations.AnimatorState" /> which you can use to add transitions. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <param name="position">The position of the state node.</param>
      <returns>The AnimatorState that was created for this state.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(UnityEditor.Animations.AnimatorState,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="state">The state to add.</param>
      <param name="position">The position of the state node.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>The state machine asset that is created is added as a sub asset of the state machine. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <returns>The newly created <see cref="UnityEditor.Animations.AnimatorStateMachine" /> state machine.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>The state machine asset that is created is added as a sub asset of the state machine. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <param name="position">The position of the state machine node.</param>
      <returns>The newly created <see cref="UnityEditor.Animations.AnimatorStateMachine" /> state machine.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(UnityEditor.Animations.AnimatorStateMachine,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="stateMachine">The state machine to add.</param>
      <param name="position">The position of the state machine node.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorStateMachine. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour``1">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorStateMachine. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineExitTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state. This function pushes an Undo operation.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <returns>The <see cref="UnityEditor.Animations.AnimatorTransition" /> transition that was created.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
      <returns>The <see cref="UnityEditor.Animations.AnimatorTransition" /> transition that was created.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state. An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationState">The destination state.</param>
      <returns>The <see cref="UnityEditor.Animations.AnimatorTransition" /> transition that was created.</returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.GetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>Gets the list of all outgoing state machine transitions from given state machine.</summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateMachineName(System.String)">
      <summary>Makes a unique state machine name in the context of the parent state machine.</summary>
      <param name="name">Desired name for the state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateName(System.String)">
      <summary>Makes a unique state name in the context of the parent state machine.</summary>
      <param name="name">Desired name for the state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveAnyStateTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove an AnyState transition from the state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The AnyStat transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveEntryTransition(UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an entry transition from the state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveState(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to remove a state from the state machine.</para>
        <para>If the state is a sub asset of the state machine, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="state">The state to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachine(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to remove a state machine from its parent state machine.</para>
        <para>If the state machine is a sub asset of the parent state machine, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="stateMachine">The state machine to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an outgoing transition from source state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="transition">The transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.SetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition[])">
      <summary>Sets the list of all outgoing state machine transitions from given state machine.</summary>
      <param name="transitions">The outgoing transitions.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.canTransitionToSelf">
      <summary>Set to true to allow or disallow transition to self during AnyState transition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.duration">
      <summary>
        <para>The duration of the transition.</para>
        <para>The duration is in normalized time of the source state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.exitTime">
      <summary>The normalized time of the source state when the condition is true.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasExitTime">
      <summary>When active the transition will have an exit time condition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasFixedDuration">
      <summary>When active the transition duration will have a fixed duration.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.interruptionSource">
      <summary>Which AnimatorState transitions can interrupt the Transition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.offset">
      <summary>
        <para>The time at which the destination state will start.</para>
        <para>The offset is in normalized time of the destination state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.orderedInterruption">
      <summary>
        <para>The Transition can be interrupted by a transition that has a higher priority.</para>
        <para>Transition priority is based on the order that transitions are listed in the source AnimatorState.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateTransition.#ctor">
      <summary>Creates a new animator state transition.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransition.#ctor">
      <summary>Creates a new animator transition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.conditions">
      <summary>
        <para>
          <see cref="UnityEditor.Animations.AnimatorCondition" /> conditions that need to be met for a transition to happen.</para>
        <para>Note that this is an array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationState">
      <summary>The destination state of the transition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationStateMachine">
      <summary>The destination state machine of the transition.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.isExit">
      <summary>Is the transition destination the exit of the current state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.mute">
      <summary>Mutes the transition. The transition will never occur.</summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.solo">
      <summary>
        <para>Mutes all other transitions in the source state.</para>
        <para>Many transitions can be soloed at the same time.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.AddCondition(UnityEditor.Animations.AnimatorConditionMode,System.Single,System.String)">
      <summary>
        <para>Utility function to add a condition to a transition.</para>
        <para>An example showing usage of this API can be found at the <see cref="UnityEditor.Animations.AnimatorController" /> page.</para>
      </summary>
      <param name="mode">The <see cref="UnityEditor.Animations.AnimatorCondition" /> mode of the condition.</param>
      <param name="threshold">The threshold value of the condition.</param>
      <param name="parameter">The name of the parameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.RemoveCondition(UnityEditor.Animations.AnimatorCondition)">
      <summary>
        <para>Utility function to remove a condition from the transition.</para>
        <para>This functions pushes an Undo operation.</para>
      </summary>
      <param name="condition">The condition to remove.</param>
    </member>
    <member name="P:UnityEditor.Animations.AvatarMask.transformCount">
      <summary>Number of transforms.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.#ctor">
      <summary>Creates a new AvatarMask.</summary>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetHumanoidBodyPartActive(UnityEditor.Animations.AvatarMaskBodyPart)">
      <summary>Returns true if the humanoid body part at the given index is active.</summary>
      <param name="index">The index of the humanoid body part.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetTransformActive(System.Int32)">
      <summary>Returns true if the transform at the given index is active.</summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetTransformPath(System.Int32)">
      <summary>Returns the path of the transform at the given index.</summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetHumanoidBodyPartActive(UnityEditor.Animations.AvatarMaskBodyPart,System.Boolean)">
      <summary>Sets the humanoid body part at the given index to active or not.</summary>
      <param name="index">The index of the humanoid body part.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetTransformActive(System.Int32,System.Boolean)">
      <summary>Sets the tranform at the given index to active or not.</summary>
      <param name="index">The index of the transform.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetTransformPath(System.Int32,System.String)">
      <summary>Sets the path of the transform at the given index.</summary>
      <param name="index">The index of the transform.</param>
      <param name="path">The path of the transform.</param>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameter">
      <summary>Parameter that is used to compute the blending weight of the childs in 1D blend trees or on the X axis of a 2D blend tree.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameterY">
      <summary>Parameter that is used to compute the blending weight of the childs on the Y axis of a 2D blend tree.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendType">
      <summary>The Blending type can be either 1D or different types of 2D.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.children">
      <summary>A copy of the list of the blend tree child motions.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.maxThreshold">
      <summary>Sets the maximum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.minThreshold">
      <summary>Sets the minimum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.</summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.useAutomaticThresholds">
      <summary>
        <para>When active, the children's thresholds are automatically spread between 0 and 1.</para>
        <para>Active by default and only valid for 1D Blendtrees.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="position">The position of the child. When using 2D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,System.Single)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(System.Single)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
        <para>The blend tree asset that is created is added as a sub asset of the blend tree. This function pushes an Undo operation.</para>
      </summary>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
        <para>The blend tree asset that is created is added as a sub asset of the blend tree. This function pushes an Undo operation.</para>
      </summary>
      <param name="position">The position of the child. When using 2D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.RemoveChild(System.Int32)">
      <summary>
        <para>Utility function to remove the child of a blend tree.</para>
        <para>If the blend tree is a sub asset of the blend tree, it will be deleted. This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the blend tree to remove.</param>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.position">
      <summary>The position the the state node in the context of its parent state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.state">
      <summary>The state.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.position">
      <summary>The position the the state machine node in the context of its parent state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.stateMachine">
      <summary>The state machine.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.cycleOffset">
      <summary>Normalized time offset of the child.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.directBlendParameter">
      <summary>The parameter used by the child when used in a BlendTree of type BlendTreeType.Direct.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.mirror">
      <summary>
        <para>Mirror of the child.</para>
        <para>Only valid when using humanoid animations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.motion">
      <summary>The motion itself.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.position">
      <summary>The position of the child. Used in 2D blend trees.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.threshold">
      <summary>The threshold of the child. Used in 1D blend trees.</summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.timeScale">
      <summary>The relative speed of the child.</summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorController">
      <summary>The <see cref="UnityEditor.Animations.AnimatorController" /> that owns this state machine behaviour.</summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorObject">
      <summary>The object that owns this state machine behaviour. Could be an <see cref="UnityEditor.Animations.AnimatorState" /> or <see cref="UnityEditor.Animations.AnimatorStateMachine" />.</summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.layerIndex">
      <summary>The animator's layer index that owns this state machine behaviour.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.If">
      <summary>The condition is true when the parameter value is true.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.IfNot">
      <summary>The condition is true when the parameter value is false.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Greater">
      <summary>The condition is true when parameter value is greater than the threshold.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Less">
      <summary>The condition is true when the parameter value is less than the threshold.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Equals">
      <summary>The condition is true when parameter value is equal to the threshold.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.NotEqual">
      <summary>The condition is true when the parameter value is not equal to the threshold.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Override">
      <summary>Animations overrides to the previous layers.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Additive">
      <summary>
        <para>Animations are added to the previous layers.</para>
        <para>The additive animation is based on the offset from the 1st frame of the animation to its current frame.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.Root">
      <summary>The Root.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.Body">
      <summary>
        <para>The Body.</para>
        <para>Including Hips, Spine and Chest transform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.Head">
      <summary>
        <para>The Head.</para>
        <para>Including Neck and Head transform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LeftLeg">
      <summary>
        <para>The Left Leg.</para>
        <para>Including Left Upper Leg, Left Lower Leg and Left Foot.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.RightLeg">
      <summary>
        <para>The Right Leg.</para>
        <para>Including Right Upper Leg, Right Lower Leg and Right Foot.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LeftArm">
      <summary>
        <para>The Left Arm.</para>
        <para>Including Left Shoulder, Left Upper Arm, Left Lower Arm and Left Hand.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.RightArm">
      <summary>
        <para>The Right Arm.</para>
        <para>Including Right Shoulder, Right Upper Arm, Right Lower Arm and Right Hand.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LeftFingers">
      <summary>
        <para>Left Fingers.</para>
        <para>Inluding all Left Fingers transforms.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.RightFingers">
      <summary>
        <para>Right Fingers.</para>
        <para>Inluding all Right Fingers transforms.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LeftFootIK">
      <summary>Left Foot IK.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.RightFootIK">
      <summary>Right Foot IK.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LeftHandIK">
      <summary>Left Hand IK.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.RightHandIK">
      <summary>Right Hand IK.</summary>
    </member>
    <member name="F:UnityEditor.Animations.AvatarMaskBodyPart.LastBodyPart">
      <summary>Total number of body parts.</summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Simple1D">
      <summary>Basic blending using a single parameter.</summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.SimpleDirectional2D">
      <summary>
        <para>Best used when your motions represent different directions, such as "walk forward", "walk backward", "walk left", and "walk right", or "aim up", "aim down", "aim left", and "aim right".</para>
        <para>Optionally a single motion at position (0, 0) can be included, such as "idle" or "aim straight". In the Simple Directional type there should not be multiple motions in the same direction, such as "walk forward" and "run forward".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformDirectional2D">
      <summary>
        <para>This blend type is used when your motions represent different directions, however you can have multiple motions in the same direction, for example "walk forward" and "run forward".</para>
        <para>In the Freeform Directional type the set of motions should always include a single motion at position (0, 0), such as "idle".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformCartesian2D">
      <summary>
        <para>Best used when your motions do not represent different directions.</para>
        <para>With Freeform Cartesian your X parameter and Y parameter can represent different concepts, such as angular speed and linear speed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Direct">
      <summary>
        <para>Direct control of blending weight for each node.</para>
        <para>Each blending weight can be controlled by a diferent parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.None">
      <summary>The Transition cannot be interrupted. Formely know as Atomic.</summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Source">
      <summary>The Transition can be interrupted by transitions in the source AnimatorState.</summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Destination">
      <summary>The Transition can be interrupted by transitions in the destination AnimatorState.</summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.SourceThenDestination">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
        <para>The transitions in the source AnimatorState have priority.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.DestinationThenSource">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
        <para>The transitions in the destination AnimatorState have priority.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The <c>callbackOrder</c> parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor(System.Int32)">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The <c>callbackOrder</c> parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
      <param name="callbackOrder">Order in which separate attributes will be processed.</param>
    </member>
    <member name="P:UnityEditor.CrashReporting.CrashReportingSettings.captureEditorExceptions">
      <summary>This Boolean field will cause the CrashReporting feature in Unity to capture exceptions that occur in the editor while running in Play mode if true, or ignore those errors if false.</summary>
    </member>
    <member name="P:UnityEditor.CrashReporting.CrashReportingSettings.enabled">
      <summary>This Boolean field will cause the CrashReporting feature in Unity to be enabled if true, or disabled if false.</summary>
    </member>
    <member name="M:UnityEditor.EditorTests.Batch.RunTests(UnityEditor.EditorTests.ITestRunnerCallback)">
      <summary>Execute editor tests run.</summary>
      <param name="testRunnerCallback">Test runner callback.</param>
    </member>
    <member name="M:UnityEditor.EditorTests.Batch.RunTests(UnityEditor.EditorTests.ITestRunnerCallback,System.String[],System.String[])">
      <summary>Execute editor tests run.</summary>
      <param name="testRunnerCallback">Test runner callback.</param>
      <param name="nameFilter">Test names to run.</param>
      <param name="categoryFilter">Categories to run.</param>
    </member>
    <member name="M:UnityEditor.EditorTests.Batch.RunTestsInRunnerWindow">
      <summary>Run tests in the editor tests runner window.</summary>
    </member>
    <member name="M:UnityEditor.EditorTests.Batch.RunTestsInRunnerWindow(System.String[])">
      <summary>Run tests in the editor tests runner window.</summary>
      <param name="tests">Names of the tests to run.</param>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.duration">
      <summary>Duration of the test in seconds.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.executed">
      <summary>Whether the test was executed.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.fullName">
      <summary>Full name of the test (includes namespace).</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.id">
      <summary>Id of the test.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.isIgnored">
      <summary>Whether the test should be ignored (and not executed).</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.isSuccess">
      <summary>Whether the test completed successfully.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.logs">
      <summary>Logs from the test run.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.message">
      <summary>Message from the test.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.name">
      <summary>Name of the test (without namespace).</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.resultState">
      <summary>The result.</summary>
    </member>
    <member name="P:UnityEditor.EditorTests.ITestResult.stackTrace">
      <summary>Stacktrace from the test run.</summary>
    </member>
    <member name="M:UnityEditor.EditorTests.ITestRunnerCallback.RunFinished">
      <summary>The run was finished.</summary>
    </member>
    <member name="M:UnityEditor.EditorTests.ITestRunnerCallback.RunFinishedException(System.Exception)">
      <summary>The run was interrupted by an exception.</summary>
      <param name="exception">The exception that was raised.</param>
    </member>
    <member name="M:UnityEditor.EditorTests.ITestRunnerCallback.RunStarted(System.String,System.Int32)">
      <summary>The run has started.</summary>
      <param name="suiteName">The name of the suite that is being run.</param>
      <param name="testCount">The number of tests that will be run.</param>
    </member>
    <member name="M:UnityEditor.EditorTests.ITestRunnerCallback.TestFinished(UnityEditor.EditorTests.ITestResult)">
      <summary>A test has been finished.</summary>
      <param name="testResult">The result of the test.</param>
    </member>
    <member name="M:UnityEditor.EditorTests.ITestRunnerCallback.TestStarted(System.String)">
      <summary>A test has been started.</summary>
      <param name="testName">The name of the test.</param>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Inconclusive">
      <summary>The test result is inconclusive.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.NotRunnable">
      <summary>The test is not runnable.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Skipped">
      <summary>The test was skipped.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Ignored">
      <summary>The test was ignored.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Success">
      <summary>The test succeeded.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Failure">
      <summary>The test finished with a failure.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Error">
      <summary>The test finished with an error.</summary>
    </member>
    <member name="F:UnityEditor.EditorTests.TestResultState.Cancelled">
      <summary>The test was cancelled.</summary>
    </member>
    <member name="M:UnityEditor.EditorTestsRunner.EditorTestsWithLogParser.ExpectLogLine(System.String)">
      <summary>Expect a log message that matches the parameter.</summary>
      <param name="message">The expected log message.</param>
    </member>
    <member name="M:UnityEditor.EditorTestsRunner.EditorTestsWithLogParser.ExpectLogLineRegex(System.String)">
      <summary>Expect a log message that matches the regular expression pattern.</summary>
      <param name="pattern">The expected regex pattern.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.#ctor">
      <summary>Creates a new instance of PBXProject class.</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddBuildProperty(System.String,System.String,System.String)">
      <summary>Adds a value to build property in all build configurations for the specified target(s).</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="name">The name of the build property.</param>
      <param name="value">The value of the build property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddBuildPropertyForConfig(System.String,System.String,System.String)">
      <summary>Adds a value to build property for the specific build configuration.</summary>
      <param name="configGuid">The GUID of the build configuration as returned by BuildConfigByName().</param>
      <param name="name">The name of the build property.</param>
      <param name="value">The value of the build property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddFile(System.String,System.String)">
      <summary>
        <para>Adds file to the project.</para>
        <para>To add the file to the list of files to build, pass the returned value to AddFileToBuild.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <param name="projectPath">The project path of the file.</param>
      <returns>The GUID of the added file.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddFile(System.String,System.String,UnityEditor.iOS.Xcode.PBXSourceTree)">
      <summary>
        <para>Adds file to the project.</para>
        <para>To add the file to the list of files to build, pass the returned value to AddFileToBuild.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <param name="projectPath">The project path of the file.</param>
      <param name="sourceTree">The source tree the path is relative to. By default it's <see cref="UnityEditor.iOS.Xcode.PBXSourceTree.Group" />.</param>
      <returns>The GUID of the added file.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddFileToBuild(System.String,System.String)">
      <summary>Configures file for building for the given target.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="fileGuid">The file guid returned by AddFile.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddFileToBuildWithFlags(System.String,System.String,System.String)">
      <summary>Configures file for building for the given target with specific compiler flags.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="fileGuid">The file guid returned by AddFile.</param>
      <param name="compileFlags">Compile flags to use.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.AddFrameworkToProject(System.String,System.String,System.Boolean)">
      <summary>Adds a framework dependency for the specified target.</summary>
      <param name="targetGuid">The GUID of the build configuration as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="framework">The name of the framework. The extension must be ".framework".</param>
      <param name="weak">True if the framework is required, false if optional.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.BuildConfigByName(System.String,System.String)">
      <summary>Returns the GUID of build configuration with the given name for the specific target. null is returned if such configuration does not exist.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="name">The name of the build configuration.</param>
      <returns>The GUID of the build configuration or null if it does not exist.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ContainsFileByProjectPath(System.String)">
      <summary>Checks if the project contains a file with the given project path.</summary>
      <param name="path">The project path of the file.</param>
      <returns>Returns true if the project contains the file, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ContainsFileByRealPath(System.String)">
      <summary>
        <para>Checks if the project contains a file with the given physical path.</para>
        <para>The version without source tree argument matches paths of all known files. Use this overload with care.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <returns>Returns true if the project contains the file, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ContainsFileByRealPath(System.String,UnityEditor.iOS.Xcode.PBXSourceTree)">
      <summary>
        <para>Checks if the project contains a file with the given physical path.</para>
        <para>The version without source tree argument matches paths of all known files. Use this overload with care.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <param name="sourceTree">The source tree pah is relative to.</param>
      <returns>Returns true if the project contains the file, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.FindFileGuidByProjectPath(System.String)">
      <summary>Finds file GUID by project path.</summary>
      <param name="path">The project path of the file.</param>
      <returns>The file GUID or null if the file could not be found.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.FindFileGuidByRealPath(System.String,UnityEditor.iOS.Xcode.PBXSourceTree)">
      <summary>
        <para>Finds file GUID by physical path.</para>
        <para>The version without source tree argument matches paths of all known files. Use this overload with care.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <param name="sourceTree">The source tree path is relative to.</param>
      <returns>The file GUID or null if the file could not be found.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.FindFileGuidByRealPath(System.String)">
      <summary>
        <para>Finds file GUID by physical path.</para>
        <para>The version without source tree argument matches paths of all known files. Use this overload with care.</para>
      </summary>
      <param name="path">The physical path of the file.</param>
      <returns>The file GUID or null if the file could not be found.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.GetCompileFlagsForFile(System.String,System.String)">
      <summary>Returns compile flags set for the specific file.</summary>
      <param name="targetGuid">The GUID of the target as returned by [[TargetGuidByName()]].</param>
      <param name="fileGuid">The file GUID.</param>
      <returns>The compile flags for the specified file.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ReadFromFile(System.String)">
      <summary>
        <para>Reads the project from a file identified by the given path.</para>
        <para>Current contents of the project are discarded.</para>
      </summary>
      <param name="path">Path of the file.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ReadFromStream(TextReader)">
      <summary>
        <para>Reads the project from the given text reader.</para>
        <para>Current contents of the project are discarded.</para>
      </summary>
      <param name="sr">The project contents.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.ReadFromString(System.String)">
      <summary>
        <para>Reads the project from the given string.</para>
        <para>Current contents of the project are discarded.</para>
      </summary>
      <param name="src">The project contents.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.RemoveFile(System.String)">
      <summary>
        <para>Removes the given file from project.</para>
        <para>Removes all references to the file in the project.</para>
      </summary>
      <param name="fileGuid">The file GUID.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.RemoveFileFromBuild(System.String,System.String)">
      <summary>Removes given file from the list of files to build for the given target.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="fileGuid">The GUID of the file to remove.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.RemoveFrameworkFromProject(System.String,System.String)">
      <summary>Removes the given framework from the given target build.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="framework">The name of the framework. The extension must be ".framework".</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.SetBuildProperty(System.String,System.String,System.String)">
      <summary>Sets the build property to the given value in all build configurations for the specified targets.</summary>
      <param name="targetGuid">The target GUID as returned by NativeTargetByName().</param>
      <param name="name">The name of the build property.</param>
      <param name="value">The value of the build property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.SetBuildPropertyForConfig(System.String,System.String,System.String)">
      <summary>Sets the build property to the given value in the given build property.</summary>
      <param name="configGuid">The GUID of the build configuration as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.BuildConfigByName" />.</param>
      <param name="name">The name of the build property.</param>
      <param name="value">The value of the build property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.SetCompileFlagsForFile(System.String,System.String)">
      <summary>Sets the compilation flags for the given file in the given target.</summary>
      <param name="targetGuid">The GUID of the target as returned by <see cref="UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName" />.</param>
      <param name="fileGuid">The file guid.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.TargetGuidByName(System.String)">
      <summary>
        <para>Returns the GUID of the native target with the given name.</para>
        <para>In projects produced by Unity the main target has the name "Unity-iPhone".</para>
      </summary>
      <param name="name">The name of the native target.</param>
      <returns>The GUID identifying the native target.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.UpdateBuildProperty(System.String,System.String,System.String[],System.String[])">
      <summary>Adds and removes values from build property in all build configurations for the specified target(s).</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.UpdateBuildPropertyForConfig(System.String,System.String,System.String[],System.String[])">
      <summary>Adds and removes values from build property in the given build configuration.</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.WriteToFile(System.String)">
      <summary>Writes the project contents to the specified file.</summary>
      <param name="path">Path to write the project contents to.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.WriteToStream(TextWriter)">
      <summary>Writes the project contents to the specified text writer.</summary>
      <param name="sw">Text writer to write to.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.WriteToString">
      <summary>Writes the contents of the project to string.</summary>
      <returns>The project contents converted to string.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.GetPBXProjectPath(System.String)">
      <summary>
        <para>Returns the path to PBX project in the given build path.</para>
        <para>Can only be used for Unity-generated projects.</para>
      </summary>
      <param name="buildPath">The project build path.</param>
      <returns>The path of the PBX project.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.GetUnityTargetName">
      <summary>
        <para>Returns the default app target name.</para>
        <para>The returned target name can then be used to retrieve the guid of the target.</para>
      </summary>
      <returns>The default app target name.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.GetUnityTestTargetName">
      <summary>
        <para>Returns the default test target name.</para>
        <para>The returned target name can then be used to retrieve the guid of the test target.</para>
      </summary>
      <returns>The default test target name.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.IsBuildable(System.String)">
      <summary>Checks if a file with the given extension can be built by Xcode.</summary>
      <param name="ext">The extension of the file including the dot.</param>
      <returns>Returns true of the file can be built, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PBXProject.IsKnownExtension(System.String)">
      <summary>Checks if files with the given extension are known to PBXProject.</summary>
      <param name="ext">The extension including the dot.</param>
      <returns>Returns true of the extension is known, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.#ctor">
      <summary>Creates a new plist document instance.</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.ReadFromFile(System.String)">
      <summary>Reads the document from a file identified by the given path.</summary>
      <param name="path">Path of the file.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.ReadFromStream(TextReader)">
      <summary>Reads the project from the given text reader.</summary>
      <param name="tr">The project contents.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.ReadFromString(System.String)">
      <summary>Reads the document from the given string.</summary>
      <param name="text">The project contents.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.WriteToFile(System.String)">
      <summary>Writes the project contents to the specified file.</summary>
      <param name="path">Path to write the document contents to.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.WriteToStream(TextWriter)">
      <summary>Writes the document contents to the specified text writer.</summary>
      <param name="tw">Text writer to write to.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistDocument.WriteToString">
      <summary>Writes the document contents to a string.</summary>
      <returns>The project contents converted to string.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElement.AsArray">
      <summary>
        <para>Convenience method to convert to array element.</para>
        <para>The method is equivalent to <c>(PlistElementArray) el</c>. Throws exception if the element is not <see cref="UnityEditor.iOS.Xcode.PlistElementArray" />.</para>
      </summary>
      <returns>The element as PlistElementArray.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElement.AsBoolean">
      <summary>
        <para>Convenience method to convert to bool.</para>
        <para>The method is equivalent to <c>((PlistElementBoolean) el).value</c>. Throws exception if the element is not <see cref="UnityEditor.iOS.Xcode.PlistElementBoolean" />.</para>
      </summary>
      <returns>The value of the boolean element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElement.AsDict">
      <summary>
        <para>Convenience method to convert to dictionary element.</para>
        <para>The method is equivalent to <c>(PlistElementDict) el</c>. Throws exception if the element is not <see cref="UnityEditor.iOS.Xcode.PlistElementDict" />.</para>
      </summary>
      <returns>The element as PlistElementDict.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElement.AsInteger">
      <summary>
        <para>Convenience method to convert to integer.</para>
        <para>The method is equivalent to <c>((PlistElementInteger) el).value</c>. Throws exception if the element is not <see cref="UnityEditor.iOS.Xcode.PlistElementInteger" />.</para>
      </summary>
      <returns>The value of the integer element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElement.AsString">
      <summary>
        <para>Convenience method to convert to string.</para>
        <para>The method is equivalent to <c>((PlistElementString) el).value</c>. Throws exception if the element is not <see cref="UnityEditor.iOS.Xcode.PlistElementString" />.</para>
      </summary>
      <returns>The value of the string element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.#ctor">
      <summary>Creates new array element.</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.AddArray">
      <summary>
        <para>Convenience method to append new array to values.</para>
        <para>Creates an array element, appends it to the values list and returns the created value.</para>
      </summary>
      <returns>The new array element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.AddBoolean(System.Boolean)">
      <summary>Convenience method to append new boolean element to values.</summary>
      <param name="val">The value of the new boolean element.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.AddDict">
      <summary>
        <para>Convenience method to append new dictionary to values.</para>
        <para>Creates an dictionary element, appends it to the values list and returns the created value.</para>
      </summary>
      <returns>The new dictionary element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.AddInteger(System.Int32)">
      <summary>Convenience method to append new integer element to values.</summary>
      <param name="val">The value of the new integer element.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementArray.AddString(System.String)">
      <summary>Convenience method to append new string element to values.</summary>
      <param name="val">The value of the new string element.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementBoolean.#ctor(System.Boolean)">
      <summary>Creates new boolean element.</summary>
      <param name="v">The value of the element.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.#ctor">
      <summary>Creates new dictionary element.</summary>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.CreateArray(System.String)">
      <summary>Convenience method to set a property to a new array element.</summary>
      <param name="key">The key of the property.</param>
      <returns>The new array element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.CreateDict(System.String)">
      <summary>Convenience method to set a property to a new dictionary element.</summary>
      <param name="key">The key of the property.</param>
      <returns>The new dictionary element.</returns>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.SetBoolean(System.String,System.Boolean)">
      <summary>Convenience method to set a boolean property.</summary>
      <param name="key">The key of the property.</param>
      <param name="val">The value of the property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.SetInteger(System.String,System.Int32)">
      <summary>Convenience method to set an integer property.</summary>
      <param name="key">The key of the property.</param>
      <param name="val">The value of the property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementDict.SetString(System.String,System.String)">
      <summary>Convenience method to set a string property.</summary>
      <param name="key">The key of the property.</param>
      <param name="val">The value of the property.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementInteger.#ctor(System.Int32)">
      <summary>Creates new integer element.</summary>
      <param name="v">The value of the element.</param>
    </member>
    <member name="M:UnityEditor.iOS.Xcode.PlistElementString.#ctor(System.String)">
      <summary>Creates new string element.</summary>
      <param name="v">The value of the element.</param>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Absolute">
      <summary>The file path is absolute path.</summary>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Source">
      <summary>The file path is relative to the project path.</summary>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Group">
      <summary>The file path is relative to the group the file is in.</summary>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Build">
      <summary>The file path is relative to build products path.</summary>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Developer">
      <summary>The file path is relative to the developer directory.</summary>
    </member>
    <member name="F:UnityEditor.iOS.Xcode.PBXSourceTree.Sdk">
      <summary>The file path is relative to SDK path.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.Connection.from">
      <summary>Index into a virtual list of all GC handles, followed by all native objects.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.Connection.to">
      <summary>Index into a virtual list of all GC handles, followed by all native objects.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.isStatic">
      <summary>Is this field static?</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.name">
      <summary>Name of this field.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.offset">
      <summary>
        <para>Offset of this field.</para>
        <para>This offset of this field, from the address of the managed object start (including the object header). If offset is -1, it means this field is a ThreadLocal field. If the field is static, this offset indexes into the <see cref="UnityEditor.MemoryProfiler.TypeDescription.staticFieldBytes" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.typeIndex">
      <summary>The typeindex into <see cref="UnityEditor.MemoryProfiler.PackedMemorySnapshot.typeDescriptions" /> of the type this field belongs to.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.MemorySection.bytes">
      <summary>The actual bytes of the memory dump.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.MemorySection.startAddress">
      <summary>The start address of this piece of memory.</summary>
    </member>
    <member name="M:UnityEditor.MemoryProfiler.MemorySnapshot.RequestNewSnapshot">
      <summary>Requests a new snapshot from the currently connected target of the profiler. Currently only il2cpp-based players are able to provide memory snapshots.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedGCHandle.target">
      <summary>The address of the managed object that the GC handle is referencing.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.connections">
      <summary>
        <para>Connections is an array of from,to pairs that describe which things are keeping which other things alive.</para>
        <para>The indices are indices into a virtual list that first contains all the GC handles, followed by all native objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.gcHandles">
      <summary>All GC handles in use in the memorysnapshot.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.managedHeapSections">
      <summary>
        <para>Array of actual managed heap memory sections.</para>
        <para>A PackedMemorySnapshot actually contains the raw bytes from the managed memory, with the intent of having these bytes analyzed. A managed heap can contain of multiple sections, as it grows dynamically on demand.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeObjects">
      <summary>All native C++ objects that were loaded at time of the snapshot.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeTypes">
      <summary>
        <para>Descriptions of all the C++ unity types the profiled player knows about.</para>
        <para>An array that maps classID's to actual type descriptions of unity C++ objects. Find the description of type with classID 114 at index 114 in this array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.typeDescriptions">
      <summary>Descriptions of all the managed types that were known to the virtual machine when the snapshot was taken.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.virtualMachineInformation">
      <summary>Information about the virtual machine running executing the managade code inside the player.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeType.baseClassId">
      <summary>
        <para>ClassId of the base class of this C++ class.</para>
        <para>The type's own classID can be determined by the type's offset in the <see cref="UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeTypes" /> array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeType.name">
      <summary>Name of this C++ unity type.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.classId">
      <summary>ClassId of this C++ object. Use this classId to index into <see cref="UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeTypes" />.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.hideFlags">
      <summary>The hideFlags this native object has.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.instanceId">
      <summary>InstanceId of this object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isDontDestroyOnLoad">
      <summary>Has this object has been marked as DontDestroyOnLoad?</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isManager">
      <summary>
        <para>Is this native object an internal Unity manager object?</para>
        <para>Unity has several global manager objects that will never be unloaded, and that can keep other objects alive. This property describes if this is such a global manager object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isPersistent">
      <summary>Is this object persistent? (Assets are persistent, objects stored in scenes are persistent, dynamically created objects are not)</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.name">
      <summary>Name of this object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.nativeObjectAddress">
      <summary>The memory address of the native C++ object. This matches the "m_CachedPtr" field of UnityEngine.Object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.size">
      <summary>Size in bytes of this object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.arrayRank">
      <summary>If this is an arrayType, this will return the rank of the array. (1 for a 1-dimensional array, 2 for a 2-dimensional array, etc)</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.assembly">
      <summary>Name of the assembly this type was loaded from.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.baseOrElementTypeIndex">
      <summary>The base type for this type, pointed to by an index into <see cref="UnityEditor.MemoryProfiler.PackedMemorySnapshot.typeDescriptions" />.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.fields">
      <summary>An array containing descriptions of all fields of this type.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.isArray">
      <summary>Is this type an array?</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.isValueType">
      <summary>Is this type a value type? (if it's not a value type, it's a reference type)</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.name">
      <summary>Name of this type.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.size">
      <summary>Size in bytes of an instance of this type. If this type is an arraytype, this describes the amount of bytes a single element in the array will take up.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.staticFieldBytes">
      <summary>The actual contents of the bytes that store this types static fields, at the point of time when the snapshot was taken.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.typeIndex">
      <summary>The typeIndex of this type. This index is an index into the <see cref="UnityEditor.MemoryProfiler.PackedMemorySnapshot.typeDescriptions" /> array.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.typeInfoAddress">
      <summary>The address in memory that contains the description of this type inside the virtual machine. This can be used to match managed objects in the heap to their corresponding TypeDescription, as the first pointer of a managed object points to its type description.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.allocationGranularity">
      <summary>Allocation granularity in bytes used by the virtual machine allocator.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arrayBoundsOffsetInHeader">
      <summary>Offset in bytes inside the object header of an array object where the bounds of the array is stored.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arrayHeaderSize">
      <summary>Size in bytes of the header of an array object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arraySizeOffsetInHeader">
      <summary>Offset in bytes inside the object header of an array object where the size of the array is stored.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.heapFormatVersion">
      <summary>A version number that will change when the object layout inside the managed heap will change.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.objectHeaderSize">
      <summary>Size in bytes of the header of each managed object.</summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.pointerSize">
      <summary>Size in bytes of a pointer.</summary>
    </member>
    <member name="P:UnityEditor.Purchasing.PurchasingSettings.enabled">
      <summary>This Boolean field will cause the Purchasing feature in Unity to be enabled if true, or disabled if false.</summary>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.GetTierSettings(UnityEditor.BuildTargetGroup,ShaderHardwareTier)">
      <summary>Will return <see cref="UnityEditor.Rendering.TierSettings" /> for given platform and shader hardware tier.</summary>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.SetTierSettings(UnityEditor.BuildTargetGroup,ShaderHardwareTier,UnityEditor.Rendering.TierSettings)">
      <summary>
        <para>Allows you to set the PlatformShaderSettings for the specified platform and shader hardware tier.</para>
        <para>If the platform you are tweaking is an active build target, the shaders will reload so you can see the results immediately. Please note that if PlatformShaderSettings set to different tiers are not identical, then tier variants will be generated for the shader even if #pragma hardware_tier_variants is missing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.cascadedShadowMaps">
      <summary>
        <para>Allows you to specify whether cascaded shadow maps should be used.</para>
        <para>Enabling or disabling this setting will add or remove the UNITY_NO_SCREENSPACE_SHADOWS shader compiler define.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.reflectionProbeBlending">
      <summary>
        <para>Allows you to specify whether Reflection Probes Blending should be enabled.</para>
        <para>Enabling or disabling this setting will add or remove the UNITY_SPECCUBE_BLENDING shader compiler define.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.reflectionProbeBoxProjection">
      <summary>
        <para>Allows you to specify whether Reflection Probes Box Projection should be used.</para>
        <para>Enabling or disabling this setting will add or remove the UNITY_SPECCUBE_BOX_PROJECTION shader compiler define.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.renderingPath">
      <summary>The rendering path that should be used.</summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.standardShaderQuality">
      <summary>
        <para>Allows you to select Standard Shader Quality.</para>
        <para>It will set one of UNITY_PBS_USE_BRDF3, UNITY_PBS_USE_BRDF2, UNITY_PBS_USE_BRDF1 shader compiler defines (for Low, Medium, High quality respectively) and tweak UNITY_BRDF_PBS shader compiler define accordingly.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.Low">
      <summary>Low quality shader preset.</summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.Medium">
      <summary>Medium quality shader preset.</summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.High">
      <summary>High quality shader preset.</summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.EditorSceneManager.loadedSceneCount">
      <summary>
        <para>The number of loaded Scenes.</para>
        <para>Returns the current number of loaded Scenes in the Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.EditorSceneManager.preventCrossSceneReferences">
      <summary>
        <para>Controls whether cross-Scene references are allowed in the Editor.</para>
        <para>A cross-Scene reference occurs when you have multiple Scenes loaded in the Editor, and a component attached to a GameObject in one Scene has a reference to a GameObject in another Scene. The default value for this setting is 'true'. This means that by default, you cannot create cross-Scene references in the Unity Editor. This is prevented by default because cross-Scene references cannot be saved in Scene files. Therefore, having the Editor prevent you from creating these references avoids potential situations where your assignments cannot be saved. If you need cross-Scene references at runtime, you need to create those references at runtime - finding the GameObjects by values such as name or tag. There are, however, certain situations where you may need to create cross-Scene references in the Editor, even though these references cannot be saved - for example, if you needed to create an Editor script which should be able to operate on GameObjects from many Scenes at once. Deactivating this setting allows you to do this. Note however that deactivating this value does not mean cross-Scene references will be saved. Disabling this setting means that: 1) Dragging references from a GameObject in one Scene to another GameObject's Component field in a different Scene is allowed. 2) The Object Picker (the small target icon next to most assignable fields in the Inspector) lists choices from all open Scenes, instead of just the GameObject's own Scene. 3) Dragging GameObjects from one Scene to another Scene can result in cross-Scene references. Warnings are no longer logged when this happens.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.CloseScene(UnityEngine.SceneManagement.Scene,System.Boolean)">
      <summary>Close the Scene. If removeScene flag is true, the closed Scene is also removed from EditorSceneManager.</summary>
      <param name="scene">The Scene to be closed/removed.</param>
      <param name="removeScene">Bool flag to indicate if the Scene should be removed after closing.</param>
      <returns>Returns true if the Scene is closed/removed.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.DetectCrossSceneReferences(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Checks for cross-Scene references in the specified Scene.</para>
        <para>Warnings are logged to the console if any GameObject in the input Scene has references to GameObjects in other Scenes.</para>
      </summary>
      <param name="scene">Scene to check for cross-Scene references.</param>
      <returns>Whether any cross-Scene references were found.</returns>
      <seealso cref="P:UnityEditor.SceneManagement.EditorSceneManager.preventCrossSceneReferences" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.GetSceneManagerSetup">
      <summary>
        <para>Returns the current setup of the SceneManager.</para>
        <para>The returned array contains SceneSetup instances, one for each Scene. These indicate the active state, loaded state, and path of each of the current Scenes in the SceneManager.</para>
      </summary>
      <returns>An array of SceneSetup classes - one item for each Scene.</returns>
      <seealso cref="T:UnityEditor.SceneManagement.SceneSetup" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MarkAllScenesDirty">
      <summary>
        <para>Mark all the loaded Scenes as modified.</para>
        <para>This function marks all the currently loaded Scenes in the Editor as modified (having unsaved changes).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MarkSceneDirty(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Mark the specified Scene as modified.</para>
        <para>This function marks the specified Scene in the Editor as modified (having unsaved changes).</para>
      </summary>
      <param name="scene">The Scene to be marked as modified.</param>
      <returns>Whether the Scene was successfully marked as dirty.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MoveSceneAfter(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes after the destination Scene.</summary>
      <param name="src">The Scene to move.</param>
      <param name="dst">The Scene which should come directly before the source Scene in the hierarchy.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MoveSceneBefore(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes before the destination Scene.</summary>
      <param name="src">The Scene to move.</param>
      <param name="dst">The Scene which should come directly after the source Scene in the hierarchy.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.NewScene(UnityEditor.SceneManagement.NewSceneSetup,UnityEditor.SceneManagement.NewSceneMode)">
      <summary>
        <para>Create a new Scene.</para>
        <para>The setup parameter allows you to select whether or not the default set of GameObjects should be added to the new Scene. The mode parameter allows you to select how to open the new Scene, and whether to keep existing Scenes in the Hierarchy.</para>
      </summary>
      <param name="setup">Whether the new Scene should use the default set of GameObjects.</param>
      <param name="mode">Whether to keep existing Scenes open.</param>
      <returns>A reference to the new Scene.</returns>
      <seealso cref="T:UnityEditor.SceneManagement.NewSceneSetup" />
      <seealso cref="T:UnityEditor.SceneManagement.NewSceneMode" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.NewScene(UnityEditor.SceneManagement.NewSceneSetup)">
      <summary>
        <para>Create a new Scene.</para>
        <para>The setup parameter allows you to select whether or not the default set of GameObjects should be added to the new Scene. The mode parameter allows you to select how to open the new Scene, and whether to keep existing Scenes in the Hierarchy.</para>
      </summary>
      <param name="setup">Whether the new Scene should use the default set of GameObjects.</param>
      <returns>A reference to the new Scene.</returns>
      <seealso cref="T:UnityEditor.SceneManagement.NewSceneSetup" />
      <seealso cref="T:UnityEditor.SceneManagement.NewSceneMode" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.OpenScene(System.String,UnityEditor.SceneManagement.OpenSceneMode)">
      <summary>
        <para>Open a Scene in the Editor.</para>
        <para>Use this function to open Scenes in the Hierarchy while in the Editor. This is useful for making custom Editor scripts, tools, or menu items. It is not intended to be used for loading Scenes at run time. To load Scenes at run time, see <see cref="UnityEngine.SceneManagement.SceneManager.LoadScene" />.</para>
      </summary>
      <param name="scenePath">The path of the Scene. This should be relative to the Project folder; for example, "Assets/MyScenes/MyScene.unity".</param>
      <param name="mode">Allows you to select how to open the specified Scene, and whether to keep existing Scenes in the Hierarchy.</param>
      <returns>A reference to the opened Scene.</returns>
      <seealso cref="T:UnityEditor.SceneManagement.OpenSceneMode" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.OpenScene(System.String)">
      <summary>
        <para>Open a Scene in the Editor.</para>
        <para>Use this function to open Scenes in the Hierarchy while in the Editor. This is useful for making custom Editor scripts, tools, or menu items. It is not intended to be used for loading Scenes at run time. To load Scenes at run time, see <see cref="UnityEngine.SceneManagement.SceneManager.LoadScene" />.</para>
      </summary>
      <param name="scenePath">The path of the Scene. This should be relative to the Project folder; for example, "Assets/MyScenes/MyScene.unity".</param>
      <returns>A reference to the opened Scene.</returns>
      <seealso cref="T:UnityEditor.SceneManagement.OpenSceneMode" />
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.RestoreSceneManagerSetup(UnityEditor.SceneManagement.SceneSetup[])">
      <summary>Restore the setup of the SceneManager.</summary>
      <param name="value">In this array, at least one Scene should be loaded, and there must be one active Scene.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo">
      <summary>
        <para>Asks you if you want to save the modified Scene or Scenes.</para>
        <para>In some cases, you might want to call this function before opening another Scene or creating a new Scene. A return value of true indicates that you may continue. A return value of false indicates that the user cancelled the operation and you should not Open another Scene.</para>
      </summary>
      <returns>This returns true if you chose to save the Scene or Scenes, and returns false if you pressed Cancel.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveModifiedScenesIfUserWantsTo(UnityEngine.SceneManagement.Scene[])">
      <summary>
        <para>Asks whether the modfied input Scenes should be saved.</para>
        <para>In some cases, you might want to call this before opening another Scene or creating a new Scene. A return value of true indicates that you may continue. A return value of false indicates that the user cancelled the operation and you should not Open another Scene.</para>
      </summary>
      <param name="scenes">Scenes that should be saved if they are modified.</param>
      <returns>Your choice of whether to save or not save the Scenes.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveOpenScenes">
      <summary>Save all open Scenes.</summary>
      <returns>Returns true if all open Scenes are successfully saved.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveScene(UnityEngine.SceneManagement.Scene,System.String,System.Boolean)">
      <summary>Save a Scene.</summary>
      <param name="scene">The Scene to be saved.</param>
      <param name="dstScenePath">The file path to save the Scene to. If the path is not empty, the current open Scene is overwritten. If it has not yet been saved at all, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to true, the Scene is saved without changing the current Scene, and without clearing the unsaved changes marker.</param>
      <returns>True if the save succeeded, otherwise false.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveScene(UnityEngine.SceneManagement.Scene,System.String)">
      <summary>Save a Scene.</summary>
      <param name="scene">The Scene to be saved.</param>
      <param name="dstScenePath">The file path to save the Scene to. If the path is not empty, the current open Scene is overwritten. If it has not yet been saved at all, a save dialog is shown.</param>
      <returns>True if the save succeeded, otherwise false.</returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveScenes(UnityEngine.SceneManagement.Scene[])">
      <summary>
        <para>Save a list of Scenes.</para>
        <para>If an unsaved Scene is part of the list of Scenes, a save dialog appears requesting the location the Scene should be saved in.</para>
      </summary>
      <param name="scenes">List of Scenes that should be saved.</param>
      <returns>True if the save succeeded. Otherwise false.</returns>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.isActive">
      <summary>If the scene is active.</summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.isLoaded">
      <summary>If the scene is loaded.</summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.path">
      <summary>Path of the scene. Should be relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneMode.Single">
      <summary>All current open scenes are closed and the newly created scene are opened.</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneMode.Additive">
      <summary>The newly created scene is added to the current open scenes.</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneSetup.EmptyScene">
      <summary>No game objects are added to the new scene.</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneSetup.DefaultGameObjects">
      <summary>Adds default game objects to the new scene (a light and camera).</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.Single">
      <summary>Closes all current open scenes and loads a scene.</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.Additive">
      <summary>Adds a scene to the current open scenes and loads it.</summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.AdditiveWithoutLoading">
      <summary>Adds a scene to the current open scenes without loading it. It will show up as 'unloaded' in the Hierarchy Window.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.allowsAlphaSplitting">
      <summary>Marks this atlas so that it contains textures that have been flagged for Alpha splitting when needed (for example ETC1 compression for textures with transparency).</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.anisoLevel">
      <summary>Anisotropic filtering level of the atlas texture.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.colorSpace">
      <summary>Desired color space of the atlas.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.compressionQuality">
      <summary>Quality of atlas texture compression in the range [0..100].</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.enableRotation">
      <summary>Allows Sprite Packer to rotate/flip the Sprite to ensure optimal Packing.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.filterMode">
      <summary>Filtering mode of the atlas texture.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.format">
      <summary>The format of the atlas texture.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.generateMipMaps">
      <summary>Should sprite atlas textures generate mip maps?</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxHeight">
      <summary>Maximum height of the atlas texture.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxWidth">
      <summary>Maximum width of the atlas texture.</summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.paddingPower">
      <summary>
        <para>The amount of extra padding between packed sprites.</para>
        <para>Expressed as the power of 2 minus 1 (i.e. paddingPower of 0 enforces a 2 pixel gap between, paddingPower of 1 - 4 pixel gap, paddingPower of 2 - 8 pixel gap, etc.). This can be used to prevent sprites from bleeding into each other in lower mip levels.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.atlasNames">
      <summary>
        <para>Array of Sprite atlas names found in the current atlas cache.</para>
        <para>This list might change if the packing-tag on sprites are altered and repacked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.kDefaultPolicy">
      <summary>Name of the default Sprite Packer policy.</summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.Policies">
      <summary>Available Sprite Packer policies for this project.</summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.SelectedPolicy">
      <summary>The active Sprite Packer policy for this project.</summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetAlphaTexturesForAtlas(System.String)">
      <summary>
        <para>Returns all alpha atlas textures generated for the specified atlas.</para>
        <para>Alpha splits are generated when the textures with alpha are compressed using ETC1 on specific platforms like Android or Tizen.</para>
      </summary>
      <param name="atlasName">Name of the atlas.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetAtlasDataForSprite(UnityEngine.Sprite,System.String@,UnityEngine.Texture2D@)">
      <summary>Returns atlasing data for the specified Sprite.</summary>
      <param name="sprite">Sprite to query.</param>
      <param name="atlasName">Gets set to the name of the atlas containing the specified Sprite.</param>
      <param name="atlasTexture">Gets set to the Texture containing the specified Sprite.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetTexturesForAtlas(System.String)">
      <summary>Returns all atlas textures generated for the specified atlas.</summary>
      <param name="atlasName">Atlas name.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean,Sprites.Packer.Execution)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AddAtlas(System.String,UnityEditor.Sprites.AtlasSettings)">
      <summary>Registers a new atlas.</summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AssignToAtlas(System.String,UnityEngine.Sprite,UnityEngine.SpritePackingMode,UnityEngine.SpritePackingRotation)">
      <summary>Assigns a Sprite to an already registered atlas.</summary>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteTexture(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="UnityEngine.Sprite" /> texture. If <see cref="UnityEngine.Sprite" /> is packed, it is possible to query for both source and atlas textures.</para>
        <para>Note that the sprite atlas cache must be up to date for this API to return valid data.</para>
      </summary>
      <param name="getAtlasData">If <see cref="UnityEngine.Sprite" /> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteUVs(UnityEngine.Sprite,System.Boolean)">
      <summary>Returns the generated <see cref="UnityEngine.Sprite" /> mesh uvs.</summary>
      <param name="sprite">If <see cref="UnityEngine.Sprite" /> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.GetVersion">
      <summary>Return the version of your policy. Sprite Packer needs to know if atlas grouping logic changed.</summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.OnGroupAtlases(UnityEditor.BuildTarget,UnityEditor.Sprites.PackerJob,System.Int32[])">
      <summary>Implement custom atlas grouping here.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.fullName">
      <summary>Gets the full name of the asset including extension.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isFolder">
      <summary>Returns true if the asset is a folder.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isInCurrentProject">
      <summary>
        <para>Returns true if the assets is in the current project.</para>
        <para>If you have multiple projects or other files in the version controls repository. The window showing the incoming changes will display all changes incoming from the remote repository. Some of these changes might be to other projects or files not part of the currently open project. In that case this will return false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isMeta">
      <summary>Returns true if the instance of the Asset class actually refers to a .meta file.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.locked">
      <summary>Returns true if the asset is locked by the version control system.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.name">
      <summary>Get the name of the asset.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.path">
      <summary>Gets the path of the asset.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.readOnly">
      <summary>Returns true is the asset is read only.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.state">
      <summary>Gets the version control state of the asset.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Edit">
      <summary>
        <para>Opens the assets in an associated editor.</para>
        <para>Will try to open the asset in an associated editor. Eg. if png files are associated to Photoshop the png file will be loaded in photoshop.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsOneOfStates(States[])">
      <summary>Returns true if the version control state of the assets is one of the input states.</summary>
      <param name="states">Array of states to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsState(VersionControl.Asset.States)">
      <summary>Returns true if the version control state of the asset exactly matches the input state.</summary>
      <param name="state">State to check for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Load">
      <summary>Loads the asset to memory.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.Filter(System.Boolean,States[])">
      <summary>Based on the current list and the states a new list is returned which only contains the assets with the requested states.</summary>
      <param name="includeFolder">Whether or not folders should be included.</param>
      <param name="states">Which states to filter by.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterChildren">
      <summary>Create an optimised list of assets by removing children of folders in the same list.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterCount(System.Boolean,States[])">
      <summary>Count the list of assets by given a set of states.</summary>
      <param name="includeFolder">Whether or not to include folders.</param>
      <param name="states">Which states to include in the count.</param>
    </member>
    <member name="F:UnityEditor.VersionControl.ChangeSet.defaultID">
      <summary>
        <para>The ID of the default changeset.</para>
        <para>Some version control systems use the concept of a default changeset or changelist. Use the defaultID to refer to that changeset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.description">
      <summary>Description of a changeset.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.id">
      <summary>
        <para>Version control specific ID of a changeset.</para>
        <para>E.g. Perforce changetset have unique IDs, while sibversion has no ID at all in which case it is simply -1.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.description">
      <summary>Descrition of the configuration field.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isPassword">
      <summary>This is true if the configuration field is a password field.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isRequired">
      <summary>This is true if the configuration field is required for the version control plugin to function correctly.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.label">
      <summary>Label that is displayed next to the configuration field in the editor.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.name">
      <summary>Name of the configuration field.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.message">
      <summary>The message text.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.severity">
      <summary>The severity of the message.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Message.Show">
      <summary>Write the message to the console.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Plugin.configFields">
      <summary>Configuration fields of the plugin.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.activeTask">
      <summary>Gets the currently executing task.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.enabled">
      <summary>Returns true if the version control provider is enabled and a valid Unity Pro License was found.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.isActive">
      <summary>Returns true if a version control plugin has been selected and configured correctly.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.offlineReason">
      <summary>Returns the reason for the version control provider being offline (if it is offline).</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.onlineState">
      <summary>Returns the OnlineState of the version control provider.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.requiresNetwork">
      <summary>
        <para>This is true if a network connection is required by the currently selected version control plugin to perform any action.</para>
        <para>E.g. before doing anything using Perforce you need to checkout the asset, in order to do that a connection to the server is required where as subversion does not require access to the server to do changes to an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="assets">List of assets to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="asset">Single asset to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.AddIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>Given a list of assets this function returns true if Add is a valid task to perform.</summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetDescription(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given a changeset only containing the changeset ID, this will start a task for quering the description of the changeset.</para>
        <para>Mostly makes sense to use with Perforce.</para>
      </summary>
      <param name="changeset">Changeset to query description of.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSets">
      <summary>Get a list of pending changesets owned by the current user.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(UnityEditor.VersionControl.ChangeSet)">
      <summary>Retrieves the list of assets belonging to a changeset.</summary>
      <param name="changeset">Changeset to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(System.String)">
      <summary>Retrieves the list of assets belonging to a changeset.</summary>
      <param name="changesetID">ChangesetID to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="asset">Asset to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="asset">Asset to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="asset">Asset to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>Given an asset or a list of assets this function returns true if Checkout is a valid task to perform.</summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.Asset)">
      <summary>Given an asset or a list of assets this function returns true if Checkout is a valid task to perform.</summary>
      <param name="asset">Single asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ClearCache">
      <summary>This will invalidate the cached state information for all assets.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(System.String)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assets">List of assets to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSets(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Starts a task that will attempt to delete the given changeset.</para>
        <para>It is required that the changesets must be empty.</para>
      </summary>
      <param name="changesets">List of changetsets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSetsIsValid(UnityEditor.VersionControl.ChangeSets)">
      <summary>Test if deleting a changeset is a valid task to perform.</summary>
      <param name="changesets">Changeset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffHead(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>Starts a task for showing a diff of the given assest versus their head revision.</summary>
      <param name="assets">List of assets.</param>
      <param name="includingMetaFiles">Whether or not to include .meta.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>Return true is starting a Diff task is a valid operation.</summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActiveConfigFields">
      <summary>Returns the configuration fields for the currently active version control plugin.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActivePlugin">
      <summary>Gets the currently user selected verson control plugin.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByGUID(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the GUID is not known by the Unity Editor.</para>
      </summary>
      <param name="guid">GUID of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByPath(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the path is not known by the Unity Editor.</para>
      </summary>
      <param name="unityPath">Path to asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetListFromSelection">
      <summary>Return version control information about the currently selected assets.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.AssetList)">
      <summary>Start a task for getting the latest version of an asset from the version control server.</summary>
      <param name="assets">List of assets to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.Asset)">
      <summary>Start a task for getting the latest version of an asset from the version control server.</summary>
      <param name="asset">Asset to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Incoming">
      <summary>
        <para>Start a task for quering the version control server for incoming changes.</para>
        <para>The incoming changesets can be accessed through the task instance once it has been completed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(UnityEditor.VersionControl.ChangeSet)">
      <summary>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</summary>
      <param name="changeset">Incoming changeset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(System.String)">
      <summary>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</summary>
      <param name="changesetID">Incoming changesetid.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IsOpenForEdit(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if an asset can be edited.</para>
        <para>Version control systems like Perforce requieres that an asset is checked out before it can be edited, in that case this will test if the asset can be edited. Some version control systems support editing without checking out the asset in that case this will always return true.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="assets">List of assets to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="asset">Asset to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Merge(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.MergeMethod)">
      <summary>
        <para>This method will initiate a merge task handle merging of the conflicting assets.</para>
        <para>An initial attempt of is made to make a simple merge automatically. If this fails the merge method decide if manual merge too will be spawned of not.</para>
      </summary>
      <param name="assets">The list of conflicting assets to be merged.</param>
      <param name="method">How to merge the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Move(System.String,System.String)">
      <summary>Uses the version control plugin to move an asset from one path to another.</summary>
      <param name="from">Path to source asset.</param>
      <param name="to">Path to destination.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Resolve(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ResolveMethod)">
      <summary>
        <para>Start a task that will resolve conflicting assets in version control.</para>
        <para>When conflicting assets appear you can resolve it by using your own copy or the incoming copy. A third way of resolving the conflict is by first Provider.Merge() the assets and the resolve using the merged asset. Use the resolveMethod to flag what should be used.</para>
      </summary>
      <param name="assets">The list of asset to mark as resolved.</param>
      <param name="resolveMethod">How the assets should be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ResolveIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Tests if any of the assets in the list is resolvable.</para>
        <para>Returns true if any of the assets are resolvable.</para>
      </summary>
      <param name="assets">The list of asset to be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="assets">The list of assets to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="asset">The asset to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>Return true if Revert is a valid task to perform.</summary>
      <param name="assets">List of assets to test.</param>
      <param name="mode">Revert mode to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>Return true if Revert is a valid task to perform.</summary>
      <param name="asset">Asset to test.</param>
      <param name="mode">Revert mode to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[])">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[],System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Submit(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList,System.String,System.Boolean)">
      <summary>
        <para>Start a task that submits the assets to version control.</para>
        <para>In some version control systems submit is known as commit.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="list">The list of assets to submit.</param>
      <param name="description">The description of the changeset.</param>
      <param name="saveOnly">If true then only save the changeset to be submitted later.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.SubmitIsValid(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList)">
      <summary>Returns true if submitting the assets is a valid operation.</summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="assets">The asset to submit.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>Returns true if locking the assets is a valid operation.</summary>
      <param name="assets">The assets to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>Returns true if locking the assets is a valid operation.</summary>
      <param name="asset">The asset to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UpdateSettings">
      <summary>
        <para>Start a task that sends the version control settings to the version control system.</para>
        <para>The settings include version control password, username, server, workspace etc. This differs from version control system selected.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.assetList">
      <summary>
        <para>The result of some types of tasks.</para>
        <para>Most task perform an action and returns the result as list of version control informations about assets, e.g. a Status task will return the result in this list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.changeSets">
      <summary>List of changesets returned by some tasks.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.description">
      <summary>
        <para>A short description of the current task.</para>
        <para>Not all tasks have a description, currently only the longer running task where progress is showed in the Editor UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.messages">
      <summary>
        <para>May contain messages from the version control plugins.</para>
        <para>This could be errors or information messages to be displayed in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.progressPct">
      <summary>Progress of current task in precent.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.resultCode">
      <summary>
        <para>Some task return result codes, these are stored here.</para>
        <para>Depending on the task the result code will map to either an AssetDeleteResult, AssetMoveResult or SubmitResult.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.secondsSpent">
      <summary>Total time spent in task since the task was started.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.success">
      <summary>Get whether or not the task was completed succesfully.</summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.text">
      <summary>Will contain the result of the Provider.ChangeSetDescription task.</summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.SetCompletionAction(UnityEditor.VersionControl.CompletionAction)">
      <summary>Upon completion of a task a completion task will be performed if it is set.</summary>
      <param name="action">Which completion action to perform.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.Wait">
      <summary>A blocking wait for the task to complete.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Asset">
      <summary>
        <para>Checkout the asset only.</para>
        <para>Any meta data files provided will checkout its asset counterpart instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Meta">
      <summary>
        <para>Checkout .meta file only.</para>
        <para>Any asset files provided will checkout its meta data counterpart instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Both">
      <summary>
        <para>Checkout both asset and .meta file.</para>
        <para>Any meta data files provided will also checkout its asset counterpart, and vice versa.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Exact">
      <summary>
        <para>Checkout.</para>
        <para>Provided asset and meta data files will be checked out.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.UpdatePendingWindow">
      <summary>Update the list of pending changes when a task completes.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeContentsPendingWindow">
      <summary>Update the content of a pending changeset with the result of the task upon completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnIncomingPendingWindow">
      <summary>Update incoming changes window with the result of the task upon completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeSetsPendingWindow">
      <summary>Update the pending changesets with the result of the task upon completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnGotLatestPendingWindow">
      <summary>Refreshes the incoming and pensing changes window upon task completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnSubmittedChangeWindow">
      <summary>Refresh the submit window with the result of the task upon completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnAddedChangeWindow">
      <summary>Refresh windows upon task completion.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnCheckoutCompleted">
      <summary>Show or update the checkout failure window.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.None">
      <summary>No mode set.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Binary">
      <summary>Binary file.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Text">
      <summary>Text file.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNone">
      <summary>Don't merge any changes.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeAll">
      <summary>Merge all changes.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Updating">
      <summary>The version control provider is currently trying to connect to the version control server.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Online">
      <summary>Connection to the version control server has been established.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Offline">
      <summary>Connection to the version control server could not be established.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMine">
      <summary>Use "mine" (local version).</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseTheirs">
      <summary>Use "theirs" (other/remote version).</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMerged">
      <summary>Use merged version.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Normal">
      <summary>Use the version control regular revert approach.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Unchanged">
      <summary>Revert only unchanged files.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.KeepModifications">
      <summary>Revert files but keep locally changed ones.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.OK">
      <summary>Submission worked.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.Error">
      <summary>An error was returned.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.ConflictingFiles">
      <summary>Files conflicted.</summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.UnaddedFiles">
      <summary>Files were unable to be added.</summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.curve">
      <summary>The actual animation curve.</summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.path">
      <summary>The path of the game object / bone being animated.</summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.propertyName">
      <summary>The name of the property being animated.</summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.type">
      <summary>The type of the component / material being animated.</summary>
    </member>
    <member name="P:UnityEditor.AnimationMode.animatedPropertyColor">
      <summary>The color used to show that a property is currently being animated.</summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.BeginSampling">
      <summary>
        <para>Initialise the start of the animation clip sampling.</para>
        <para>
          <see cref="UnityEditor.AnimationMode.BeginSampling" /> arranges for the ::SampleAnimationClip to operate correctly. Not calling <see cref="UnityEditor.AnimationMode.BeginSampling" /> prevents the animation data to be sampled. This function must be called immediately before the <see cref="UnityEditor.AnimationMode.SampleAnimationClip" /> is called. See the script example on the <see cref="UnityEditor.AnimationMode" /> page to see this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.EndSampling">
      <summary>
        <para>Finish the sampling of the animation clip.</para>
        <para>
          <see cref="UnityEditor.AnimationMode.EndSampling" /> is called after <see cref="UnityEditor.AnimationMode.SampleAnimationClip" /> returns. This function must be called immediately following <see cref="UnityEditor.AnimationMode.SampleAnimationClip" />. See the script example on the <see cref="UnityEditor.AnimationMode" /> page to see this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.InAnimationMode">
      <summary>
        <para>Are we currently in AnimationMode?</para>
        <para>
          <see cref="UnityEditor.AnimationMode.InAnimationMode" /> returns a bool which describes if the animation is being controlled by <see cref="UnityEditor.AnimationMode" />. If <see cref="UnityEditor.AnimationMode.InAnimationMode" /> returns <c>true</c> then <see cref="UnityEditor.AnimationMode.SampleAnimationClip" /> can be used to animated the attached object. Note: The script example at <see cref="UnityEditor.AnimationMode" /> shows how <see cref="UnityEditor.AnimationMode.InAnimationMode" /> can be used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.IsPropertyAnimated(UnityEngine.Object,System.String)">
      <summary>
        <para>Is the specified property currently in animation mode and being animated?</para>
        <para>
          <see cref="UnityEditor.AnimationMode.IsPropertyAnimated" /> checks whether a property is being animated. This check requires also the object where the property can be found. <c>color</c> is searched for in the following script example . It is part of the <c>Renderer</c> object. Note that the example uses a sphere GameObject and an animation file, color.anim. The color animation in color.anim has the color varying from yellow to blue.</para>
      </summary>
      <param name="target">The object to determine if it contained the animation.</param>
      <param name="propertyPath">The name of the animation to search for.</param>
      <returns>Whether the property search is found or not.</returns>
    </member>
    <member name="M:UnityEditor.AnimationMode.SampleAnimationClip(UnityEngine.GameObject,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Samples an <see cref="UnityEngine.AnimationClip" /> on the object and also records any modified properties in <see cref="UnityEditor.AnimationMode" />.</para>
        <para>This function must always be surrounded by <see cref="UnityEditor.AnimationMode.BeginSampling" /> and <see cref="UnityEditor.AnimationMode.EndSampling" />. When a property is no longer sampled (through <see cref="UnityEditor.AnimationMode.SampleAnimationClip" /> or AddPropertyModification) between <see cref="UnityEditor.AnimationMode.BeginSampling" /> and <see cref="UnityEditor.AnimationMode.EndSampling" /> it will automatically revert to the original value when <see cref="UnityEditor.AnimationMode.EndSampling" /> is called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StartAnimationMode">
      <summary>
        <para>Starts the animation mode.</para>
        <para>When the Animation Mode is enabled, the editor is tinted in a special color to indicated that animations are playing and recorded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StopAnimationMode">
      <summary>
        <para>Stops Animation mode, reverts all properties that were animated in animation mode.</para>
        <para>AnimationMode stores per property modifications. They are added either via <see cref="UnityEditor.AnimationMode.SampleAnimationClip" /> or AddPropertyModification. <see cref="UnityEditor.AnimationMode.StopAnimationMode" /> reverts all of these properties.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.onCurveWasModified">
      <summary>Triggered when an animation curve inside an animation clip has been modified.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.CalculateTransformPath(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>
        <para>Calculates path from root transform to target transform.</para>
        <para>Returns a string representing the path in a transform hierarchy from a given root transform down to a given target transform. The root transform does not need to be an actual root, but it must be higher in the hierarchy than the target transform. The target and root may also be the same transform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatableBindings(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Returns all the animatable bindings that a specific game object has.</para>
        <para>Answers the question: "What can be animated?". The root GameObject does not need to be an actual root, but it must be higher in the hierarchy than the target. The target and root may also be the same GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatedObject(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)">
      <summary>Returns the animated object that the binding is pointing to.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationClips(UnityEngine.Animation)">
      <summary>Returns the array of AnimationClips that are referenced in the Animation component.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationEvents(UnityEngine.AnimationClip)">
      <summary>Retrieves all animation events associated with the animation clip.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the float curve bindings currently stored in the clip.</para>
        <para>Answers the question: "Which float properties are animated by the clip?". Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time. This method returns only the float curve bindings. See <see cref="UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings" /> for object reference curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally. Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</para>
      </summary>
      <seealso cref="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally. Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</para>
      </summary>
      <seealso cref="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetFloatValue(UnityEngine.GameObject,System.String,System.Type,System.String,System.Single@)">
      <summary>
        <para>Retrieves the current float value by sampling a curve value on a specific game object.</para>
        <para>Useful for recording keyframes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the object reference curve that the binding is pointing to.</para>
        <para>Unlike float curves, the object reference curves do not have additional metadata. Thus array of keyframes is returned instead of a singular curve object.</para>
      </summary>
      <seealso cref="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the object reference curve bindings currently stored in the clip.</para>
        <para>Answers the question: "Which object reference properties are animated by the clip?". Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time. This method returns only the object reference bindings. See <see cref="UnityEditor.AnimationUtility.GetCurveBindings" /> for float curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAdditiveReferencePose(UnityEngine.AnimationClip,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Set the additive reference pose from <c>referenceClip</c> at <c>time</c> for animation clip <c>clip</c>.</para>
        <para>By default any animation clip used in an additive layer use the pose at time 0 to define the reference pose. This is a big limitation as the reference pose need to be in the played clip. This function allow you to change this behaviour and use a reference pose from any clip.</para>
      </summary>
      <param name="clip">The animation clip to be used.</param>
      <param name="referenceClip">The animation clip containing the reference pose.</param>
      <param name="time">Time that defines the reference pose in <c>referenceClip</c>.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationClips(UnityEngine.Animation,UnityEngine.AnimationClip[])">
      <summary>Sets the array of AnimationClips to be referenced in the Animation component.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationEvents(UnityEngine.AnimationClip,UnityEngine.AnimationEvent[])">
      <summary>Replaces all animation events in the animation clip.</summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEngine.AnimationCurve)">
      <summary>
        <para>Adds, modifies or removes an editor float curve in a given clip.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally. Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way. Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time. This method is used for float curves. For object reference curves, see: <see cref="UnityEditor.AnimationUtility.SetObjectReferenceCurve" />.</para>
      </summary>
      <param name="clip">The animation clip to which the curve will be added.</param>
      <param name="binding">The bindings which defines the path and the property of the curve.</param>
      <param name="curve">The curve to add. Setting this to null will remove the curve.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyBroken(UnityEngine.AnimationCurve,System.Int32,System.Boolean)">
      <summary>
        <para>Change the specified keyframe broken tangent flag.</para>
        <para>The keyframe broken flag will be used by the Curve Editor to generate tangents automatically. Changing the broken flag here will also recalculate <see cref="UnityEngine.Keyframe.inTangent" /> and <see cref="UnityEngine.Keyframe.outTangent" />.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="broken">Broken flag.</param>
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyLeftTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)" />
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyRightTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyLeftTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)">
      <summary>
        <para>Change the specified keyframe tangent mode.</para>
        <para>The keyframe tangent mode will be used by the Curve Editor to generate tangents automatically. Changing the tangent mode here will also recalculate <see cref="UnityEngine.Keyframe.inTangent" /> and <see cref="UnityEngine.Keyframe.outTangent" />.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="tangentMode">Tangent mode.</param>
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyRightTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)" />
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyBroken(UnityEngine.AnimationCurve,System.Int32,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyRightTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)">
      <summary>
        <para>Change the specified keyframe tangent mode.</para>
        <para>The keyframe tangent mode will be used by the Curve Editor to generate tangents automatically. Changing the tangent mode here will also recalculate <see cref="UnityEngine.Keyframe.inTangent" /> and <see cref="UnityEngine.Keyframe.outTangent" />.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="tangentMode">Tangent mode.</param>
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyLeftTangentMode(UnityEngine.AnimationCurve,System.Int32,AnimationUtility.TangentMode)" />
      <seealso cref="M:UnityEditor.AnimationUtility.SetKeyBroken(UnityEngine.AnimationCurve,System.Int32,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEditor.ObjectReferenceKeyframe[])">
      <summary>
        <para>Adds, modifies or removes an object reference curve in a given clip.</para>
        <para>Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time. This method is used for float curves. For object reference curves, see: <see cref="UnityEditor.AnimationUtility.SetObjectReferenceCurve" />.</para>
      </summary>
      <param name="keyframes">Setting this to null will remove the curve.</param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Add``1(``0[]@,``0)">
      <summary>Appends <c>item</c> to the end of <c>array</c>.</summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.AddRange``1(``0[]@,``0[])">
      <summary>Appends items to the end of array.</summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.ArrayEquals``1(``0[],``0[])">
      <summary>Compares two arrays.</summary>
      <returns>True if both have the same number of elements and the contents are equal.</returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Clear``1(``0[]@)">
      <summary>Clears the array.</summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Contains``1(``0[],``0)">
      <summary>Determines if the array contains the item.</summary>
      <returns>True if <c>item</c> is in <c>array</c>, false otherwise.</returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.FindIndex``1(``0[])">
      <summary>Find the index of the first element that satisfies the predicate.</summary>
      <returns>The zero-based index of the first occurrence of the element, if found; otherwise, �1.</returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.IndexOf``1(``0[],``0)">
      <summary>Index of first element with value <c>value</c>.</summary>
      <returns>The zero-based index of the element, if found; otherwise -1.</returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Insert``1(``0[]@,System.Int32,``0)">
      <summary>Inserts item <c>item</c> at position <c>index</c>.</summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.LastIndexOf``1(``0[],``0)">
      <summary>Index of the last element with value <c>value</c>.</summary>
      <returns>The zero-based index of the element, if found; otherwise -1.</returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Remove``1(``0[]@,``0)">
      <summary>Removes <c>item</c> from <c>array</c>.</summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.RemoveAt``1(``0[]@,System.Int32)">
      <summary>Remove element at position <c>index</c>.</summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleName">
      <summary>AssetBundle name.</summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleVariant">
      <summary>AssetBundle variant.</summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetNames">
      <summary>
        <para>Asset names which belong to the given AssetBundle.</para>
        <para>Please use the asset path relative to the project folder, for example "Assets/MyPrefab.prefab".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset at <c>path</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png". Note: You can not add GameObjects; use <see cref="UnityEditor.PrefabUtility" /> instead.</para>
      </summary>
      <param name="objectToAdd">Object to add to the existing asset.</param>
      <param name="path">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset identified by <c>assetObject</c>.</para>
        <para>Note: You can not add GameObjects; use <see cref="UnityEditor.PrefabUtility" /> instead.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AssetPathToGUID(System.String)">
      <summary>
        <para>Get the GUID for the asset at <c>path</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
        <para>If the asset does not exist <c>AssetPathToGUID</c> will return nothing.</para>
      </summary>
      <param name="path">Filesystem path for the asset.</param>
      <returns>GUID.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ClearLabels(UnityEngine.Object)">
      <summary>Removes all labels attached to an asset.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(UnityEngine.Object)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(System.Int32)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CopyAsset(System.String,System.String)">
      <summary>
        <para>Duplicates the asset at <c>path</c> and stores it at <c>newPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="path">Filesystem path of the source asset.</param>
      <param name="newPath">Filesystem path of the new asset to create.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Creates a new asset at path.</para>
        <para>You must ensure that the path uses a supported extension ('.mat' for materials, '.cubemap' for cubemaps, '.GUISkin' for skins, '.anim' for animations and '.asset' for arbitrary other assets.) You can add more assets to the file using AssetDatabase.AddObjectToAsset after the asset has been created. If an asset already exists at <c>path</c> it will be deleted prior to creating a new asset. All paths are relative to the project folder, for example: "Assets/MyStuff/hello.mat". Be aware that if adding multiple objects to an asset, the order in which the objects are added does not really matter. In other words, <c>asset</c> will not be special within the asset and not be any form of "root" to objects added later. The object displayed as the asset's main object in the project view is the one that is considered most important (decided based on type) within the collection of objects. Note: You can not create an asset from GameObject, use the PrefabUtility class instead.</para>
      </summary>
      <param name="asset">Object to use in creating the asset.</param>
      <param name="path">Filesystem path for the new asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateFolder(System.String,System.String)">
      <summary>Create a new folder.</summary>
      <param name="parentFolder">The name of the parent folder.</param>
      <param name="newFolderName">The name of the new folder.</param>
      <returns>The GUID of the newly created folder.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.DeleteAsset(System.String)">
      <summary>
        <para>Deletes the asset file at path.</para>
        <para>Returns true if the asset has been successfully deleted, false if it doesn't exit or couldn't be removed. All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <param name="path">Filesystem path of the asset to be deleted.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String)">
      <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String,UnityEditor.ExportPackageOptions)">
      <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String,UnityEditor.ExportPackageOptions)">
      <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String)">
      <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String)">
      <summary>
        <para>Search the asset database using a search filter string.</para>
        <para>You can search for names, lables and types (classnames). 'name': filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. Use quotes for grouping multiple words into a single search. 'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed) 'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed). Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object. Searching is case insensitive Use <see cref="UnityEditor.AssetDatabase.GUIDToAssetPath" /> to get assetpaths and e.g <see cref="UnityEditor.AssetDatabase.LoadAssetAtPath" /> to load an asset.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names).</param>
      <returns>Array of matching asset GUIDs.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String,System.String[])">
      <summary>
        <para>Search the asset database using a search filter string.</para>
        <para>You can search for names, lables and types (classnames). 'name': filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. Use quotes for grouping multiple words into a single search. 'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed) 'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed). Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object. Searching is case insensitive Use <see cref="UnityEditor.AssetDatabase.GUIDToAssetPath" /> to get assetpaths and e.g <see cref="UnityEditor.AssetDatabase.LoadAssetAtPath" /> to load an asset.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names).</param>
      <param name="searchInFolders">Specifying one or more folders will limit the searching to these folders and their child folders (and is faster than searching all assets).</param>
      <returns>Array of matching asset GUIDs.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GenerateUniqueAssetPath(System.String)">
      <summary>
        <para>Creates a new unique path for an asset.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAllAssetBundleNames">
      <summary>Return all the AssetBundle names in the asset database.</summary>
      <returns>Array of asset bundle names.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetBundleDependencies(System.String,System.Boolean)">
      <summary>Given an assetBundleName, returns the list of AssetBundles that it depends on.</summary>
      <param name="assetBundleName">The name of the AssetBundle for which dependencies are required.</param>
      <param name="recursive">If false, returns only AssetBundles which are direct dependencies of the input; if true, includes all indirect dependencies of the input.</param>
      <returns>The names of all AssetBundles that the input depends on.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetDependencyHash(System.String)">
      <summary>
        <para>Returns the hash of all the dependencies of an asset.</para>
        <para>The hash aggregates the following: source asset path, source asset, meta file, target platform and importer version. The change of this hash indicates that the imported asset may have changed so the relevant asset bundles should be rebuilt.</para>
      </summary>
      <param name="path">Path to the asset.</param>
      <returns>Aggregate hash.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetOrScenePath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png" When a game object is part of a scene, the scene path is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(System.Int32)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="instanceID">The instance ID of the asset.</param>
      <returns>The asset path name, or null, or an empty string if the asset does not exist.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetObject">A reference to the asset.</param>
      <returns>The asset path name, or null, or an empty string if the asset does not exist.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathFromTextMetaFilePath(System.String)">
      <summary>Gets the path to the asset file associated with a text .meta file.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundle(System.String)">
      <summary>
        <para>Get the paths of the assets which have been marked with the given assetBundle name.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(System.String,System.String)">
      <summary>Get the asset paths from the given assetBundle name and asset name.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetCachedIcon(System.String)">
      <summary>Retrieves an icon for the asset at the given asset path.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String)">
      <summary>
        <para>Given a pathName, returns the list of all assets that it depends on.</para>
        <para>If recursive is true, the list returned will also include the input path itself.</para>
      </summary>
      <param name="pathName">The path to the asset for which dependencies are required.</param>
      <returns>The paths of all assets that the input depends on.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String,System.Boolean)">
      <summary>
        <para>Given a pathName, returns the list of all assets that it depends on.</para>
        <para>If recursive is true, the list returned will also include the input path itself.</para>
      </summary>
      <param name="pathName">The path to the asset for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>The paths of all assets that the input depends on.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[])">
      <summary>
        <para>Given an array of pathNames, returns the list of all assets that the input depend on.</para>
        <para>If recursive is true, the list returned will also include the input paths themselves.</para>
      </summary>
      <param name="pathNames">The path to the assets for which dependencies are required.</param>
      <returns>The paths of all assets that the input depends on.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[],System.Boolean)">
      <summary>
        <para>Given an array of pathNames, returns the list of all assets that the input depend on.</para>
        <para>If recursive is true, the list returned will also include the input paths themselves.</para>
      </summary>
      <param name="pathNames">The path to the assets for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>The paths of all assets that the input depends on.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetLabels(UnityEngine.Object)">
      <summary>Returns all labels attached to a given asset.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetMainAssetTypeAtPath(System.String)">
      <summary>
        <para>Returns the type of the main asset object at <c>assetPath</c>.</para>
        <para>All paths are relative to the Project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetSubFolders(System.String)">
      <summary>Given an absolute path to a directory, this method will return an array of all it's subdirectories.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaFilePathFromAssetPath(System.String)">
      <summary>Gets the path to the text .meta file associated with an asset.</summary>
      <param name="path">The path to the asset.</param>
      <returns>The path to the .meta text file or empty string if the file does not exist.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetUnusedAssetBundleNames">
      <summary>Return all the unused assetBundle names in the asset database.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)">
      <summary>
        <para>Translate a GUID to its current asset path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String,UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <seealso cref="T:UnityEditor.ImportAssetOptions" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <seealso cref="T:UnityEditor.ImportAssetOptions" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportPackage(System.String,System.Boolean)">
      <summary>
        <para>Imports package at packagePath into the current project.</para>
        <para>If interactive is true, an import package dialog will be opened, else all assets in the package will be imported into the current project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(UnityEngine.Object)">
      <summary>Is asset a foreign asset?</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(System.Int32)">
      <summary>Is asset a foreign asset?</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(System.Int32)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAssetAtPathLoaded(System.String)">
      <summary>
        <para>Returns true if the main asset object at <c>assetPath</c> is loaded in memory.</para>
        <para>All paths are relative to the Project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
      <seealso cref="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)" />
      <seealso cref="M:UnityEngine.Resources.UnloadAsset(UnityEngine.Object)" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(UnityEngine.Object)">
      <summary>Is asset a native asset?</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(System.Int32)">
      <summary>Is asset a native asset?</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <returns>True is the asset can be edited.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <returns>True is the asset can be edited.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,System.String@)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <param name="message">Used to give reason for not open.</param>
      <returns>True is the asset can be edited.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,System.String@)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <param name="message">Used to give reason for not open.</param>
      <returns>True is the asset can be edited.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(UnityEngine.Object)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="obj">The asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(System.Int32)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="instanceID">Instance ID of the asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsValidFolder(System.String)">
      <summary>Given an absolute path to a folder, returns true if it exists, false otherwise.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(System.String)">
      <summary>
        <para>Returns all asset representations at <c>assetPath</c>.</para>
        <para>Asset representations are objects in the asset that are visible in the Project view. All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <seealso cref="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)" />
      <seealso cref="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)" />
      <seealso cref="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)">
      <summary>
        <para>Returns an array of all asset objects at <c>assetPath</c>.</para>
        <para>Some asset files may contain multiple objects (such as a Maya file which may contain multiple Meshes and GameObjects). All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png". This function returns all asset objects at a given path including hidden in the Project view. In the example that follows an asset with all its children are displayed. The parent asset has child assets. Note that assets can be combined using <see cref="UnityEditor.AssetDatabase.AddObjectToAsset" />. (The example at <c>AddObjectToAsset</c> adds an animation clip to a material.)</para>
      </summary>
      <param name="assetPath">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns the first asset object of type type at given path assetPath.</para>
        <para>Some asset files may contain multiple objects. (such as a Maya file which may contain multiple Meshes and GameObjects). All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png". Note: The assetPath parameter is not case sensitive. ALL asset names and paths in Unity use forward slashes, even on Windows. This returns only an asset object that is visible in the Project view. If the asset is not found <c>LoadAssetAtPath</c> returns Null.</para>
      </summary>
      <param name="assetPath">Path of the asset to load.</param>
      <param name="type">Data type of the asset.</param>
      <returns>The asset matching the parameters.</returns>
      <seealso cref="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)" />
      <seealso cref="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)">
      <summary>
        <para>Returns the main asset object at <c>assetPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
      <seealso cref="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)" />
      <seealso cref="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAsset(System.String,System.String)">
      <summary>
        <para>Move an asset file from one folder to another.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>An empty string if the asset has been successfully moved, otherwise an error message.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAssetToTrash(System.String)">
      <summary>
        <para>Moves the asset at path to the trash.</para>
        <para>Returns true if the asset has been successfully removed, false if it doesn't exit or couldn't be moved to the trash. All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is. If it is a text file, <c>lineNumber</c> instructs the text editor to go to that line. Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is. If it is a text file, <c>lineNumber</c> instructs the text editor to go to that line. Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object[])">
      <summary>
        <para>Opens the asset(s) with associated application(s).</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is. Returns true if all assets opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh(UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder. This method implicitly triggers an asset garbage collection (see <see cref="UnityEngine.Resources.UnloadUnusedAssets" />).</para>
      </summary>
      <seealso cref="T:UnityEditor.ImportAssetOptions" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder. This method implicitly triggers an asset garbage collection (see <see cref="UnityEngine.Resources.UnloadUnusedAssets" />).</para>
      </summary>
      <seealso cref="T:UnityEditor.ImportAssetOptions" />
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveAssetBundleName(System.String,System.Boolean)">
      <summary>Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.</summary>
      <param name="assetBundleName">The assetBundle name you want to remove.</param>
      <param name="forceRemove">Flag to indicate if you want to remove the assetBundle name even it's in use.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveUnusedAssetBundleNames">
      <summary>Remove all the unused assetBundle names in the asset database.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RenameAsset(System.String,System.String)">
      <summary>
        <para>Rename an asset file.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="pathName">The path where the asset currently resides.</param>
      <param name="newName">The new name which should be given to the asset.</param>
      <returns>An empty string, if the asset has been successfully renamed, otherwise an error message.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SaveAssets">
      <summary>
        <para>Writes all unsaved asset changes to disk.</para>
        <para>This function does the same thing as EditorApplication.SaveAssets, with the exception that it is not permitted to be called during serialization. EditorApplication.SaveAssets will deprecated in a future release, so please this API to maintain future compatibility.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SetLabels(UnityEngine.Object,System.String[])">
      <summary>Replaces that list of labels on an asset.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StartAssetEditing">
      <summary>Begin Asset importing. This lets you group several asset imports together into one larger import.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StopAssetEditing">
      <summary>Stop Asset importing. This lets you group several asset imports together into one larger import.</summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ValidateMoveAsset(System.String,System.String)">
      <summary>
        <para>Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>An empty string if the asset can be moved, otherwise an error message.</returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.WriteImportSettingsIfDirty(System.String)">
      <summary>
        <para>Writes the import settings to disk.</para>
        <para>In order to make the cache server import assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleName">
      <summary>Get or set the AssetBundle name.</summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleVariant">
      <summary>
        <para>Get or set the AssetBundle variant.</para>
        <para>AssetBundle variant is combined with the AssetImporter.assetBundleName as the file extension to generate the full AssetBundle name. AssetBundle variant is used to achieve virtual assets via AssetBundle. AssetBundles which have the same AssetBundle name but different AssetBundle variants will have the same internal IDs. So they can be switched out arbitrarily with AssetBundles of different variants. Please make sure the assets exactly match in variant AssetBundles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetPath">
      <summary>The path name of the asset for this importer. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.userData">
      <summary>
        <para>Get or set any user data.</para>
        <para>This can be useful during asset post processing if you want to associate eg. a model with an auxillary xml file to control some parts of the importing or you can put your xml data directly in to the userData field.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.SaveAndReimport">
      <summary>
        <para>Save asset importer settings if asset importer is dirty.</para>
        <para>Under the hood this calls <see cref="UnityEditor.AssetDatabase.ImportAsset" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.SetAssetBundleNameAndVariant(System.String,System.String)">
      <summary>Set the AssetBundle name and variant.</summary>
      <param name="assetBundleName">AssetBundle name.</param>
      <param name="assetBundleVariant">AssetBundle variant.</param>
    </member>
    <member name="M:UnityEditor.AssetImporter.GetAtPath(System.String)">
      <summary>Retrieves the asset importer for the asset at <c>path</c>.</summary>
      <seealso cref="T:UnityEditor.ModelImporter" />
      <seealso cref="T:UnityEditor.TextureImporter" />
      <seealso cref="T:UnityEditor.AudioImporter" />
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetImporter">
      <summary>Reference to the asset importer.</summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetPath">
      <summary>The path name of the asset being imported.</summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetPostprocessOrder">
      <summary>
        <para>Override the order in which importers are processed.</para>
        <para>By overriding GetImportOrder you can sort in which order postprocessors are executed. Smaller priorities will be imported first.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetVersion">
      <summary>
        <para>Returns the version of the asset postprocessor.</para>
        <para>When the script is recompiled, if a version change is detected, the assets associated with this asset postprocessor will be reimported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnAssignMaterialModel(UnityEngine.Material,UnityEngine.Renderer)">
      <summary>
        <para>Feeds a source material.</para>
        <para>The returned material will be assigned to the renderer. If you return null, Unity will use its default material finding / generation method to assign a material. The <c>sourceMaterial</c> is generated directly from the model before importing and will be destroyed immediately after OnAssignMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessAllAssets(System.String[],System.String[],System.String[],System.String[])">
      <summary>
        <para>This is called after importing of any number of assets is complete (when the Assets progress bar has reached the end).</para>
        <para>This call can occur after a manual reimport, or any time you move an asset or folder of assets to a new location in the Project View. All string arrays are filepaths relative to the Project's root Assets folder. <c>importedAssets</c> contains paths of all assets used in the operation. Each consecutive index of <c>movedAssets</c> and <c>movedFromAssetPaths</c> will always refer to the same asset. If you perform a bulk operation on several individual assets instead of a folder containing those assets, this function will be called once per asset with each individual asset as the only item in the various arrays. Note that this function must be declared <c>static</c> - it will not be called correctly if declared as an instance function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessAssetbundleNameChanged(System.String,System.String,System.String)">
      <summary>
        <para>Handler called when asset is assigned to a different asset bundle.</para>
        <para>Add this function in a subclass to get a notification after the assetBundle name for the asset changes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessAudio(UnityEngine.AudioClip)">
      <summary>Add this function in a subclass to get a notification when an audio clip has completed importing.</summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(UnityEngine.GameObject,System.String[],System.Object[])">
      <summary>
        <para>Gets called for each GameObject that had at least one user property attached to it in the imported file.</para>
        <para>The second argument string array (propNames) contains all the names of the properties found. The System.Object array (values) contains all the actual values. These can be of type string, Vector4, bool, Color, float, int. A typical use case for this feature is reading out "userdata" stored on objects in 3dmax/maya. Depending on what is written in the text userdata for an object, you could decide to postprocess your GameObject in different ways. For a detailed description of the stage when the function is invoked see <see cref="UnityEditor.AssetPostprocessor" />. Please note that the GameObjects and Meshes only exist during the import and will be destroyed immediately afterwards. This function is called before the final prefab is created and before it is written to disk, thus you have full control over the generated game objects and components. Any references to game objects or meshes will become invalid after the import has been completed. Thus it is not possible to create a new prefab in a different file from OnPostprocessGameObjectWithUserProperties that references meshes in the imported fbx file. The sample JS example below adds a simple BoxCollider component if the userdata string contains "addboxcollider". The c# version is similar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessModel(UnityEngine.GameObject)">
      <summary>
        <para>Add this function in a subclass to get a notification when a model has completed importing.</para>
        <para>This lets you modify the imported Game Object, Meshes, AnimationClips referenced by it. Please note that the GameObjects, AnimationClips and Meshes only exist during the import and will be destroyed immediately afterwards. This function is called before the final prefab is created and before it is written to disk, thus you have full control over the generated game objects and components. Any references to game objects or meshes will become invalid after the import has been completed. Thus it is not possible to create a new prefab in a different file from OnPostprocessModel that references meshes in the imported fbx file. <c>root</c> is the root game object of the imported model.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessSpeedTree(UnityEngine.GameObject)">
      <summary>
        <para>Add this function in a subclass to get a notification when a SpeedTree asset has completed importing.</para>
        <para>This function behaves much like <see cref="UnityEditor.AssetPostprocessor.OnPostprocessModel" /> where modifications are allowed on the final imported prefab before being saved on the disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessSprites(UnityEngine.Texture2D,UnityEngine.Sprite[])">
      <summary>
        <para>Add this function in a subclass to get a notification when an texture of sprite(s) has completed importing.</para>
        <para>For Multiple sprite-mode assets each sprite will be passed in the second argument as an array of sprites.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPostprocessTexture(UnityEngine.Texture2D)">
      <summary>
        <para>Add this function in a subclass to get a notification when a texture has completed importing just before.</para>
        <para>The texture is optionally compressed and saved to disk. At this point it is too late to choose compression format, it is still possible to compress the texture using texture.Compress but this is not adviced and the compression format will not be displayed in the editor. Use OnPreprocessTexture if you wish to change compression format based on filename or other attributes of the texture. If the texture is modified as in the example below it is required to be readable. The flag isReadable must to set True in importer settings either from the editor(Read/Write Enabled) or in the OnPreprocessTexture function. If the texture does not have to be readable at runtime use texture.Apply(true, true) to update the mipmaps and make the texture unreadable at runtime.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPreprocessAnimation">
      <summary>
        <para>Add this function in a subclass to get a notification just before animation from a model (.fbx, .mb file etc.) is imported.</para>
        <para>This lets you control the import settings through code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPreprocessAudio">
      <summary>
        <para>Add this function in a subclass to get a notification just before an audio clip is being imported.</para>
        <para>This lets you control the import settings trough code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPreprocessModel">
      <summary>
        <para>Add this function in a subclass to get a notification just before a model (.fbx, .mb file etc.) is imported.</para>
        <para>This lets you control the import settings through code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPreprocessSpeedTree">
      <summary>
        <para>Add this function in a subclass to get a notification just before a SpeedTree asset (.spm file) is imported.</para>
        <para>This function behaves much like <see cref="UnityEditor.AssetPostprocessor.OnPreprocessModel" /> where you can control the SpeedTree asset import settings through code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.OnPreprocessTexture">
      <summary>
        <para>Add this function in a subclass to get a notification just before the texture importer is run.</para>
        <para>This lets you setup default values for the import settings. Use textureImporter.isReadable to make the texture readable in OnPostprocessTexture if you wish to change the texture data eg. to do premultiplication of alpha. Should you want to change compression format of the texture this is where it should be done.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetAssetPreview(UnityEngine.Object)">
      <summary>Returns a preview texture for an asset.</summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniThumbnail(UnityEngine.Object)">
      <summary>Returns the thumbnail for an object (like the ones you see in the project view).</summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail(System.Type)">
      <summary>Returns the thumbnail for the type.</summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreview(System.Int32)">
      <summary>Loading previews is asynchronous so it is useful to know if a specific asset preview is in the process of being loaded so client code e.g can repaint while waiting for the loading to finish.</summary>
      <param name="instanceID">InstanceID of the assset that a preview has been requested for by: AssetPreview.GetAssetPreview().</param>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreviews">
      <summary>Loading previews is asynchronous so it is useful to know if any requested previews are in the process of being loaded so client code e.g can repaint while waiting.</summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.SetPreviewTextureCacheSize(System.Int32)">
      <summary>
        <para>Set the asset preview cache to a size that can hold all visible previews on the screen at once.</para>
        <para>If showing previews in a scrollpane make sure the cache larger than the count of the visible previews otherwise flickering will occur since least used previews will be unloaded to make space in the cache.</para>
      </summary>
      <param name="size">The number of previews that can be loaded into the cache before the least used previews are being unloaded.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawCurve(UnityEngine.Rect,AudioCurveRendering.AudioCurveEvaluator,UnityEngine.Color)">
      <summary>Renders a thin curve determined by the curve evaluation function. The solid color of the curve is set by the curveColor argument.</summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Curve evaluation function.</param>
      <param name="curveColor">Solid fill color of the curve. The alpha-channel determines the amount of opacity.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawFilledCurve(UnityEngine.Rect,AudioCurveRendering.AudioCurveEvaluator,UnityEngine.Color)">
      <summary>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and the bottom of the rectngle with smooth gradients along the edges.</summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
      <param name="curveColor">Solid fill color of the curve. The alpha-channel determines the amount of opacity.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawFilledCurve(UnityEngine.Rect,AudioCurveRendering.AudioCurveAndColorEvaluator)">
      <summary>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and the bottom of the rectngle with smooth gradients along the edges.</summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawMinMaxFilledCurve(UnityEngine.Rect,AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator)">
      <summary>Fills the area between the two curves evaluated by the AudioMinMaxCurveAndColorEvaluator provided with smooth gradients along the edges.</summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the min- and max-curves should be evaluated. The returned minValue and maxValue values are expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawSymmetricFilledCurve(UnityEngine.Rect,AudioCurveRendering.AudioCurveAndColorEvaluator)">
      <summary>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and its vertical mirror image with smooth gradients along the edges. Useful for drawing amplitude plots of audio signals.</summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [0; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
    </member>
    <member name="P:UnityEditor.AudioImporter.defaultSampleSettings">
      <summary>
        <para>The default sample settings for the AudioClip importer.</para>
        <para>These are the default settings for the AudioClip. If there are no overrides defined for a given build target, these settings will be used as the baseline for that platform.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.forceToMono">
      <summary>Force this clip to mono?</summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.loadInBackground">
      <summary>Corresponding to the "Load In Background" flag in the AudioClip inspector, when this flag is set, the loading of the clip will happen delayed without blocking the main thread.</summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.preloadAudioData">
      <summary>Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.</summary>
    </member>
    <member name="M:UnityEditor.AudioImporter.ClearSampleSettingOverride(System.String)">
      <summary>
        <para>Clears the sample settings override for the given platform.</para>
        <para>This reverts the given platform override sample override settings, making that platform use the defaultSampleSettings. The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS4", "PSP2", "XBoxOne", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to clear the overrides for.</param>
      <returns>Returns true if any overrides were actually cleared.</returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.ContainsSampleSettingsOverride(System.String)">
      <summary>
        <para>Returns whether a given build target has its sample settings currently overridden.</para>
        <para>The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS4", "PSP2", "XBoxOne", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to query if this AudioImporter has an override for.</param>
      <returns>Returns true if the platform is currently overriden in this AudioImporter.</returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.GetOverrideSampleSettings(System.String)">
      <summary>
        <para>Return the current override settings for the given platform.</para>
        <para>If there is no override for the passed platform, a defaults translated settings will be returned. The translated settings are what settings will be used by default for the given platform. For example, on some platforms, the compressionFormat will be different to capitalise on hardware decoders. The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS4", "PSP2", "XBoxOne", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to get the override settings for.</param>
      <returns>The override sample settings for the given platform.</returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.SetOverrideSampleSettings(System.String,UnityEditor.AudioImporterSampleSettings)">
      <summary>
        <para>Sets the override sample settings for the given platform.</para>
        <para>For some target platforms, it is desirable to override the audio importer settings to performance or other reasons. This function allows a given platform to have override settings registered. The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS4", "PSP2", "XBoxOne", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform which will have the sample settings overridden.</param>
      <param name="settings">The override settings for the given platform.</param>
      <returns>Returns true if the settings were successfully overriden. Some setting overrides are not possible for the given platform, in which case false is returned and the settings are not registered.</returns>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.compressionFormat">
      <summary>CompressionFormat defines the compression type that the audio file is encoded to. Different compression types have different performance and audio artifact characteristics.</summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.loadType">
      <summary>LoadType defines how the imported AudioClip data should be loaded.</summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.quality">
      <summary>Audio compression quality (0-1) Amount of compression. The value roughly corresponds to the ratio between the resulting and the source file sizes.</summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateOverride">
      <summary>Target sample rate to convert to when samplerateSetting is set to OverrideSampleRate.</summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateSetting">
      <summary>Defines how the sample rate is modified (if at all) of the importer audio file.</summary>
    </member>
    <member name="P:UnityEditor.BuildPipeline.isBuildingPlayer">
      <summary>Is a player currently being built?</summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build all AssetBundles specified in the editor.</para>
        <para>Use this function to build your asset bundles, after you have marked your assets for inclusion in named AssetBundles. Building AssetBundles for further details). This function builds the bundles you have specified in the editor and will return the manifest that includes all of the included assets. if the build was successful and false otherwise. Additionally, error messages are shown in the console to explain most common build failures such as incorrect target folder paths. The <c>outputPath</c> is a path to a folder somewhere within the project folder where the built bundles will be saved (eg, "Assets/MyBundleFolder"). The folder will not be created automatically and the function will simply fail if it doesn't already exist. The optional <c>assetBundleOptions</c> argument modify the way the bundle is built while the <c>targetPlatform/</c> selects which deployment target (Windows Standalone, Android, iOS, etc) the bundle will be used with. Note that bundles built for standalone platforms are not compatible with those built for mobiles and so you may need to produce different versions of a given bundle. The return value is of type <see cref="UnityEngine.AssetBundleManifest" />. This contains a list of all the assets included in the AssetBundle. Null is returned if any problems occur.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Chosen target build platform.</param>
      <returns>The manifest listing all AssetBundles included in this build.</returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.AssetBundleBuild[],UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build AssetBundles from a building map.</para>
        <para>This variant of the function lets you specify the names and contents of the bundles using a "build map" rather than with the details set in the editor. The map is simply an array of <see cref="UnityEditor.AssetBundleBuild" /> objects, each of which contains a bundle name and a list of the names of asset files to be added to the named bundle.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="builds">AssetBundle building map.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Target build platform.</param>
      <returns>The manifest listing all AssetBundles included in this build.</returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(UnityEditor.BuildPlayerOptions)">
      <summary>
        <para>Builds a player.</para>
        <para>Use this function to programatically create a build of your project. Note that any references to GameObjects acquired in the editor script <c>before</c> the BuildPlayer call will be invalid after it and will need to be reacquired.</para>
      </summary>
      <param name="buildPlayerOptions">Provide various options to control the behavior of <see cref="UnityEditor.BuildPipeline.BuildPlayer" />.</param>
      <returns>An error message if an error occurred.</returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>Builds a player. These overloads are still supported, but will be replaces by BuildPlayer (BuildPlayerOptions). Please use it instead.</summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (Assets/MyLevels/MyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The <see cref="UnityEditor.BuildTarget" /> to build.</param>
      <param name="options">Additional <see cref="UnityEditor.BuildOptions" />, like whether to run the built player.</param>
      <returns>An error message if an error occurred.</returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(UnityEditor.EditorBuildSettingsScene[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>Builds a player. These overloads are still supported, but will be replaces by BuildPlayer (BuildPlayerOptions). Please use it instead.</summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (Assets/MyLevels/MyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The <see cref="UnityEditor.BuildTarget" /> to build.</param>
      <param name="options">Additional <see cref="UnityEditor.BuildOptions" />, like whether to run the built player.</param>
      <returns>An error message if an error occurred.</returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.GetCRCForAssetBundle(System.String,System.UInt32@)">
      <summary>Extract the crc checksum for the given AssetBundle.</summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.GetHashForAssetBundle(System.String,UnityEngine.Hash128@)">
      <summary>Extract the hash for the given AssetBundle.</summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.assetBundleManifestPath">
      <summary>
        <para>The path to an manifest file describing all of the asset bundles used in the build (optional).</para>
        <para>The manifest file describing all of the asset files used in the build is created by the asset bundle build process. If this value is set, <see cref="UnityEditor.BuildPipeline.BuildPlayer" /> will ensure that any types used in the asset bundles are not stripped during the build process. This may be an absolute path or a path relative to the project directory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.locationPathName">
      <summary>The path where the application will be built.</summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.options">
      <summary>Additional <see cref="UnityEditor.BuildOptions" />, like whether to run the built player.</summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.scenes">
      <summary>The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (Assets/MyLevels/MyScene.unity).</summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.target">
      <summary>The <see cref="UnityEditor.BuildTarget" /> to build.</summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.curve">
      <summary>The animation curve.</summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.name">
      <summary>
        <para>The name of the animation curve.</para>
        <para>The curve is automatically binded to the animator controller parameter that has the same name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxBrightness">
      <summary>
        <para>Maximum allowed color component value when using the ColorPicker.</para>
        <para>In the HSV model the brightness (V) is defined as the largest component of a color.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxExposureValue">
      <summary>
        <para>Maximum exposure value allowed in the Color Picker.</para>
        <para>In the 'Advanced Preview' section of the HDR Color Picker tonemapping can be applied to the HDR Color this is with maximum allowed exposure value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minBrightness">
      <summary>Minimum allowed color component value when using the ColorPicker.</summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minExposureValue">
      <summary>
        <para>Minimum exposure value allowed in the Color Picker.</para>
        <para>In the 'Advanced Preview' section of the HDR Color Picker tonemapping can be applied to the HDR Color. This is with minimum allowed exposure value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DDSImporter.isReadable">
      <summary>Is texture data readable from scripts.</summary>
    </member>
    <member name="P:UnityEditor.DecoratorDrawer.attribute">
      <summary>
        <para>The <see cref="UnityEngine.PropertyAttribute" /> for the decorator. (Read Only)</para>
        <para>See <see cref="UnityEditor.DecoratorDrawer" /> for an example of how to use this.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.GetHeight">
      <summary>
        <para>Override this method to specify how tall the GUI for this decorator is in pixels.</para>
        <para>The default is one line high. See <see cref="UnityEditor.DecoratorDrawer" /> for an example of how to use this.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.OnGUI(UnityEngine.Rect)">
      <summary>Override this method to make your own GUI for the decorator. See <see cref="UnityEditor.DecoratorDrawer" /> for an example of how to use this.</summary>
      <param name="position">Rectangle on the screen to use for the decorator GUI.</param>
    </member>
    <member name="M:UnityEditor.DefaultAsset.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.activeControlID">
      <summary>Get or set ID of currently active drag and drop control.</summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.objectReferences">
      <summary>
        <para>References to <see cref="UnityEngine.Object" /> being dragged.</para>
        <para>Never returns null. If no object references are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.paths">
      <summary>
        <para>The file names being dragged.</para>
        <para>Never returns null. If no paths are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.visualMode">
      <summary>
        <para>The visual indication of the drag.</para>
        <para>Default is DragAndDropVisualMode.Link.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.AcceptDrag">
      <summary>Accept a drag operation.</summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.GetGenericData(System.String)">
      <summary>Get data associated with current drag and drop operation.</summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.PrepareStartDrag">
      <summary>
        <para>Clears drag &amp; drop data.</para>
        <para>Clears everything stored in the drag &amp; drop object and prepares it so you can write into it for initiating a drag operation.</para>
      </summary>
      <seealso cref="M:UnityEditor.DragAndDrop.StartDrag(System.String)" />
      <seealso cref="P:UnityEditor.DragAndDrop.paths" />
      <seealso cref="P:UnityEditor.DragAndDrop.objectReferences" />
    </member>
    <member name="M:UnityEditor.DragAndDrop.SetGenericData(System.String,System.Object)">
      <summary>Set data associated with current drag and drop operation.</summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.StartDrag(System.String)">
      <summary>
        <para>Start a drag operation.</para>
        <para>Initiates a drag operation with the current drag object state. Use <see cref="UnityEditor.DragAndDrop.paths" /> and/or <see cref="UnityEditor.DragAndDrop.objectReferences" /> to setup drag state.</para>
      </summary>
      <seealso cref="M:UnityEditor.DragAndDrop.PrepareStartDrag" />
      <seealso cref="P:UnityEditor.DragAndDrop.paths" />
      <seealso cref="P:UnityEditor.DragAndDrop.objectReferences" />
    </member>
    <member name="P:UnityEditor.Editor.serializedObject">
      <summary>
        <para>A <see cref="UnityEditor.SerializedObject" /> representing the object or objects being inspected.</para>
        <para>The serializedObject can be used inside the <see cref="UnityEditor.Editor.OnInspectorGUI" /> function of a custom Editor as described on the page about the <see cref="UnityEditor.Editor" /> class. The serializedObject should not be used inside <see cref="UnityEditor.Editor.OnSceneGUI" /> or <see cref="UnityEditor.Editor.OnPreviewGUI" />. Use the target property directly in those callback functions instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.target">
      <summary>
        <para>The object being inspected.</para>
        <para>For editors that support multi-object editing, the target property should not be used inside <see cref="UnityEditor.Editor.OnInspectorGUI" /> since it only refers to the first of the edited objects. It should still be used in <see cref="UnityEditor.Editor.OnSceneGUI" /> and <see cref="UnityEditor.Editor.OnPreviewGUI" />, which will be called once for each of the selected objects with the target property referring to each of them in turn.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.targets">
      <summary>
        <para>An array of all the object being inspected.</para>
        <para>For editors that support multi-object editing, the targets property can be used in <see cref="UnityEditor.Editor.OnInspectorGUI" />, but usually it is better to handle things through the <see cref="UnityEditor.Editor.serializedObject" /> instead as described on the page about the <see cref="UnityEditor.Editor" /> class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawDefaultInspector">
      <summary>
        <para>Draw the built-in inspector.</para>
        <para>Call this function from inside OnInspectorGUI method to draw the automatic inspector. It is useful you don't want to redo the entire inspector, but you want to add a few buttons to it.</para>
      </summary>
      <seealso cref="M:UnityEditor.Editor.OnInspectorGUI" />
    </member>
    <member name="M:UnityEditor.Editor.DrawHeader">
      <summary>
        <para>Call this function to draw the header of the editor.</para>
        <para>This function is relevant if you are creating and managing your own Editor objects.</para>
      </summary>
      <seealso cref="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)" />
    </member>
    <member name="M:UnityEditor.Editor.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>The first entry point for Preview Drawing.</para>
        <para>Draws a grid of previews if there are multiple targets available. Override this method if you want to customize this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.GetInfoString">
      <summary>
        <para>Implement this method to show asset information on top of the asset preview.</para>
        <para>You will also have to implement <see cref="UnityEditor.Editor.HasPreviewGUI" /> and <see cref="UnityEditor.Editor.OnPreviewGUI" /> in addition to this method. The default implementation just returns an empty string, which disables the feature. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
        <para>If null is returned the default text "Preview" will be used. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.HasPreviewGUI">
      <summary>
        <para>Override this method in subclasses if you implement <see cref="UnityEditor.Editor.OnPreviewGUI" />.</para>
        <para>You can also use it to disable or enable preview depending on the target asset. The default implementation simply returns false, so if you override <see cref="UnityEditor.Editor.OnPreviewGUI" /> you have to override this method as well. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.Editor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class. Note: This function has to be overrided in order to work. Check the example:</para>
      </summary>
      <seealso cref="M:UnityEditor.Editor.DrawDefaultInspector" />
    </member>
    <member name="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of <see cref="UnityEditor.Editor.OnPreviewGUI" /> if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't). The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement <see cref="UnityEditor.Editor.OnInteractivePreviewGUI" /> then this will only be called for non-interactive custom previews. The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
      <summary>
        <para>Override this method if you want to render a static preview that shows.</para>
        <para>If null is returned the builtin icon for the class type is used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.Repaint">
      <summary>
        <para>Repaint any inspectors that shows this editor.</para>
        <para>Useful when you want to make sure the inspector updates to show changes made in <see cref="UnityEditor.Editor.OnSceneGUI" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RequiresConstantRepaint">
      <summary>Does this edit require to be repainted constantly in its current state?</summary>
    </member>
    <member name="M:UnityEditor.Editor.UseDefaultMargins">
      <summary>
        <para>Override this method in subclasses to return false if you don't want default margins.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. This is because the entire <see cref="UnityEditor.Editor.OnInspectorGUI" /> callback is wrapped in a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorDefaultMargins" /> style. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the <see cref="UnityEditor.Editor.UseDefaultMargins" /> method in your custom Editor and make it return false. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorFullWidthMargins" /> style and wrap other parts of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorDefaultMargins" /> style.</para>
      </summary>
      <seealso cref="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.EndVertical" />
      <seealso cref="P:UnityEditor.EditorStyles.inspectorDefaultMargins" />
      <seealso cref="P:UnityEditor.EditorStyles.inspectorFullWidthMargins" />
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object,System.Type,UnityEditor.Editor@)">
      <summary>
        <para>On return <c>previousEditor</c> is an editor for <c>targetObject</c> or <c>targetObjects</c>. The function either returns if the editor is already tracking the objects, or Destroys the previous editor and creates a new one.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. previousEditor will be NULL if <c>objects</c> are of different types or if no approprate editor was found.</para>
      </summary>
      <param name="editorType">The requested editor type. null for the default editor for the object.</param>
      <param name="previousEditor">The previous editor for the object. Once CreateCachedEditor returns <c>previousEditor</c> is an editor for the <c>targetObject</c> or <c>targetObjects</c>.</param>
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[],System.Type,UnityEditor.Editor@)">
      <summary>
        <para>On return <c>previousEditor</c> is an editor for <c>targetObject</c> or <c>targetObjects</c>. The function either returns if the editor is already tracking the objects, or Destroys the previous editor and creates a new one.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. previousEditor will be NULL if <c>objects</c> are of different types or if no approprate editor was found.</para>
      </summary>
      <param name="editorType">The requested editor type. null for the default editor for the object.</param>
      <param name="previousEditor">The previous editor for the object. Once CreateCachedEditor returns <c>previousEditor</c> is an editor for the <c>targetObject</c> or <c>targetObjects</c>.</param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. Returns NULL if <c>objects</c> are of different types or if no approprate editor was found. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.</para>
        <para>And the script attached to a waypath GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. Returns NULL if <c>objects</c> are of different types or if no approprate editor was found. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.</para>
        <para>And the script attached to a waypath GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[],System.Type)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. Returns NULL if <c>objects</c> are of different types or if no approprate editor was found. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.</para>
        <para>And the script attached to a waypath GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[])">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Use this if you have created multiple custom editors where each editor shows different properties of the object. Returns NULL if <c>objects</c> are of different types or if no approprate editor was found. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.</para>
        <para>And the script attached to a waypath GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnSceneGUI">
      <summary>
        <para>Enables the Editor to handle an event in the scene view.</para>
        <para>In the <see cref="UnityEditor.Editor.OnSceneGUI" /> you can do for example mesh editing, terrain painting or advanced gizmos. If <c>Event.current.Use()</c> is called the event will be "eaten" by the editor and not be used by the scene view itself.</para>
        <para>In the following two scripts <see cref="UnityEditor.Editor.OnSceneGUI" /> is used to draw lines between game objects. The first script shows how <see cref="UnityEditor.Editor.OnSceneGUI" /> is used. In this script a game object is used as a parent. The position of the parent is obtained and then lines are draw from this to game objects stored in an array. The <see cref="UnityEditor.Handles.DrawLine" /> function is used for this. The documentation for <see cref="UnityEditor.Handles.DrawLine" /> has a very similar example.</para>
        <para>This script stores the array of game objects which will have a line drawn to them. This regular script is simply attached to a game object which is considered to be the starting point for all lines.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationContentsPath">
      <summary>
        <para>Path to the Unity editor contents folder. (Read Only)</para>
        <para>The contents folder contains several items internally required by the editor for building players.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationPath">
      <summary>Returns the path to the Unity editor application. (Read Only)</summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.delayCall">
      <summary>
        <para>Delegate which is called once after all inspectors update.</para>
        <para>Add functions to this delegate in order to delay their execution until after inspectors have updated. Each function is only executed once after it is added.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowChanged">
      <summary>
        <para>A callback to be raised when an object in the hierarchy changes. Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.</para>
        <para>Note: Changing the HideFlags on an object will also cause this callback to be called.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI">
      <summary>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isCompiling">
      <summary>Is editor currently compiling scripts? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPaused">
      <summary>
        <para>Is editor currently paused?</para>
        <para>Lets you change pause state programmatically, like pressing the Pause button in the main toolbar.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlaying">
      <summary>
        <para>Is editor currently in play mode?</para>
        <para>Setting isPlaying delays the result until after all script code has completed for this frame.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlayingOrWillChangePlaymode">
      <summary>
        <para>Is editor either currently in play mode, or about to switch to it? (Read Only)</para>
        <para>This will return true when editor will switch to play mode after finishing some tasks (e.g. after scripts will be recompiled).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isRemoteConnected">
      <summary>
        <para>Is editor currently connected to Unity Remote 4 client app.</para>
        <para>This lets you to check if editor has successfully connected to Unity Remote 4 client, and data is being transferred between them.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isUpdating">
      <summary>This property is true if the Editor is currently refreshing the AssetDatabase. During this time, the editor checks to see if any files have changed, whether they need to be reimported, and reimports them. (Read Only)</summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.modifierKeysChanged">
      <summary>
        <para>Delegate for changed keyboard modifier keys.</para>
        <para>Add your functions to this delegate to get a callback whenever the keyboard modifier keys have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.playmodeStateChanged">
      <summary>
        <para>Delegate for play mode state changes.</para>
        <para>Add your functions to this delegate to get a callback whenever the playmode state changes (enter/exit play mode, pause).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowChanged">
      <summary>
        <para>Callback raised whenever the state of the Project window changes.</para>
        <para>This callback is raised whenever the state of the Unity Editor's Project window changes - for example, when an Asset is created, removed, renamed or or reparented. This example is not exhaustive; any Asset change or folder re-arrangement that is reflected in the Project window triggers this callback.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowItemOnGUI">
      <summary>Delegate for OnGUI events for every visible list item in the ProjectWindow.</summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.searchChanged">
      <summary>Callback raised whenever the contents of a window's search box are changed.</summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.timeSinceStartup">
      <summary>
        <para>The time since the editor was started. (Read Only)</para>
        <para>This property contains the time since the editor was started, in seconds. Unlike Time.realtimeSinceStartup, this is not reset when starting play mode. <c>Simple Editor Window that saves each 300 seconds the current scene.</c></para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.update">
      <summary>
        <para>Delegate for generic updates.</para>
        <para>Add your functions to this delegate to get an update.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Beep">
      <summary>Plays system beep sound.</summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.DirtyHierarchyWindowSorting">
      <summary>
        <para>Set the hierarchy sorting method as dirty.</para>
        <para>Causes the hierarchy to reset the avaliable sorting methods.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.ExecuteMenuItem(System.String)">
      <summary>
        <para>Invokes the menu item in the specified path.</para>
        <para>This function also works with Editor Scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Exit(System.Int32)">
      <summary>
        <para>Exit the Unity editor application.</para>
        <para>Calling this function will exit right away, without asking to save changes, so you may lose data! This function is mostly useful for exiting out of a commandline process with a specific error.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveAsyncInPlayMode(System.String)">
      <summary>Load the given level additively in play mode asynchronously</summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveInPlayMode(System.String)">
      <summary>Load the given level additively in play mode.</summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAsyncInPlayMode(System.String)">
      <summary>Load the given level in play mode asynchronously.</summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelInPlayMode(System.String)">
      <summary>Load the given level in play mode.</summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LockReloadAssemblies">
      <summary>
        <para>Prevents loading of assemblies when it is inconvenient.</para>
        <para>For example during drag operations you might want to prevent assembly reloading to not lose state during the drag. Each LockReloadAssemblies must be matched by UnlockReloadAssemblies, otherwise scripts will never unload. Unity automatically prevents reloading during mouse down.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenProject(System.String,System.String[])">
      <summary>
        <para>Open another project.</para>
        <para>Note that this function will not exit immediately. It will open another project after executing function returns.</para>
      </summary>
      <param name="projectPath">The path of a project to open.</param>
      <param name="args">Arguments to pass to command line.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintHierarchyWindow">
      <summary>Can be used to ensure repaint of the HierarchyWindow.</summary>
      <seealso cref="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI" />
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintProjectWindow">
      <summary>Can be used to ensure repaint of the ProjectWindow.</summary>
      <seealso cref="F:UnityEditor.EditorApplication.projectWindowItemOnGUI" />
    </member>
    <member name="M:UnityEditor.EditorApplication.Step">
      <summary>
        <para>Perform a single frame step.</para>
        <para>As if you pressed the Step button in the main toolbar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.UnlockReloadAssemblies">
      <summary>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettings.scenes">
      <summary>The list of Scenes that should be included in the build. This is the same list of Scenes that is shown in the Build Settings window. You can modify this list to set up which Scenes should be included in the build.</summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettingsScene.enabled">
      <summary>Whether this scene is enabled in the Build Settings window or not. See <see cref="UnityEditor.EditorBuildSettings.scenes" /> for an example of how to use this class.</summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettingsScene.path">
      <summary>The file path of the scene as listed in the Editor Build Settings scene list. See <see cref="UnityEditor.EditorBuildSettings.scenes" /> for an example of how to use this class.</summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.path">
      <summary>The transform path of the object that is animated.</summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.propertyName">
      <summary>The property of the object that is animated.</summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.actionKey">
      <summary>
        <para>Is the platform-dependent "action" modifier key held down? (Read Only)</para>
        <para>The key is Command on macOS, Control on Windows. <c>Action Key usage, key not pressed/key pressed.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.indentLevel">
      <summary>
        <para>The indent level of the field labels.</para>
        <para>To maximize future compatibility, do not make assumptions about what a specific indent level means, but instead just increase or decrease by one around blocks of controls that need to be more indented, as in the example above.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.showMixedValue">
      <summary>
        <para>Makes the following controls give the appearance of editing multiple different values.</para>
        <para>This is sometimes useful when creating custom editors and you want to represent a value in a non-standard way in the GUI while also supporting multi-object editing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginChangeCheck">
      <summary>
        <para>Check if any control was changed inside a block of code.</para>
        <para>When needing to check if GUI.changed is set to true inside a block of code, wrap the code inside BeginChangeCheck () and EndChangeCheck () like this:</para>
        <para>EndChangeCheck will only return true if GUI.changed was set to true inside the block, but GUI.changed will be true afterwards both if it was set to true inside and if it was already true to begin with.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
        <para>If disabled is true, the controls inside the group will be disabled. If false, the enabled/disabled state will not be changed. Note: The use of EditorGUI.DisabledScope is usually preferred over EditorGUI.BeginDisabledGroup()/EditorGUI.EndDisabledGroup(), as it provides a safer, scoped mechanism.</para>
        <para>The group cannot be used to enable controls that would otherwise be disabled to begin with. The groups can be nested and the controls within a child group will be disabled both if that child group is itself disabled or if a parent group is.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with <see cref="UnityEditor.SerializedProperty" />.</para>
        <para>Most <see cref="UnityEditor.EditorGUI" /> and <see cref="UnityEditor.EditorGUILayout" /> GUI controls already have overloads that work with SerializedProperty. However, for GUI controls that don't handle SerializedProperty you can wrap them inside BeginProperty and EndProperty as shown in the example below. You can use this for your own custom GUI controls too. BeginProperty and EndProperty automatically handle default labels, bold font for prefab overrides, revert to prefab right click menu, and setting <see cref="UnityEditor.EditorGUI.showMixedValue" /> to true if the values of the property are different when multi-object editing.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
      <param name="label">Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <returns>The actual label to use for the control.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EndProperty" />
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp; Extents field for entering a <see cref="UnityEngine.Bounds" />.</para>
        <para>
          <c>Bounds field in an Editor Window.</c>
        </para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp; Extents field for entering a <see cref="UnityEngine.Bounds" />.</para>
        <para>
          <c>Bounds field in an Editor Window.</c>
        </para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.Color)">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The color to edit.</param>
      <returns>The color selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,System.String,UnityEngine.Color)">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>The color selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color)">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>The color selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,UnityEditor.ColorPickerHDRConfig)">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <returns>The color selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</para>
        <para>This is the run-time script which animates the attached GameObject:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>The curve edited by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect)">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.Double)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.String,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.String,System.Double)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.Single)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.String,System.Single)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="property">The float property to edit.</param>
      <param name="label">Optional label to display in front of the float field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="property">The float property to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="property">The int property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="property">The int property to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="property">The text property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUI.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="property">The text property to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.String,System.Double,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.String,System.Double)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double)">
      <summary>Make a text field for entering doubles.</summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise. <c>Preview Texture in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise. <c>Preview Texture in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise. <c>Preview Texture in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise. <c>Preview Texture in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawRect(UnityEngine.Rect,UnityEngine.Color)">
      <summary>Draws a filled rectangle of color at the specified position and size within the current editor window.</summary>
      <param name="rect">The position and size of the rectangle to draw.</param>
      <param name="color">The color of the rectange.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>
          <c>Alpha texture in an Editor Window.</c>
        </para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
      <seealso cref="P:UnityEngine.GUI.color" />
      <seealso cref="P:UnityEngine.GUI.contentColor" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>
          <c>Alpha texture in an Editor Window.</c>
        </para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <seealso cref="P:UnityEngine.GUI.color" />
      <seealso cref="P:UnityEngine.GUI.contentColor" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>
          <c>Alpha texture in an Editor Window.</c>
        </para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture" /> to display.</param>
      <seealso cref="P:UnityEngine.GUI.color" />
      <seealso cref="P:UnityEngine.GUI.contentColor" />
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution. <c>Shadow Label in and editor window.</c></para>
      </summary>
      <param name="position">Where to show the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution. <c>Shadow Label in and editor window.</c></para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution. <c>Shadow Label in and editor window.</c></para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="style">style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution. <c>Shadow Label in and editor window.</c></para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show</param>
      <param name="style">style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndChangeCheck">
      <summary>Ends a change check started with BeginChangeCheck ().</summary>
      <returns>True if GUI.changed was set to true, otherwise false.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.BeginChangeCheck" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EndDisabledGroup">
      <summary>Ends a disabled group started with BeginDisabledGroup.</summary>
      <seealso cref="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EndProperty">
      <summary>Ends a Property wrapper started with <see cref="UnityEditor.EditorGUI.BeginProperty" />.</summary>
      <seealso cref="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Caption/label for the control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Caption/label for the control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Caption/label for the control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>Make a field for enum based masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Caption/label for the control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Enum Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>The enum option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single)">
      <summary>Make a text field for entering floats.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FocusTextInControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named text field and begin editing of the content.</para>
        <para>In Editor GUI, text fields can have keyboard focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. <see cref="UnityEditor.EditorGUI.FocusTextInControl" /> is like <see cref="UnityEngine.GUI.FocusControl" /> in that it gives keyboard focus to a control, but it also begins editing of the text itself.</para>
      </summary>
      <param name="name">Name set using <see cref="UnityEngine.GUI.SetNextControlName" />.</param>
      <seealso cref="M:UnityEngine.GUI.SetNextControlName(System.String)" />
      <seealso cref="M:UnityEngine.GUI.GetNameOfFocusedControl" />
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Foldout in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Get the height needed for a <see cref="UnityEditor.EditorGUI.PropertyField" /> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Get the height needed for a <see cref="UnityEditor.EditorGUI.PropertyField" /> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)">
      <summary>
        <para>Get the height needed for a <see cref="UnityEditor.EditorGUI.PropertyField" /> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="UnityEngine.Rect" /> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" /> to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="UnityEngine.Rect" /> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="UnityEngine.Rect" /> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HelpBox(UnityEngine.Rect,System.String,UnityEditor.MessageType)">
      <summary>Make a help box with a message to the user.</summary>
      <param name="position">Rectangle on the screen to draw the help box within.</param>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied. <c>Inspector titlebar in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>The foldout state selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object[],System.Boolean)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied. <c>Inspector titlebar in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObjs">The objects that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>The foldout state selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>Make a text field for entering integers.</summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Int Popup in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>The value of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.Int32,System.Int32,System.Int32)">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>Make a layer selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>The layer selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering long integers.</summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64)">
      <summary>Make a text field for entering long integers.</summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle)">
      <summary>Make a text field for entering long integers.</summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64)">
      <summary>Make a text field for entering long integers.</summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)" />
      <seealso cref="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[])">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>Make a field for masks.</summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>The value modified by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.GUIContent,UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.String,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent[],System.Single[])">
      <summary>Make a multi-control with text fields for entering multiple floats in the same line.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent[],System.Single[])">
      <summary>Make a multi-control with text fields for entering multiple floats in the same line.</summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in <see cref="UnityEditor.Editor" /> class. <c>Object field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>The object that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="label">Optional label to display in front of the field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type)">
      <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent)">
      <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label to display in front of the field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Password Field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>The password entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Popup in and Editor Window.</c></para>
        <para>Note: The <c>displayedOptions</c> lists an array of options. When these elements contain "/" (slash characters) the elements are use for sub-menus. The text to the left of the slashes determines the structure.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>The index of the option that has been selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Prefix Label in an Editor Window.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
        <para>And the script attached to the editor script:</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>Rectangle on the screen to use just for the control itself.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Prefix Label in an Editor Window.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
        <para>And the script attached to the editor script:</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>Rectangle on the screen to use just for the control itself.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Prefix Label in an Editor Window.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
        <para>And the script attached to the editor script:</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>Rectangle on the screen to use just for the control itself.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Prefix Label in an Editor Window.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
        <para>And the script attached to the editor script:</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>Rectangle on the screen to use just for the control itself.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ProgressBar(UnityEngine.Rect,System.Single,System.String)">
      <summary>
        <para>Make a progress bar.</para>
        <para>Value goes from 0 to 1, where 0 means 0% of the bar filled and 1 means the bar is at 100% fully filled <c>Progress bar in an Editor Window.</c></para>
      </summary>
      <param name="value">Value that is shown.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Boolean)">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,System.String,UnityEngine.Rect)">
      <summary>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rect)">
      <summary>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String)">
      <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.String,System.Single,System.Single,System.Single)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,System.Single,System.Single)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,System.String)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent)">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>Make a tag selection field.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>The tag selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor. <c>Text Area in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor. <c>Text Area in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Text field in an Editor Window.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>The text entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIStyle)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>Make a toggle.</summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The selected state of the toggle.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUI.ToggleLeft" /> is similar to <see cref="UnityEngine.GUI.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="UnityEngine.GUIStyle" /> to use for the label.</param>
      <returns>The value set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUI.ToggleLeft" /> is similar to <see cref="UnityEngine.GUI.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>The value set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUI.ToggleLeft" /> is similar to <see cref="UnityEngine.GUI.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="UnityEngine.GUIStyle" /> to use for the label.</param>
      <returns>The value set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUI.ToggleLeft" /> is similar to <see cref="UnityEngine.GUI.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>The value set by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,System.String,UnityEngine.Vector2)">
      <summary>Make an X &amp; Y field for entering a <see cref="UnityEngine.Vector2" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>Make an X &amp; Y field for entering a <see cref="UnityEngine.Vector2" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,System.String,UnityEngine.Vector3)">
      <summary>Make an X, Y &amp; Z field for entering a <see cref="UnityEngine.Vector3" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector3)">
      <summary>Make an X, Y &amp; Z field for entering a <see cref="UnityEngine.Vector3" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector4Field(UnityEngine.Rect,System.String,UnityEngine.Vector4)">
      <summary>Make an X, Y, Z &amp; W field for entering a <see cref="UnityEngine.Vector4" />.</summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginFadeGroup(System.Single)">
      <summary>Begins a group that can be be hidden/shown and the transition will be animated.</summary>
      <param name="value">A value between 0 and 1, 0 being hidden, and 1 being fully visible.</param>
      <returns>If the group is visible or not.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to <see cref="UnityEngine.GUILayout.BeginHorizontal" />. It can be used for making compound controls. <c>Horizontal Compound group.</c></para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to <see cref="UnityEngine.GUILayout.BeginHorizontal" />. It can be used for making compound controls. <c>Horizontal Compound group.</c></para>
      </summary>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor <c>Label inside a scroll view.</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor <c>Label inside a scroll view.</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor <c>Label inside a scroll view.</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle" /> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin" /> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle" /> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin" /> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor <c>Label inside a scroll view.</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle" /> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin" /> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle" /> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin" /> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
        <para>
          <c>Align position/rotation/scale of the selected GameObjects.</c>
        </para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>The enabled state selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.EndToggleGroup" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
        <para>
          <c>Align position/rotation/scale of the selected GameObjects.</c>
        </para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>The enabled state selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.EndToggleGroup" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to <see cref="UnityEngine.GUILayout.BeginVertical" />. It can be used for making compound controls. <c>Vertical Compound group.</c></para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to <see cref="UnityEngine.GUILayout.BeginVertical" />. It can be used for making compound controls. <c>Vertical Compound group.</c></para>
      </summary>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>Make Center &amp; Extents field for entering a <see cref="UnityEngine.Bounds" />.</summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(System.String,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>Make Center &amp; Extents field for entering a <see cref="UnityEngine.Bounds" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.GUIContent,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>Make Center &amp; Extents field for entering a <see cref="UnityEngine.Bounds" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The color selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The color selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The color selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,UnityEditor.ColorPickerHDRConfig,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for selecting a <see cref="UnityEngine.Color" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The color selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The curve edited by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for editing an <see cref="UnityEngine.AnimationCurve" />.</summary>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.String,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.String,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.DoubleField" /> but will not return the new value until the user has pressed enter or focus is moved away from the double field.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>. <see cref="UnityEngine.GUILayout.MaxHeight" />, <see cref="UnityEngine.GUILayout.ExpandWidth" />, <see cref="UnityEngine.GUILayout.ExpandHeight" />.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="property">The float property to edit.</param>
      <param name="label">Optional label to display in front of the float field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.FloatField" /> but will not return the new value until the user has pressed enter or focus is moved away from the float field.</para>
      </summary>
      <param name="property">The float property to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="property">The int property to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.IntField" /> but will not return the new value until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="property">The int property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="property">The text property to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
        <para>Similar to <see cref="UnityEditor.EditorGUILayout.TextField" /> but will not return the new value until the user has pressed enter or focus is moved away from the text field.</para>
      </summary>
      <param name="property">The text property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering double values.</summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndFadeGroup">
      <summary>Closes a group started with BeginFadeGroup.</summary>
      <seealso cref="M:UnityEditor.EditorGUILayout.BeginFadeGroup(System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndHorizontal">
      <summary>
        <para>Close a group started with BeginHorizontal.</para>
        <para>
          <c>Horizontal Compound group.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndScrollView">
      <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndToggleGroup">
      <summary>
        <para>Close a group started with <see cref="UnityEditor.EditorGUILayout.BeginToggleGroup" />.</para>
        <para>
          <c>Align position/rotation/scale of the selected GameObjects.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndVertical">
      <summary>
        <para>Close a group started with BeginVertical.</para>
        <para>
          <c>Vertical Compound group.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>
          <c>Simple window that shows the enum mask field.</c> Here is an example of how to implement an EnumMaskField, giving three options:</para>
        <para>Internally, Unity stores the enum as an int, with each value as a bitmask. Selecting "Nothing" clears all bits, resulting in an integer value of 0; selecting "Everything" will set all bits, producing an integer value of -1. To determine whether a particular enum value has been set, you can either treat the enum as an int and perform a bitwise OR to test, or you can unset the "Everything" value by iterating through the enum values and reconstructing the enum accordingly. An example of how to do this is shown below:</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">Optional layout options.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
        <para>Takes an enum with the [Flags] attribute as input parameter and returns the enum values selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">Optional layout options.</param>
      <returns>The enum options that has been selected by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user. <c>Creates a primitive selected by the user.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The enum option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering float values.</summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out. <c>Create a foldable menu that hides/shows the selected transform.</c></para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a <see cref="UnityEngine.Rect" /> as parameter, similar to the controls in the <see cref="UnityEditor.EditorGUI" /> class. This ensures the control can also be used in for example a <see cref="UnityEditor.PropertyDrawer" />, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a <see cref="UnityEngine.Rect" /> as parameter, similar to the controls in the <see cref="UnityEditor.EditorGUI" /> class. This ensures the control can also be used in for example a <see cref="UnityEditor.PropertyDrawer" />, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a <see cref="UnityEngine.Rect" /> as parameter, similar to the controls in the <see cref="UnityEditor.EditorGUI" /> class. This ensures the control can also be used in for example a <see cref="UnityEditor.PropertyDrawer" />, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="UnityEditor.EditorGUIUtility.singleLineHeight" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a <see cref="UnityEngine.Rect" /> as parameter, similar to the controls in the <see cref="UnityEditor.EditorGUI" /> class. This ensures the control can also be used in for example a <see cref="UnityEditor.PropertyDrawer" />, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="UnityEditor.EditorGUIUtility.singleLineHeight" />.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" /> to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType)">
      <summary>Make a help box with a message to the user.</summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType,System.Boolean)">
      <summary>Make a help box with a message to the user.</summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
      <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has an arrow for folding out, a help icon, and a settings menu that depends on the type of the object supplied.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <returns>The foldout state selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has an arrow for folding out, a help icon, and a settings menu that depends on the type of the object supplied.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <returns>The foldout state selected by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering integers.</summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user. <c>Rescales the current selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make an integer popup selection field.</summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>Make an integer popup selection field.</summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make an integer popup selection field.</summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change an integer value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a label field. (Useful for showing read-only info.)</summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a layer selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The layer selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field for entering long integers.</summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>Make a field for masks.</summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value modified by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.String,System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(UnityEngine.GUIContent,System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the <see cref="UnityEditor.Editor" /> class for further information. <c>Search for a help page by selecting the GameObject in the Object Field.</c></para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The object that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the <see cref="UnityEditor.Editor" /> class for further information. <c>Search for a help page by selecting the GameObject in the Object Field.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The object that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the <see cref="UnityEditor.Editor" /> class for further information. <c>Search for a help page by selecting the GameObject in the Object Field.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The object that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>Make a field to receive any object type.</summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a field to receive any object type.</summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="label">Optional label in front of the field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>Make a field to receive any object type.</summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a field to receive any object type.</summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field. Pass <see cref="UnityEngine.GUIContent.none" /> to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>Obsoleted</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>Obsoleted</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>Obsoleted</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front. <c>Simple window that visualizes what you have typed in the password field.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The password entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user. <c>Create a primitive depending on the option selected.</c></para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the option that has been selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Simple window that shows the prefix label.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. <see cref="UnityEditor.EditorGUILayout.PrefixLabel" /> also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Simple window that shows the prefix label.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. <see cref="UnityEditor.EditorGUILayout.PrefixLabel" /> also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Simple window that shows the prefix label.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. <see cref="UnityEditor.EditorGUILayout.PrefixLabel" /> also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>
          <c>Simple window that shows the prefix label.</c> Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. <see cref="UnityEditor.EditorGUILayout.PrefixLabel" /> also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>Make a field for <see cref="UnityEditor.SerializedProperty" />.</summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
      <seealso cref="T:UnityEditor.SerializedProperty" />
      <seealso cref="T:UnityEditor.SerializedObject" />
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(System.String,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.GUIContent,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a <see cref="UnityEngine.Rect" />.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
      <param name="text">The text to show.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.String,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEngine.GUIContent,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a slider the user can drag to change a value between a min and a max.</summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Space">
      <summary>Make a small space between the previous control and the following.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a tag selection field.</summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The tag selected by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor. <c>Quick script editor.</c></para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor. <c>Quick script editor.</c></para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front. <c>Changes the name of the selected GameObject.</c></para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The text entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toggle.</summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="UnityEngine.GUIStyle" />.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The selected state of the toggle.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUILayout.ToggleLeft" /> is similar to <see cref="UnityEngine.GUILayout.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUILayout.ToggleLeft" /> is similar to <see cref="UnityEngine.GUILayout.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUILayout.ToggleLeft" /> is similar to <see cref="UnityEngine.GUILayout.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="UnityEngine.GUIStyle" /> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="UnityEditor.EditorGUILayout.ToggleLeft" /> is similar to <see cref="UnityEngine.GUILayout.Toggle" /> but respects the <see cref="UnityEditor.EditorGUI.showMixedValue" /> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="UnityEngine.GUIStyle" /> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(System.String,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>Make an X &amp; Y field for entering a <see cref="UnityEngine.Vector2" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(UnityEngine.GUIContent,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>Make an X &amp; Y field for entering a <see cref="UnityEngine.Vector2" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(System.String,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>Make an X, Y &amp; Z field for entering a <see cref="UnityEngine.Vector3" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(UnityEngine.GUIContent,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>Make an X, Y &amp; Z field for entering a <see cref="UnityEngine.Vector3" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector4Field(System.String,UnityEngine.Vector4,UnityEngine.GUILayoutOption[])">
      <summary>Make an X, Y, Z &amp; W field for entering a <see cref="UnityEngine.Vector4" />.</summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value entered by the user.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)" />
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)" />
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.currentViewWidth">
      <summary>The width of the GUI area for the current EditorWindow or other view.</summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.editingTextField">
      <summary>
        <para>Is a text field currently editing text?</para>
        <para>In Editor GUI, text fields can have focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. <see cref="UnityEditor.EditorGUIUtility.editingTextField" /> is true when a text field is in this text editing mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.fieldWidth">
      <summary>
        <para>The minimum width in pixels reserved for the fields of Editor GUI controls.</para>
        <para>Most Editor GUI controls consist of a label as well as the control field itself. The minimum width of the field is controlled by the fieldWidth value. Fields often appear wider than the minimum width, since Editor GUI controls are usually set to occupy a <see cref="UnityEngine.Rect" /> that expands to fill the available horizontal space. Within this Rect, the field will take up all the space not used by the <see cref="UnityEditor.EditorGUIUtility.labelWidth" />. The fieldWidth also controls the width of the text field in <see cref="UnityEditor.EditorGUI.Slider" /> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.hierarchyMode">
      <summary>
        <para>Is the Editor GUI is hierarchy mode?</para>
        <para>In hierarchy mode, <see cref="UnityEditor.EditorGUI.Foldout" /> controls are positioned with the foldout triangle to the left of the specified <see cref="UnityEngine.Rect" /> for the control, rather than being inside the Rect. This way, the label of the foldout is aligned together with labels of other Editor GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.isProSkin">
      <summary>Is the user currently using the pro skin? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.labelWidth">
      <summary>
        <para>The width in pixels reserved for labels of Editor GUI controls.</para>
        <para>Editor GUI controls have a certain width allocated for labels. This width can be changed by setting labelWidth to a different value. Setting it to 0 will reset the label width to the default value. The default value can vary, for example depending on the width of the Inspector window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.pixelsPerPoint">
      <summary>The scale of GUI points relative to screen pixels for the current view This value is the number of screen pixels per point of interface space. For instance, 2.0 on retina displays. Note that the value may differ from one view to the next if the views are on monitors with different UI scales.</summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.singleLineHeight">
      <summary>
        <para>Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.</para>
        <para>When creating your own multi-line controls, such as controls for custom classes with multiple fields, you can use <see cref="UnityEditor.EditorGUILayout.GetControlRect" /> and pass in a height value that is a multiple of <see cref="UnityEditor.EditorGUIUtility.singleLineHeight" />. This is advisable over hardcoding specific pixel values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.standardVerticalSpacing">
      <summary>
        <para>Get the height used by default for vertical spacing between controls.</para>
        <para>When creating GUI without GUILayout, such as is for instance required by <see cref="UnityEditor.PropertyDrawer" />s, and you need to place several controls under each other, you can use standardVerticalSpacing to ensure there's the proper standard spacing between the controls. This is advisable over hardcoding specific pixel values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.systemCopyBuffer">
      <summary>
        <para>The system copy buffer.</para>
        <para>Use this to make Copy and Paste work for your own application. The <see cref="UnityEditor.EditorGUIUtility.systemCopyBuffer" /> captures any text that is selected on the machine. This does not specifically have to be text that is selected in Unity. Reading and writing <see cref="UnityEditor.EditorGUIUtility.systemCopyBuffer" /> is possible. <c>Have more than 1 saved "copy" command.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.whiteTexture">
      <summary>Get a white texture.</summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.wideMode">
      <summary>
        <para>Is the Editor GUI currently in wide mode?</para>
        <para>Wide mode is a mode for Editor GUI where the controls for structs such as Vector3 and Rect are inlined so they take up less vertical space. For example, in wide mode a Vector3Field takes up one line height instead of two, and a RectField takes up two line heights instead of three. When creating your own multi-line controls, you can query wideMode and make the layout of your control follow the same logic.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor)">
      <summary>Add a custom mouse pointer to a control.</summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor,System.Int32)">
      <summary>Add a custom mouse pointer to a control.</summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
      <param name="controlID">ID of a target control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.CommandEvent(System.String)">
      <summary>
        <para>Creates an event that can be sent to another window.</para>
        <para>The script below receives the Paste message sent from CommandEventExample above.</para>
      </summary>
      <param name="commandName">The command to be sent.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawColorSwatch(UnityEngine.Rect,UnityEngine.Color)">
      <summary>Draw a color swatch.</summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="color">The color to draw.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
      <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>Draw swatch with a filled region between two SerializedProperty curves.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>Draw swatch with a filled region between two curves.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.FindTexture(System.String)">
      <summary>
        <para>Get a texture from its source filename.</para>
        <para>Note: This function is used for searching for editor icons only.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetBuiltinSkin(UnityEditor.EditorSkin)">
      <summary>Get one of the built-in GUI skins, which can be the game view, inspector or scene view skin as chosen by the parameter.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetFlowLayoutedRects(UnityEngine.Rect,UnityEngine.GUIStyle,System.Single,System.Single)">
      <summary>Layout list of string items left to right, top to bottom in the given area.</summary>
      <param name="rect">Area where to layout the items.</param>
      <param name="style">Style for the items.</param>
      <param name="horizontalSpacing">Extra horizontal spacing between successive items.</param>
      <param name="verticalSpacing">Extra vertical spacing between item rows.</param>
      <returns>List of rectangles for the passed items.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetIconSize">
      <summary>
        <para>Get the size that has been set using <see cref="UnityEditor.EditorGUIUtility.SetIconSize" />.</para>
        <para>The default size is Vector2.zero where the size is determined by the available space.</para>
      </summary>
      <seealso cref="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)" />
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerControlID">
      <summary>
        <para>The controlID of the currently showing object picker.</para>
        <para>See <see cref="UnityEditor.EditorGUIUtility.ShowObjectPicker" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerObject">
      <summary>The object currently selected in the object picker.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HasObjectThumbnail(System.Type)">
      <summary>Does a given class have per-object thumbnails?</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String,System.String)">
      <summary>Fetch the GUIContent from the Unity builtin resources with the given name.</summary>
      <param name="name">Content name.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String)">
      <summary>Fetch the GUIContent from the Unity builtin resources with the given name.</summary>
      <param name="name">Content name.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IsDisplayReferencedByCameras(System.Int32)">
      <summary>Check if any enabled camera can render to a particular display.</summary>
      <param name="displayIndex">Display index.</param>
      <returns>True if a camera will render to the display.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.Load(System.String)">
      <summary>
        <para>Load a built-in resource.</para>
        <para>This function will look in Assets/Editor Default Resources/ + path for the resource. If not there, it will try the built-in editor resources by name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LoadRequired(System.String)">
      <summary>
        <para>Load a required built-in resource.</para>
        <para>This function will look in Assets/Editor Default Resources/ folder for the required resource. The example below shows an the loading of an iPhone texture and used to texture a cube.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ObjectContent(UnityEngine.Object,System.Type)">
      <summary>
        <para>Return a GUIContent object with the name and icon of an Object.</para>
        <para>If the object is null, the icon will be picked according to type. <c>Object Content usage.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(UnityEngine.Object)">
      <summary>
        <para>Ping an object in the Scene like clicking it in an inspector.</para>
        <para>
          <see cref="UnityEditor.EditorGUIUtility.PingObject" /> will cause the Hierarchy to highlight the pinged object. The pinged object does not have to selected. For example <see cref="UnityEngine.GameObject.Find" /> can be used to locate an object to ping.</para>
      </summary>
      <param name="obj">The object to be pinged.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(System.Int32)">
      <summary>
        <para>Ping an object in the Scene like clicking it in an inspector.</para>
        <para>
          <see cref="UnityEditor.EditorGUIUtility.PingObject" /> will cause the Hierarchy to highlight the pinged object. The pinged object does not have to selected. For example <see cref="UnityEngine.GameObject.Find" /> can be used to locate an object to ping.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PixelsToPoints(UnityEngine.Vector2)">
      <summary>Convert a position from pixel to point space.</summary>
      <param name="position">A GUI position in pixel space.</param>
      <returns>A vector representing the same position in point space.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PixelsToPoints(UnityEngine.Rect)">
      <summary>Convert a Rect from pixel space to point space.</summary>
      <param name="rect">A GUI rect measured in pixels.</param>
      <returns>A rect representing the same area in points.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PointsToPixels(UnityEngine.Vector2)">
      <summary>Convert a Rect from point space to pixel space.</summary>
      <param name="position">A GUI rect measured in points.</param>
      <returns>A rect representing the same area in pixels.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PointsToPixels(UnityEngine.Rect)">
      <summary>Converts a position from point to pixel space.</summary>
      <param name="rect">A GUI position in point space.</param>
      <returns>The same position in pixel space.</returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.QueueGameViewInputEvent(UnityEngine.Event)">
      <summary>Send an input event into the game.</summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)">
      <summary>
        <para>Set icons rendered as part of <see cref="UnityEngine.GUIContent" /> to be rendered at a specific size.</para>
        <para>Set the size to Vector2.zero to use the default behaviour where the size is determined by the available space.</para>
      </summary>
      <seealso cref="M:UnityEditor.EditorGUIUtility.GetIconSize" />
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ShowObjectPicker(UnityEngine.Object,System.Boolean,System.String,System.Int32)">
      <summary>
        <para>Show the object picker from code.</para>
        <para>Once the user interacts with the Object Picker, it will respond by sending ExecuteCommand events back to the calling OnGUI that called this function. The messages are: ObjectSelectorUpdated - The selected object was changed. The selected object can be read by calling <see cref="UnityEditor.EditorGUIUtility.GetObjectPickerObject" /> ObjectSelectorClosed - The user closed the object picker.</para>
      </summary>
      <param name="obj">The object to be selected by default.</param>
      <param name="allowSceneObjects">Is selection of scene objects allowed, or should it only show assets.</param>
      <param name="searchFilter">Default search filter to apply.</param>
      <param name="controlID">The id of the control to set. This is useful if you are showing more than one of these. You can get the value at a later time.</param>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.FromJsonOverwrite(System.String,System.Object)">
      <summary>
        <para>Overwrite data in an object by reading from its JSON representation.</para>
        <para>This is similar to [JsonUtility.FromJsonOverwrite], but it supports any engine object. The fields available are the same as are accessible via the [SerializedObject] API, or as found in the YAML-serialized form of the object.</para>
      </summary>
      <param name="json">The JSON representation of the object.</param>
      <param name="objectToOverwrite">The object to overwrite.</param>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.ToJson(System.Object)">
      <summary>
        <para>Generate a JSON representation of an object.</para>
        <para>This is similar to [JsonUtility.ToJson], but it supports any engine object. The fields that the output will contain are the same as are accessible via the [SerializedObject] API, or as found in the YAML-serialized form of the object.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <returns>The object's data in JSON format.</returns>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.ToJson(System.Object,System.Boolean)">
      <summary>
        <para>Generate a JSON representation of an object.</para>
        <para>This is similar to [JsonUtility.ToJson], but it supports any engine object. The fields that the output will contain are the same as are accessible via the [SerializedObject] API, or as found in the YAML-serialized form of the object.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <param name="prettyPrint">If true, format the output for readability. If false, format the output for minimum size. Default is false.</param>
      <returns>The object's data in JSON format.</returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteAll">
      <summary>Removes all keys and values from the preferences. Use with caution.</summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteKey(System.String)">
      <summary>Removes <c>key</c> and its corresponding value from the preferences.</summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. <c>Round rotations/positions and remember the active option.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. <c>Round rotations/positions and remember the active option.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the float value corresponding to <c>key</c> if it exists in the preference file.</para>
        <para>If <c>GetFloat</c> does not exist in the Preference file the <c>defaultValue</c> will be returned.</para>
      </summary>
      <param name="key">Name of key to read float from.</param>
      <param name="defaultValue">Float value to return if the key is not in the storage.</param>
      <returns>The float value stored in the preference file or the defaultValue id the requested float does not exist.</returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the float value corresponding to <c>key</c> if it exists in the preference file.</para>
        <para>If <c>GetFloat</c> does not exist in the Preference file the <c>defaultValue</c> will be returned.</para>
      </summary>
      <param name="key">Name of key to read float from.</param>
      <returns>The float value stored in the preference file or the defaultValue id the requested float does not exist.</returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If the value doesn't already exist in the preference file the function will return <c>defaultValue</c>.</para>
      </summary>
      <param name="key">Name of key to read integer from.</param>
      <param name="defaultValue">Integer value to return if the key is not in the storage.</param>
      <returns>The value stored in the preference file.</returns>
      <seealso cref="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)" />
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If the value doesn't already exist in the preference file the function will return <c>defaultValue</c>.</para>
      </summary>
      <param name="key">Name of key to read integer from.</param>
      <returns>The value stored in the preference file.</returns>
      <seealso cref="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)" />
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. <c>Quick notes that last between Unity Sessions.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if <c>key</c> exists in the preferences file.</para>
        <para>The preferences file is examined to identify whether the specified key exists. True or false is returned. In the following example a key and value can be written into the preference file, or deleted. The existence of the key is checked with the <see cref="UnityEditor.EditorPrefs.HasKey" /> function and a message displayed. <c>Use save, delete, and HasKey preference check.</c></para>
      </summary>
      <param name="key">Name of key to check for.</param>
      <returns>The existence or not of the key.</returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetBool(System.String,System.Boolean)">
      <summary>Sets the value of the preference identified by <c>key</c>.</summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetFloat(System.String,System.Single)">
      <summary>Sets the float value of the preference identified by <c>key</c>.</summary>
      <param name="key">Name of key to write float into.</param>
      <param name="value">Float value to write into the storage.</param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the preference identified by key as an integer.</para>
        <para>Sets the value of the preference identified by <c>key</c> as an integer.</para>
      </summary>
      <param name="key">Name of key to write integer to.</param>
      <param name="value">Value of the integer to write into the storage.</param>
      <seealso cref="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)" />
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetString(System.String,System.String)">
      <summary>Sets the value of the preference identified by <c>key</c>.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldFont">
      <summary>Bold font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldLabel">
      <summary>Style for bold label.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.centeredGreyMiniLabel">
      <summary>Style for label with small font which is centered and grey.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.colorField">
      <summary>Style used for headings for Color fields.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldout">
      <summary>Style used for headings for <see cref="UnityEditor.EditorGUI.Foldout" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldoutPreDrop">
      <summary>Style used for headings for <see cref="UnityEditor.EditorGUI.Foldout" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.helpBox">
      <summary>Style used for background box for <see cref="UnityEditor.EditorGUI.HelpBox" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorDefaultMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get the default margins used in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the <see cref="UnityEditor.Editor.UseDefaultMargins" /> method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorFullWidthMargins" /> style and wrap other parts of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorDefaultMargins" /> style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorFullWidthMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get full width margins in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the <see cref="UnityEditor.Editor.UseDefaultMargins" /> method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorFullWidthMargins" /> style and wrap other parts of the GUI inside a vertical group with the <see cref="UnityEditor.EditorStyles.inspectorDefaultMargins" /> style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.label">
      <summary>Style used for the labelled on all EditorGUI overloads that take a prefix label.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.largeLabel">
      <summary>Style for label with large font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.layerMaskField">
      <summary>Style used for headings for Layer masks.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldFont">
      <summary>Mini Bold font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldLabel">
      <summary>Style for mini bold label.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButton">
      <summary>Style used for a standalone small button.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonLeft">
      <summary>Style used for the leftmost button in a horizontal button group.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonMid">
      <summary>Style used for the middle buttons in a horizontal group.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonRight">
      <summary>Style used for the rightmost button in a horizontal group.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniFont">
      <summary>Mini font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniLabel">
      <summary>Style for label with small font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniTextField">
      <summary>Smaller text field.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.numberField">
      <summary>Style used for field editors for numbers.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectField">
      <summary>Style used for headings for object fields.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldMiniThumb">
      <summary>
        <para>Style used for object fields that have a thumbnail (e.g Textures).</para>
        <para>This is a style that fits within normal line height.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldThumb">
      <summary>Style used for headings for the Select button in object fields.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.popup">
      <summary>Style used for <see cref="UnityEditor.EditorGUI.Popup" />, <see cref="UnityEditor.EditorGUI.EnumPopup" />,.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.radioButton">
      <summary>Style used for a radio button.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.standardFont">
      <summary>Standard font.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textArea">
      <summary>Style used for <see cref="UnityEditor.EditorGUI.TextArea" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textField">
      <summary>Style used for <see cref="UnityEditor.EditorGUI.TextField" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggle">
      <summary>Style used for headings for <see cref="UnityEditor.EditorGUI.Toggle" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggleGroup">
      <summary>Style used for headings for <see cref="UnityEditor.EditorGUILayout.BeginToggleGroup" />.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbar">
      <summary>
        <para>Toolbar background from top of windows.</para>
        <para>The toolbar is used as a background for other toolbar elements</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarButton">
      <summary>Style for Button and Toggles in toolbars.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarDropDown">
      <summary>Toolbar Dropdown.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarPopup">
      <summary>Toolbar Popup.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarTextField">
      <summary>Toolbar text field.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteBoldLabel">
      <summary>
        <para>Style for white bold label.</para>
        <para>Useful for coloring your labels; set <see cref="UnityEngine.GUI.contentColor" /> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLabel">
      <summary>
        <para>Style for white label.</para>
        <para>Useful for coloring your labels; set <see cref="UnityEngine.GUI.contentColor" /> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLargeLabel">
      <summary>
        <para>Style for white large label.</para>
        <para>Useful for coloring your labels; set <see cref="UnityEngine.GUI.contentColor" /> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteMiniLabel">
      <summary>
        <para>Style for white mini label.</para>
        <para>Useful for coloring your labels; set <see cref="UnityEngine.GUI.contentColor" /> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedLabel">
      <summary>Style for word wrapped label.</summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedMiniLabel">
      <summary>Style for word wrapped mini label.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeBuildTarget">
      <summary>The currently active build target.</summary>
    </member>
    <member name="F:UnityEditor.EditorUserBuildSettings.activeBuildTargetChanged">
      <summary>Triggered in response to SwitchActiveBuildTarget.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeScriptCompilationDefines">
      <summary>DEFINE directives for the compiler.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.allowDebugging">
      <summary>Enable source-level debuggers to connect.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSubtarget">
      <summary>Android platform options.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSystem">
      <summary>Set which build system to use for building the Android package.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.buildScriptsOnly">
      <summary>Is build script only enabled.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.compressWithPsArc">
      <summary>Build data compressed with PSArc.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.connectProfiler">
      <summary>Start the player with a connection to the profiler.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.development">
      <summary>Enables a development build.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.enableHeadlessMode">
      <summary>Enables a Linux headless build.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitDivideByZeroChecks">
      <summary>Are divide by zero's actively checked?</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitNullChecks">
      <summary>Are null references actively checked?</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.exportAsGoogleAndroidProject">
      <summary>
        <para>Export Android Project for use with Android Studio/Gradle or Eclipse/ADT.</para>
        <para>Best combined with Split Application Binary to ensure Streaming Assets are not compressed when building the final application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.forceInstallation">
      <summary>Force installation of package, even if error.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.forceOptimizeScriptCompilation">
      <summary>
        <para>Force full optimizations for script complilation in Development builds.</para>
        <para>Forces full optimization for IL2CPP code compilation. Useful when profiling Developement builds to see how optimizations affect performance.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.installInBuildFolder">
      <summary>Place the built player in the build folder.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.iOSBuildConfigType">
      <summary>Scheme with which the project will be run in Xcode.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.n3dsCreateCIAFile">
      <summary>Create a .cia "download image" for deploying to test kits (3DS).</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.needSubmissionMaterials">
      <summary>Build submission materials.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.ps4BuildSubtarget">
      <summary>PS4 Build Subtarget.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.ps4HardwareTarget">
      <summary>Specifies which version of PS4 hardware to target.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psmBuildSubtarget">
      <summary>PSM Build Subtarget.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psp2BuildSubtarget">
      <summary>PS Vita Build subtarget.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedBuildTargetGroup">
      <summary>The currently selected build target group.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget">
      <summary>The currently selected target for a standalone build.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.streamingInstallLaunchRange">
      <summary>
        <para>When building an Xbox One Streaming Install package (makepkg.exe) The layout generation code in Unity will assign each scene and associated assets to individual chunks. Unity will mark scene 0 as being part of the launch range, IE the set of chunks required to launch the game, you may include additional scenes in this launch range if you desire, this specifies a range of scenes (starting at 0) to be included in the launch set.</para>
        <para>(NOTE: This option is meaningless for those using their own layout file, using a custom layout file is considered the correct way of handling more advanced packaging requirements).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.symlinkLibraries">
      <summary>Symlink runtime libraries with an iOS Xcode project.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.tizenBuildSubtarget">
      <summary>The texture compression type to be used when building.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webGLUsePreBuiltUnityEngine">
      <summary>
        <para>Use prebuilt JavaScript version of Unity engine.</para>
        <para>This option is passed to the emscripten compiler for WebGL builds. If enabled, then only the user script code will be compiled to JavaScript and linked dynamically with a prebuilt Unity engine JavaScript module, which significantly reduces build iteration time. The prebuilt Unity engine module is unstripped and therefore is not suitable for release builds. For that reason this property only has effect on development builds, and is ignored otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerOfflineDeployment">
      <summary>
        <para>Build the webplayer along with the UnityObject.js file (so it doesn't need to be downloaded).</para>
        <para>Note that WebPlayer is not supported from 5.4 and onwards.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerStreamed">
      <summary>
        <para>Select the streaming option for a webplayer build.</para>
        <para>Note that WebPlayer is not supported from 5.4 and onwards.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUBootMode">
      <summary>
        <para>Boot mode of a devkit.</para>
        <para>When launching a built Wii U player using run.cmd, Boot Mode specified by this property is set to CAFE_BOOT_MODE environment variable. This must match to the mode devkit is set to.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUBuildDebugLevel">
      <summary>Wii U player debug level.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiuBuildOutput">
      <summary>
        <para>Built player postprocessing options.</para>
        <para>Specifies whether to keep the built player unpackaged, make a WUMAD or make a WUMAD and prepare a download package from it. A dowload package can be transferred to a devkit or CAT-R using an SD Card.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUEnableNetAPI">
      <summary>
        <para>Enable network API.</para>
        <para>This option chooses whether to use a player with network APIs linked in or without.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaGenerateReferenceProjects">
      <summary>
        <para>Generate and reference C# projects from your main solution.</para>
        <para>Only usable when building to Windows Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaSDK">
      <summary>Target Windows SDK.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaSubtarget">
      <summary>
        <para>Sets and gets target device type for the application to run on when building to Windows Store platform.</para>
        <para>Default is to target "any device", which results in poorer settings choices for any particular device type but works on all of them. Choosing any particular device type will optimize settings for that device type, but may cause application to not function properly when run on another device type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxBuildSubtarget">
      <summary>Xbox Build subtarget.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneDeployMethod">
      <summary>The currently selected Xbox One Deploy Method.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneNetworkSharePath">
      <summary>Network shared folder path e.g. MYCOMPUTER\SHAREDFOLDER\.</summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneUsername">
      <summary>Windows account username associated with PC share folder.</summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetBuildLocation(UnityEditor.BuildTarget)">
      <summary>Get the current location for the build.</summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetPlatformSettings(System.String,System.String)">
      <summary>Returns value for platform specifc Editor setting.</summary>
      <param name="platformName">The name of the platform.</param>
      <param name="name">The name of the setting.</param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetWSADotNetNative(UnityEditor.WSABuildType)">
      <summary>Is .NET Native enabled for specific build configuration. More information - https://msdn.microsoft.com/en-us/library/dn584397(v=vs.110).aspx.</summary>
      <param name="config">Build configuration.</param>
      <returns>True if .NET Native is enabled for the specific build configuration.</returns>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetBuildLocation(UnityEditor.BuildTarget,System.String)">
      <summary>Set a new location for the build.</summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetPlatformSettings(System.String,System.String,System.String)">
      <summary>Set platform specifc Editor setting.</summary>
      <param name="platformName">The name of the platform.</param>
      <param name="name">The name of the setting.</param>
      <param name="value">Setting value.</param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTarget)">
      <summary>
        <para>Select a new build target to be active.</para>
        <para>Has the same effect as changing the build target via the Build Player dialog in the editor. Changing the currently active build target will recompile all script files for the new platform and will reimport assets that are affected by the current platform setting (textures with platform-specific settings, for example). If the given target is a standalone target, calling SwitchActiveBuildTarget will also affect <see cref="UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget" />. Note: This method is not available when running the Editor in batch mode. This is because changing the build target requires recompiling script code for the given target which cannot be done while script code is executing (not a problem in in the editor as the operation is simply deferred but batch mode will immediately exit after having executed the designated script code). To set the build target to use in batch mode, use the buildTarget command-line switch.</para>
      </summary>
      <returns>True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI).</returns>
    </member>
    <member name="M:UnityEditor.EditorUtility.ClearProgressBar">
      <summary>
        <para>Removes progress bar.</para>
        <para>Will remove any progress bar previously shown using EditorUtility.DisplayProgressBar.</para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)" />
      <seealso cref="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDeepHierarchy(UnityEngine.Object[])">
      <summary>
        <para>Collect all objects in the hierarchy rooted at each of the given objects.</para>
        <para>This is most useful for linearizing entire GameObject hierarchies including all their components. Note that the traversal will not include assets referenced from within the hierarchy. For example, having a MeshFilter component in the hierarchy will not cause the referenced Mesh to be included in the resulting list.</para>
      </summary>
      <param name="roots">Array of objects where the search will start.</param>
      <returns>Array of objects heirarchically attached to the search array.</returns>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDependencies(UnityEngine.Object[])">
      <summary>Calculates and returns a list of all assets the assets listed in <c>roots</c> depend on.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format. If you want to do texture compression in-game, use Texture2D.Compress function, which will use faster but lower quality DXT compression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format. If you want to do texture compression in-game, use Texture2D.Compress function, which will use faster but lower quality DXT compression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerialized(UnityEngine.Object,UnityEngine.Object)">
      <summary>Copy all settings of a Unity Object.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerializedIfDifferent(UnityEngine.Object,UnityEngine.Object)">
      <summary>Copy all settings of a Unity Object to a second Object if they differ.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CreateGameObjectWithHideFlags(System.String,UnityEngine.HideFlags,System.Type[])">
      <summary>
        <para>Creates a game object with <see cref="UnityEngine.HideFlags" /> and specified components.</para>
        <para>This is very similar to creating a <see cref="UnityEngine.GameObject" /> the usual way, except it sets the specified <see cref="UnityEngine.HideFlags" /> immediately. <c>Editor Window that shows how does the example looks.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar that has a cancel button.</para>
        <para>The window title will be set to <c>title</c> and the info will be set to <c>info</c>. Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed. This is useful if you perform any lengthy operations in your editor scripts or wizards, and want to notify the user about the progress. Return argument of this function tells if user had pressed the cancel button. It is then your responsibility to stop the task you were doing. <c>Cancelable progress bar in the editor.</c></para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)" />
      <seealso cref="M:UnityEditor.EditorUtility.ClearProgressBar" />
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
        <para>Use it for displaying message boxes in the editor. <c>ok</c> and <c>cancel</c> are labels to be displayed on the dialog buttons. If <c>cancel</c> is empty (the default), then only one button is displayed. DisplayDialog returns <c>true</c> if <c>ok</c> button is pressed. <c>Dialog box that shows info on the number of objects to be placed on the surface.</c></para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
      <param name="cancel">Label displayed on the Cancel dialog button.</param>
      <seealso cref="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog with three buttons.</para>
        <para>Use it for displaying message boxes in the editor. Similar to <see cref="UnityEditor.EditorUtility.DisplayDialog" />, only this version shows a dialog with three buttons. <c>ok</c>, <c>cancel</c> and <c>alt/</c> are labels to be displayed on the buttons. DisplayDialogComplex returns an integer 0, 1 or 2 corresponding to ok, cancel and alt buttons. <c>Display dialog complex for the example below.</c></para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayPopupMenu(UnityEngine.Rect,System.String,UnityEditor.MenuCommand)">
      <summary>
        <para>Displays a popup menu.</para>
        <para>Menu is shown at position <c>pos</c>, generated from a submenu specified by <c>menuItemPath</c> using a <see cref="UnityEditor.MenuCommand" /> as menu context.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar.</para>
        <para>The window title will be set to <c>title</c> and the info will be set to <c>info</c>. Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed. This is useful if you perform any lengthy operations in your editor scripts or wizards, and want to notify the user about the progress. <c>Progress bar in the editor.</c></para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)" />
      <seealso cref="M:UnityEditor.EditorUtility.ClearProgressBar" />
    </member>
    <member name="M:UnityEditor.EditorUtility.ExtractOggFile(UnityEngine.Object,System.String)">
      <summary>
        <para>Saves an AudioClip or MovieTexture to a file.</para>
        <para>Will save an Ogg Vorbis or Ogg Theora file at the specified path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FocusProjectWindow">
      <summary>
        <para>Brings the project window to the front and focuses it.</para>
        <para>This is commonly called after a menu item that creates and selects an asset is invoked. <c>Changes the color of the selected GameObjects.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FormatBytes(System.Int32)">
      <summary>Returns a text for a number of bytes.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.GetObjectEnabled(UnityEngine.Object)">
      <summary>Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.InstanceIDToObject(System.Int32)">
      <summary>
        <para>Translates an instance ID to a reference to an object.</para>
        <para>If the object is not loaded from disk, loads it from disk. <c>Editor Window to enter the instance ID and print the name of the object.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.IsPersistent(UnityEngine.Object)">
      <summary>
        <para>Determines if an object is stored on disk.</para>
        <para>Typically assets like prefabs, textures, audio clips, animation clips, materials are stored on disk. Returns false if the object lives in the scene. Typically this is a game object or component but it could also be a material that was created from code and not stored in an asset but instead stored in the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.NaturalCompare(System.String,System.String)">
      <summary>
        <para>Human-like sorting.</para>
        <para>Sorts strings alphabetically, but with numbers in strings numerically, so "xx11" comes after "xx2".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open file" dialog and returns the selected path name.</para>
        <para>
          <c>Open File Panel.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanelWithFilters(System.String,System.String,System.String[])">
      <summary>Displays the "open file" dialog and returns the selected path name.</summary>
      <param name="title">Title for dialog.</param>
      <param name="directory">Default directory.</param>
      <param name="filters">File extensions in form { "Image files", "png,jpg,jpeg", "All files", "*" }.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open folder" dialog and returns the selected path name.</para>
        <para>
          <c>Open Folder Panel.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)" />
      <seealso cref="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog and returns the selected path name.</para>
        <para>
          <c>Save File Panel.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</para>
        <para>
          <c>Save File panel in project.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save folder" dialog and returns the selected path name.</para>
        <para>
          <c>Save Folder Panel.</c>
        </para>
      </summary>
      <seealso cref="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)" />
      <seealso cref="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)" />
    </member>
    <member name="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)">
      <summary>
        <para>Marks <c>target</c> object as dirty. (Only suitable for non-scene objects).</para>
        <para>NOTE: ''Prior to Unity 5.3, this was the primary method of marking objects as dirty. From 5.3 onwards, with the introduction of Multi-Scene Editing, this function should no-longer be used for modifying objects in scenes. Instead, you should use <see cref="UnityEditor.Undo.RecordObject" /> prior to making changes to the object. This will mark the object's scene as dirty and provide an undo entry in the editor.'' If you are modifying files within a scene and specifically do not want to add an undo entry for your modification, you should use <see cref="UnityEditor.SceneManagement.EditorSceneManager.MarkSceneDirty" /> If you are using a custom editor to modify serialized properties on a component or an asset, you should be using [pSerializedObject.FindProperty]], <see cref="UnityEditor.SerializedObject.Update" />, <see cref="UnityEditor.EditorGUILayout.PropertyField" />, and <see cref="UnityEditor.SerializedObject.ApplyModifiedProperties" />. This will mark the modified object as 'dirty' and create Undo states for you. Therefore the only remaining situation in which you should use this function is if you are modifying non-scene objects via some other means, <c>and</c> specifically do not want create an undo entry for your modification. This is rare, and unless you're very sure about requiring this, you probably shouldn't be using this command! Unity internally uses the dirty flag to find out when assets have changed and need to be saved to disk.</para>
      </summary>
      <param name="target">The object to mark as dirty.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetObjectEnabled(UnityEngine.Object,System.Boolean)">
      <summary>Set the enabled state of the object.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetSelectedRenderState(UnityEngine.Renderer,UnityEditor.EditorSelectedRenderState)">
      <summary>Set the Scene View selected display mode for this Renderer.</summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsImmediate">
      <summary>
        <para>Unloads assets that are not used.</para>
        <para>An asset is deemed to be unused if it isn't reached after walking the whole game object hierarchy, including script components. Static variables are also examined. By passing in an additional parameter, asset references from script properties and static variables can optionaly be ignored. The unloaded assets will be loaded again on first use. This method differs from <see cref="UnityEngine.Resources.UnloadUnusedAssets" /> in that it will wait for asset garbage collection to finish before returning.</para>
      </summary>
      <seealso cref="M:UnityEngine.Resources.UnloadUnusedAssets" />
    </member>
    <member name="P:UnityEditor.EditorWindow.focusedWindow">
      <summary>
        <para>The EditorWindow which currently has keyboard focus. (Read Only)</para>
        <para>
          <c>focusedWindow</c> can be null if no window has focus. <c>Focus other windows with a mouse click.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.mouseOverWindow">
      <summary>
        <para>The EditorWindow currently under the mouse cursor. (Read Only)</para>
        <para>
          <c>mouseOverWindow</c> can be null if there is no window under the cursor. <c>Move the mouse over other Unity windows to automatically focus them.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.autoRepaintOnSceneChange">
      <summary>Does the window automatically repaint whenever the scene has changed?</summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maximized">
      <summary>
        <para>Is this window maximized.</para>
        <para>Set this value to maximize / unmaximize a window. If the window is undocked, this value will always be false and setting it will have no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maxSize">
      <summary>The maximum size of this window.</summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.minSize">
      <summary>The minimum size of this window.</summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.position">
      <summary>
        <para>The position of the window in screen space.</para>
        <para>Setting this value will undock the window if it's docked <c>Create an empty editor window of 200x200px.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.titleContent">
      <summary>
        <para>The GUIContent used for drawing the title of EditorWindows.</para>
        <para>The icon of <c>titleContent</c> will be shown as the tab icon when the window is docked. It is recommended to set it in OnEnable (and not in the constructor) if an icon is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.wantsMouseMove">
      <summary>
        <para>Does the GUI in this editor window want MouseMove events?</para>
        <para>If set to true, the window recieves an OnGUI call whenever the mouse is moved over the window. Note: This function does not trigger Repaint() Automatically. <c>Editor Window that detects mouse moves when the toggle button is activated and the mouse is over the window.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.BeginWindows">
      <summary>
        <para>Mark the beginning area of all popup windows.</para>
        <para>GUI.Window behaves somewhat differently in the editor than inside your games. In games, GUI.Window pops up a window on your screen. In the editor, GUI.Window shows a subwindow inside one of your editor windows. Begin/EndWindows is used to determine where these can go. You need to have all calls to <see cref="UnityEngine.GUI.Window" /> or <see cref="UnityEngine.GUILayout.Window" /> inside a <see cref="UnityEditor.EditorWindow.BeginWindows" /> / <see cref="UnityEditor.EditorWindow.EndWindows" /> pair. Like this: <c>Simple editor Window with a window and a button inside.</c></para>
        <para>The placement of the <see cref="UnityEditor.EditorWindow.BeginWindows" /> / <see cref="UnityEditor.EditorWindow.EndWindows" /> pair determines where popup windows will appear; all windows are clipped to the clipping area defined by <see cref="UnityEngine.GUI.BeginGroup" /> or <see cref="UnityEngine.GUI.BeginScrollView" />. A small example of that <c>Simple editor window with a window and a button inside using scroll bars.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Close">
      <summary>
        <para>Close the editor window.</para>
        <para>This will destroy the editor window <c>Simple window that lets you delete components from the selected Game Objects.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.EndWindows">
      <summary>
        <para>Close a window group started with <see cref="UnityEditor.EditorWindow.BeginWindows" />.</para>
        <para>The placement of the <see cref="UnityEditor.EditorWindow.BeginWindows" /> / <see cref="UnityEditor.EditorWindow.EndWindows" /> pair determines where popup windows will appear; all windows are clipped to the clipping area defined by <see cref="UnityEngine.GUI.BeginGroup" /> or <see cref="UnityEngine.GUI.BeginScrollView" />. A small example of that: <c>Simple editor window with a window and a button inside using scroll bars.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Focus">
      <summary>
        <para>Moves keyboard focus to this EditorWindow.</para>
        <para>
          <c>Focus one window by pressing the button on other window.</c>
        </para>
        <para>And on another file:</para>
      </summary>
      <seealso cref="P:UnityEditor.EditorWindow.focusedWindow" />
    </member>
    <member name="M:UnityEditor.EditorWindow.RemoveNotification">
      <summary>
        <para>Stop showing notification message.</para>
        <para>Notification message fades away automatically after some time. This function will remove it immediately. <c>Show a notification in an editor window.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Repaint">
      <summary>Make the window repaint.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.SendEvent(UnityEngine.Event)">
      <summary>Sends an Event to a window.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show">
      <summary>Show the EditorWindow.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show(System.Boolean)">
      <summary>Show the EditorWindow.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Shows a window with dropdown behaviour and styling.</para>
        <para>The window is styled in the same way as a <see cref="UnityEditor.PopupWindow" />, which means the window is automatically closed when it loses focus, and has no frame around the edge. Note this function auto-fits the window to screen while trying to place it first below then above the button it was triggered from. This means the windowSize might change when fitting it to screen, so you should make sure you read the 'position' afterwards to check whether the size was cropped.</para>
      </summary>
      <param name="buttonRect">The button from which the position of the window will be determined (see description).</param>
      <param name="windowSize">The initial size of the window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAuxWindow">
      <summary>
        <para>Show the editor window in the auxiliary window.</para>
        <para>The single auxiliary window can be re-used by different editor windows at different times. Showing an editor window in the auxiliary window can be useful to avoid clutter of many small windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent)">
      <summary>
        <para>Show a notification message.</para>
        <para>Displays notification message on the window. Unlike message boxes or log messages notification will fade out automatically after some time. Call <see cref="UnityEditor.EditorWindow.RemoveNotification" /> to remove it immediately. <c>Show a notification in an editor window.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowPopup">
      <summary>
        <para>Shows an Editor window using popup-style framing.</para>
        <para>This means the window has no frame, and is not draggable. It is intended for showing something like a popup menu within an existing window. Opening a window using this method will not give it the functionality of a popup window, only the styling. For full popup functionality (eg, auto closing when the window loses focus), use <see cref="UnityEditor.PopupWindow" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowUtility">
      <summary>
        <para>Show the EditorWindow as a floating utility window.</para>
        <para>Utility windows will always be in front of normal windows, and will be hidden when user switches to another application. Note: You dont need to use EditorWindow.GetWindow() before using this function to show the window. <c>Floating window utility that lets you randomize the rotation of the selected objects.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type)">
      <summary>
        <para>Focuses the first found EditorWindow of specified type if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen``1">
      <summary>
        <para>Focuses the first found EditorWindow of type <c>T</c> if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. <c>Simple Empty non-dockable window.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. <c>Simple Empty non-dockable window.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. <c>Simple Empty non-dockable window.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. <c>Simple Empty non-dockable window.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it. The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it. <c>Create an empty 100x150px window at the upper left corner of the screen.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it. <c>Create an empty 100x150px window at the upper left corner of the screen.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it. <c>Create an empty 100x150px window at the upper left corner of the screen.</c></para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnDestroy">
      <summary>OnDestroy is called when the EditorWindow is closed.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnFocus">
      <summary>
        <para>Called when the window gets keyboard focus.</para>
        <para>
          <c>Preview your camera in ortographic mode when you select the window.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnGUI">
      <summary>Implement your own editor GUI here.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnHierarchyChange">
      <summary>
        <para>Called whenever the scene hierarchy has changed.</para>
        <para>This is transform.parent changed, gameObject.name, creating a new game object, etc. <c>Force Sync with MonoDevelop each time the hierarchy or the project view changes.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnInspectorUpdate">
      <summary>OnInspectorUpdate is called at 10 frames per second to give the inspector a chance to update.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnLostFocus">
      <summary>
        <para>Called when the window loses keyboard focus.</para>
        <para>
          <c>Restores normal view when you lose focus on this window.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnProjectChange">
      <summary>
        <para>Called whenever the project has changed.</para>
        <para>Typically after import, file moves, etc. <c>Force Sync with MonoDevelop each time the hierarchy or the project view changes.</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.OnSelectionChange">
      <summary>Called whenever the selection has changed.</summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Update">
      <summary>Called multiple times per second on all visible windows.</summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Copies a file or a directory.</para>
        <para>This function's path can be relative to the project root folder or be an absolute path. All file separators should be forward ones "/". Make sure to include the name of the files or directories at the end of the <c>"to"</c> argument.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectoryFollowSymlinks(System.String,System.String)">
      <summary>
        <para>Copies the file or directory.</para>
        <para>Copies from <c>from</c> path to the destination, <c>to</c>, path. In presence of symbolic links (macOS only), the actual files to which symbolic links point to are copied, not the symbolic links themselves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.DeleteFileOrDirectory(System.String)">
      <summary>
        <para>Deletes a file or a directory given a path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths. All file separators should be forward ones "/" (Unix style).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.GetUniqueTempPathInProject">
      <summary>
        <para>Returns a unique path in the Temp folder within your current project.</para>
        <para>The returned path is relative to the project folder. The returned path is of a form <c>Temp/UnityTempFile-</c><c>uniqueID</c>, where <c>uniqueID</c> is guaranteed to be unique over space and time. You can use it to create temporary files/folders and be sure that you are not overriding somebody else's files, plus you don't have to keep track of the unique IDs yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.MoveFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Moves a file or a directory from a given path to another path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths. All file separators should be forward ones "/". Make sure to include the name of the files or directories at the end of the <c>"to"</c> argument.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceDirectory(System.String,System.String)">
      <summary>
        <para>Replaces a directory.</para>
        <para>Replaces the directory located at dst with the directory located at src. if dst doesnt exists it copies the file. If dst exists then it deletes it and copies the directory at src to dst</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceFile(System.String,System.String)">
      <summary>
        <para>Replaces a file.</para>
        <para>Replaces the file located at dst with the file located at src. if dst doesnt exists it just copies the file. If dst exists then it deletes it and copies the file at src to dst</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.AreStaticEditorFlagsSet(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>Returns true if the passed in StaticEditorFlags are set on the GameObject specified.</summary>
      <param name="go">The GameObject to check.</param>
      <param name="flags">The flags you want to check.</param>
      <returns>Whether the GameObject's static flags match the flags specified.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshArea(UnityEngine.GameObject)">
      <summary>Get the navmesh area index for the GameObject.</summary>
      <param name="go">GameObject to query.</param>
      <returns>NavMesh area index.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaFromName(System.String)">
      <summary>Get the navmesh area index from the area name.</summary>
      <param name="name">NavMesh area name to query.</param>
      <returns>The NavMesh area index. If there is no NavMesh area with the requested name, the return value is -1.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaNames">
      <summary>Get all the navmesh area names.</summary>
      <returns>Names of all the NavMesh areas.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetStaticEditorFlags(UnityEngine.GameObject)">
      <summary>Gets the StaticEditorFlags of the GameObject specified.</summary>
      <param name="go">The GameObject whose flags you are interested in.</param>
      <returns>The static editor flags of the GameObject specified.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetUniqueNameForSibling(UnityEngine.Transform,System.String)">
      <summary>Get unique name for a new <see cref="UnityEngine.GameObject" /> compared to existing siblings. Useful when trying to avoid duplicate naming. When duplicate(s) are found, uses incremental a number after the base name.</summary>
      <param name="parent">Target parent for a new <see cref="UnityEngine.GameObject" />. Null means root level.</param>
      <param name="name">Requested name for a new <see cref="UnityEngine.GameObject" />.</param>
      <returns>Unique name for a new <see cref="UnityEngine.GameObject" />.</returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshArea(UnityEngine.GameObject,System.Int32)">
      <summary>Set the navmesh area for the gameobject.</summary>
      <param name="go">GameObject to modify.</param>
      <param name="areaIndex">NavMesh area index to set.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetParentAndAlign(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sets the parent and gives the child the same layer and position.</para>
        <para>This is intended as a utility function when creating custom GameObjects with a <see cref="UnityEditor.MenuItem" /> in the "GameObject/" menu. When using the context click menu to create new GameObjects in the scene hierarchy, the newly created GameObjects should be parented to the clicked GameObject, which is passed in as <see cref="UnityEditor.MenuCommand.context" />. Calling this method ensures this behavior in the case of a context click while doing nothing if the context is null (see example on the <see cref="UnityEditor.MenuItem" /> docs).</para>
      </summary>
      <param name="child">The GameObject that should have a new parent set.</param>
      <param name="parent">The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetStaticEditorFlags(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>Sets the static editor flags on the specified GameObject.</summary>
      <param name="go">The GameObject whose static editor flags you want to set.</param>
      <param name="flags">The flags to set on the GameObject.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)">
      <summary>
        <para>Add a disabled item to the menu.</para>
        <para>The example below shows a context menu with a disabled menu item that can be toggled on and off.</para>
      </summary>
      <param name="content">The GUIContent to display as a disabled menu item.</param>
      <seealso cref="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction)" />
      <seealso cref="M:UnityEditor.GenericMenu.AddSeparator(System.String)" />
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction)">
      <summary>Add an item to the menu.</summary>
      <param name="content">The GUIContent to add as a menu item.</param>
      <param name="on">Whether to show the item is currently activated (i.e. a tick next to the item in the menu).</param>
      <param name="func">The function to call when the menu item is selected.</param>
      <seealso cref="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)" />
      <seealso cref="M:UnityEditor.GenericMenu.AddSeparator(System.String)" />
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction2,System.Object)">
      <summary>Add an item to the menu.</summary>
      <param name="content">The GUIContent to add as a menu item.</param>
      <param name="on">Whether to show the item is currently activated (i.e. a tick next to the item in the menu).</param>
      <param name="func">The function to call when the menu item is selected.</param>
      <param name="userData">The data to pass to the function called when the item is selected.</param>
      <seealso cref="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)" />
      <seealso cref="M:UnityEditor.GenericMenu.AddSeparator(System.String)" />
    </member>
    <member name="M:UnityEditor.GenericMenu.AddSeparator(System.String)">
      <summary>Add a seperator item to the menu.</summary>
      <param name="path">The path to the submenu, if adding a separator to a submenu. When adding a separator to the top level of a menu, use an empty string as the path.</param>
      <seealso cref="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction)" />
      <seealso cref="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)" />
    </member>
    <member name="M:UnityEditor.GenericMenu.DropDown(UnityEngine.Rect)">
      <summary>Show the menu at the given screen rect.</summary>
      <param name="position">The position at which to show the menu.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.GetItemCount">
      <summary>Get number of items in the menu.</summary>
      <returns>The number of items in the menu.</returns>
    </member>
    <member name="M:UnityEditor.GenericMenu.ShowAsContext">
      <summary>Show the menu under the mouse when right-clicked.</summary>
    </member>
    <member name="P:UnityEditor.Handles.centerColor">
      <summary>
        <para>Color to use for handles that represent the center of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.color">
      <summary>
        <para>Look up or set the <see cref="UnityEngine.Color" /> of the handles.</para>
        <para>
          <c>Magenta slider that points to 0,0,0.</c> To use this example, save this script in your Assets/Editor folder:</para>
        <para>...and place this script on the GameObject you wish to place the Slider Handle on.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.inverseMatrix">
      <summary>The inverse of the matrix for all handle operations.</summary>
    </member>
    <member name="P:UnityEditor.Handles.lighting">
      <summary>Are handles lit?</summary>
    </member>
    <member name="P:UnityEditor.Handles.matrix">
      <summary>
        <para>Matrix for all handle operations.</para>
        <para>To make all Handle routines work in an Object's local coordinate space, set this to Transform.localToWorldMatrix.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.secondaryColor">
      <summary>
        <para>Soft color to use for for less interactive UI, or handles that are used rarely (or not at all).</para>
        <para>This is used, for example, to draw the arc selection while dragging the rotation gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.selectedColor">
      <summary>Color to use for the currently active handle.</summary>
    </member>
    <member name="P:UnityEditor.Handles.xAxisColor">
      <summary>
        <para>Color to use for handles that manipulate the X coordinate of something.</para>
        <para>This is used, for example, in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.yAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Y coordinate of something.</para>
        <para>This is used, for example, in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.zAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Z coordinate of something.</para>
        <para>This is used, for example, in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.currentCamera">
      <summary>
        <para>Setup viewport and stuff for a current camera.</para>
        <para>The camera used for deciding where 3D handles end up.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ArrowCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw an arrow like those used by the move tool.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> where you might want to have constant screen-sized handles. <c>Arrow Cap in the Scene View.</c> To use this example, save this script in your Assets/Editor folder:</para>
        <para>...and attach this script to the object you wish to display the Arrow Caps on.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.ArrowHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw an arrow like those used by the move tool.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
        <para>Begin a 2D GUI block on top of the current handle camera. <c>GUI in the Scene View.</c> To use this example, place this script in the Assets/Editor folder:</para>
        <para>...and attach this script to the object you'd like to attach the handles to:</para>
      </summary>
      <seealso cref="M:UnityEditor.Handles.EndGUI" />
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI(UnityEngine.Rect)">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
        <para>Begin a 2D GUI block on top of the current handle camera. <c>GUI in the Scene View.</c> To use this example, place this script in the Assets/Editor folder:</para>
        <para>...and attach this script to the object you'd like to attach the handles to:</para>
      </summary>
      <param name="position">The position and size of the 2D GUI area.</param>
      <seealso cref="M:UnityEditor.Handles.EndGUI" />
    </member>
    <member name="M:UnityEditor.Handles.Button(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make a 3D button.</para>
        <para>This works like a normal GUI.Button, but it has a 3D position and is drawn by a handle function <c>Button Handle as a rectangle in the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, place this code in a script file in the Assets/Editor folder of your project:</para>
        <para>...and place this script on the GameObject you would like the Button to appear on:</para>
      </summary>
      <param name="position">The world-space position to draw the button.</param>
      <param name="direction">The rotation of the button.</param>
      <param name="size">The visual size of the button.</param>
      <param name="pickSize">The size of the button for the purpose of detecting a click.</param>
      <param name="capFunc">The draw style of the button.</param>
      <returns>True when the user clicks the button.</returns>
    </member>
    <member name="M:UnityEditor.Handles.CircleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing Circle. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Circle Cap in the Scene view.</c> To use this example, place this script in the Assets/Editor folder:</para>
        <para>...and attach this script to the GameObject you'd like the CircleCap handles to appear on:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position for the start of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.CircleHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a circle handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.ClearCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Clears the camera.</para>
        <para>The camera used by the Handle class is cleared before being used. This may happen, for example, before <see cref="UnityEditor.Handles.DrawCamera" /> is used.</para>
      </summary>
      <param name="position">Where in the Scene to clear.</param>
      <param name="camera">The camera to clear.</param>
    </member>
    <member name="M:UnityEditor.Handles.ConeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cone. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Cone Cap in the Scene view.</c> To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and attach this script to the GameObject which you would like to attach the ConeCap handles to:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.ConeHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cone handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.CubeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a cube. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Cube Cap on the Scene view.</c> To use this example, save this script into the Assets/Editor folder:</para>
        <para>... and attach this script to the object you'd like to view CubeCaps on:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.CubeHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cube handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.CylinderCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cylinder. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Cylinder Cap in the Scene View.</c> To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and attach this script to the GameObject you wish to attach cylinder cap handles to:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.CylinderHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cylinder handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.Disc(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Single)">
      <summary>
        <para>Make a 3D disc that can be dragged with the mouse.</para>
        <para>
          <c>Disc Handle on the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in Assets/Editor:</para>
        <para>..and place this script on the object you wish to attach a Disc Handle to:</para>
      </summary>
      <param name="rotation">The rotation of the disc.</param>
      <param name="position">The center of the disc.</param>
      <param name="axis">The axis to rotate around.</param>
      <param name="size">The size of the disc in world space.</param>
      <param name="cutoffPlane">If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.</param>
      <param name="snap">The grid size to snap to.</param>
      <returns>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
      <seealso cref="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)" />
    </member>
    <member name="M:UnityEditor.Handles.DotCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing dot. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Dot Cap in the Scene view.</c> To use this example, save this script into the Assets/Editor folder:</para>
        <para>...and attach this script to any GameObjects you wish to place DotCap handles on:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.DotHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a dot handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAConvexPolygon(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased convex polygon specified with point array.</para>
        <para>
          <c>Arrow drawn in the Scene View.</c> The following example uses DrawAAConvexPolygon to draw an arrow between two objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the From and To inspectors, corresponding to the GameObjects where you would like to see the arrow drawn:</para>
      </summary>
      <param name="points">List of points describing the convex polygon.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Anti-aliased line in the Scene View.</c> The following example uses DrawAAPolyLine to draw a line between a number of objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObjects array inspector, corresponding to the GameObjects you would like to see the line drawn between:</para>
      </summary>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Anti-aliased line in the Scene View.</c> The following example uses DrawAAPolyLine to draw a line between a number of objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObjects array inspector, corresponding to the GameObjects you would like to see the line drawn between:</para>
      </summary>
      <param name="width">The width of the line.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Anti-aliased line in the Scene View.</c> The following example uses DrawAAPolyLine to draw a line between a number of objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObjects array inspector, corresponding to the GameObjects you would like to see the line drawn between:</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,System.Int32,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Anti-aliased line in the Scene View.</c> The following example uses DrawAAPolyLine to draw a line between a number of objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObjects array inspector, corresponding to the GameObjects you would like to see the line drawn between:</para>
      </summary>
      <param name="width">The width of the line.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Anti-aliased line in the Scene View.</c> The following example uses DrawAAPolyLine to draw a line between a number of objects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObjects array inspector, corresponding to the GameObjects you would like to see the line drawn between:</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
      <summary>
        <para>Draw textured bezier line through start and end points with the given tangents.</para>
        <para>To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel. The bezier curve will be swept using this texture. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>Bezier Line in the Scene View.</c> To use this example, save this script to the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject you wish to draw the Bezier from:</para>
      </summary>
      <param name="startPosition">The start point of the bezier line.</param>
      <param name="endPosition">The end point of the bezier line.</param>
      <param name="startTangent">The start tangent of the bezier line.</param>
      <param name="endTangent">The end tangent of the bezier line.</param>
      <param name="color">The color to use for the bezier line.</param>
      <param name="texture">The texture to use for drawing the bezier line.</param>
      <param name="width">The width of the bezier line.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera,UnityEditor.DrawCameraMode)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function also sets <see cref="UnityEngine.Camera.current" /> to <c>camera</c>. It sets the camera's pixelRect to <c>position</c>, but in screen coordinates. This might be different from GUI coordinates if you are using a high DPI display. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
      <seealso cref="P:UnityEditor.EditorGUIUtility.pixelsPerPoint" />
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function also sets <see cref="UnityEngine.Camera.current" /> to <c>camera</c>. It sets the camera's pixelRect to <c>position</c>, but in screen coordinates. This might be different from GUI coordinates if you are using a high DPI display. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <seealso cref="P:UnityEditor.EditorGUIUtility.pixelsPerPoint" />
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLine(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a dotted line from p1 to p2.</para>
        <para>
          <c>Draw Line in the Scene view.</c> The following example uses DrawDottedLine to draw a line between a GameObject and the Game Objects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor GameObject which you would like to see lines come from. Drop GameObjects you would like the lines to go to into the array in the script's Inspector, and adjust the gap between the dotted lines accordingly:</para>
      </summary>
      <param name="p1">The start point.</param>
      <param name="p2">The end point.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLines(UnityEngine.Vector3[],System.Single)">
      <summary>
        <para>Draw a list of dotted line segments.</para>
        <para>
          <c>Draw multiple dotted lines in Scene view.</c> The following example uses DrawDottedLines to draw a line between GameObjects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor GameObject which you would like to see lines come from. Drop GameObjects you would like the lines to go to into the array in the script's inspector, and adjust the gap between the dotted lines accordingly:</para>
      </summary>
      <param name="lineSegments">A list of pairs of points that represent the start and end of line segments.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLines(UnityEngine.Vector3[],System.Int32[],System.Single)">
      <summary>
        <para>Draw a list of indexed dotted line segments.</para>
        <para>The following example uses DrawDottedLines to draw a line between objects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor object which you would like to see lines eminate from. Drop GameObjects you would like lines drawing to into the array in the script's inspector, and adjust the gap between the dotted lines accordingly:</para>
      </summary>
      <param name="points">A list of points.</param>
      <param name="segmentIndices">A list of pairs of indices to the start and end points of the line segments.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a line from p1 to p2.</para>
        <para>
          <c>Draw Line in the Scene view.</c> The following example uses DrawLine to draw a line between a GameObject and the GameObjects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor GameObject which you would like to see lines come from. Drop GameObjects you would like the lines to go to into the array in the script's inspector:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawLines(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a list of line segments.</para>
        <para>"Draw multiple lines in Scene view.". The following example uses DrawLines to draw a line between GameObjects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor GameObject which you would like to see lines come from. Drop GameObjects you would like the lines to go to into the array in the script's inspector, and adjust the gap between the dotted lines accordingly:</para>
      </summary>
      <param name="lineSegments">A list of pairs of points that represent the start and end of line segments.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawLines(UnityEngine.Vector3[],System.Int32[])">
      <summary>
        <para>Draw a list of indexed line segments.</para>
        <para>The following example uses DrawDottedLines to draw a line between objects defined in a list. To use this example, save the following script into the Assets/Editor folder:</para>
        <para>...then attach this script to the anchor object which you would like to see lines eminate from. Drop GameObjects you would like lines drawing to into the array in the script's inspector, and adjust the gap between the dotted lines accordingly:</para>
      </summary>
      <param name="points">A list of points.</param>
      <param name="segmentIndices">A list of pairs of indices to the start and end points of the line segments.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a line going through the list of all <c>points</c>.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. <c>PolyLine that connects all the objects in the Scene view.</c> The following example uses DrawPolyLine to draw a line between a number of GameObjects in the Scene view. To use this example, save the following script in the Assets/Editor folder:</para>
        <para>...and attach the following script to a GameObject in the Scene. Drag and drop GameObjects onto the GameObject's array inspector, corresponding to the objects where you would like to see the line drawn between:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawSelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>Draw a camera facing selection frame.</summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular sector (pie piece) in 3D space.</para>
        <para>
          <c>Solid Arc in the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject where you want the arc to appear:</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circumference, relative to the center, where the sector begins.</param>
      <param name="angle">The angle of the sector, in degrees.</param>
      <param name="radius">The radius of the circle.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a solid flat disc in 3D space.</para>
        <para>
          <c>Solid Disc in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject where you want the disc to appear:</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the disc.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidRectangleWithOutline(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a solid outlined rectangle in 3D space.</para>
        <para>
          <c>Solid rectangle with a black outline in the Scene View.</c> To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the object where you want the SolidRectangle to appear:</para>
      </summary>
      <param name="verts">The 4 vertices of the rectangle in world coordinates.</param>
      <param name="faceColor">The color of the rectangle's face.</param>
      <param name="outlineColor">The outline color of the rectangle.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular arc in 3D space.</para>
        <para>
          <c>Wire Arc in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject where you want the arc to appear:</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circle circumference, relative to the center, where the arc begins.</param>
      <param name="angle">The angle of the arc, in degrees.</param>
      <param name="radius">The radius of the circle.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a wireframe box with <c>center</c> and <c>size</c>.</para>
        <para>To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject where you want the cube to appear:</para>
      </summary>
      <param name="center">Position of the cube.</param>
      <param name="size">Size of the cube.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw the outline of a flat disc in 3D space.</para>
        <para>
          <c>Wire Disc in the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on the GameObject where you want the disc to appear:</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the disc.</param>
    </member>
    <member name="M:UnityEditor.Handles.EndGUI">
      <summary>
        <para>End a 2D GUI block and get back to the 3D handle GUI.</para>
        <para>
          <c>GUI in the Scene view.</c> To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject to demonstrate how to use Handles.BeginGui and Handles.EndGUI to display a GUIButton controlling the area of an arc:</para>
      </summary>
      <seealso cref="M:UnityEditor.Handles.BeginGUI" />
    </member>
    <member name="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make an unconstrained movement handle.</para>
        <para>This can move freely in all directions. Hold down CMD to snap, CMD-SHIFT to raysnap against colliders in the Scene. <c>Free Move handle in the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle.</param>
      <param name="snap">The grid size to snap movement to.</param>
      <param name="capFunc">The function to use for drawing the handle (e.g. Handles.RectangleCap).</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.FreeRotateHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make an unconstrained rotation handle.</para>
        <para>This handle can rotate freely on all axes. The rotation gizmo has no visible axes and is simply a circle in the Scene view. Users can click and drag from within the circle to provide input rotation to your editor script. <c>FreeRotate handle seen in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="size">The size of the handle.</param>
      <returns>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.GetMainGameViewSize">
      <summary>Get the width and height of the main Game view.</summary>
      <returns>The size of the Game view.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. <c>Label in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject:</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.Texture)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. <c>Label in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject:</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="image">Texture to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. <c>Label in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject:</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. <c>Label in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject:</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. <c>Label in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script in the Assets/Editor folder:</para>
        <para>...and place this script on a GameObject:</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.</param>
    </member>
    <member name="M:UnityEditor.Handles.MakeBezierPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
      <summary>Retuns an array of points to representing the bezier curve. See <see cref="UnityEditor.Handles.DrawBezier" />.</summary>
      <param name="startPosition">The location where the Bezier starts.</param>
      <param name="endPosition">The location where the Bezier ends</param>
      <param name="startTangent">The direction the Bezier will start in.</param>
      <param name="endTangent">The direction the Bezier will end in.</param>
      <returns>The array of the Bezier points.</returns>
    </member>
    <member name="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Make a 3D Scene view position handle.</para>
        <para>This behaves like the built-in Move tool in Unity. To control the orientation of the handle, set <see cref="UnityEditor.Handles.matrix" /> before calling this function. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen. To use this example, save this script to the Assets/Editor folder:</para>
        <para>Then, place this script on the GameObject you want to edit the LookAt point for:</para>
      </summary>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="rotation">Orientation of the handle in 3D space.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it returns the same value that you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Boolean)">
      <summary>
        <para>Make a Scene view radius handle.</para>
        <para>
          <c>RadiusHandle on the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the GameObject:</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <param name="handlesOnly">Whether to omit the circular outline of the radius and only draw the point handles.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make a Scene view radius handle.</para>
        <para>
          <c>RadiusHandle on the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the GameObject:</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.RectangleHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a rectangle handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="M:UnityEditor.Handles.RotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Make a Scene view rotation handle.</para>
        <para>This behaves like the built-in Rotation tool in Unity. If you have assigned something to Undo.SetSnapshotTarget, it works fully with Undo. <c>Rotate the attached object from the Rotation Handle.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the GameObject:</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it returns the same value that you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Make a Scene view scale handle.</para>
        <para>This behaves like the built-in Scale tool. <c>Scale handle that will appear whenever you select the GameObject.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the GameObject:</para>
      </summary>
      <param name="scale">Scale to modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">Allows you to scale the size of the handle on-scren.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleSlider(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
      <summary>
        <para>Make a directional scale slider.</para>
        <para>
          <c>Scale slider handle in the Scene View.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the GameObject:</para>
      </summary>
      <param name="scale">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="direction">The direction of the handle.</param>
      <param name="rotation">The rotation of whole object.</param>
      <param name="size">The size of the handle.</param>
      <param name="snap">The new value after the user has modified it.</param>
      <returns>The value modified by the user's interaction with the handle.</returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleValueHandle(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a single-float draggable handle.</para>
        <para>This is used to make the center scale handle. The user can click and drag to scale a single float up and down. <c>Scale Value handle in the Scene view with an arrow cap as the handle.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
        <para>And attach this script to the Handle:</para>
      </summary>
      <param name="value">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle.</param>
      <param name="capFunc">The function to use for drawing the handle (e.g. Handles.RectangleCap).</param>
      <param name="snap">The new value after the user has modified it.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.SelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>Draw a camera facing selection frame.</summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets <see cref="UnityEngine.Camera.current" /> to be <c>camera</c> and sets its pixelRect. This does not draw the camera, only sets it to be "active". To draw it use <see cref="UnityEditor.Handles.DrawCamera" />.</para>
      </summary>
      <param name="camera">The camera to draw.</param>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets <see cref="UnityEngine.Camera.current" /> to be <c>camera</c> and sets its pixelRect. This does not draw the camera, only sets it to be "active". To draw it use <see cref="UnityEditor.Handles.DrawCamera" />.</para>
      </summary>
      <param name="camera">The camera to draw.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This draws a 3D draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space. <c>Slider handle in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This draws a 3D draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space. <c>Slider handle in the Scene view.</c> Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
      <param name="size">3D size the size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">The snap value (see <see cref="UnityEditor.Handles.SnapValue" />).</param>
      <returns>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This draws a draggable handle on the screen. The handle is constrained to sliding on a plane. Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> if you want the handle to always remain the same size on the screen.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>The new handle position.</returns>
    </member>
    <member name="M:UnityEditor.Handles.SnapValue(System.Single,System.Single)">
      <summary>Rounds the value <c>val</c> to the closest multiple of <c>snap</c> (snap can only be positive).</summary>
      <param name="val">The argument to be modified and its value returned.</param>
      <param name="snap">The destination amount.</param>
      <returns>The rounded value, if <c>snap</c> is positive, and <c>val</c> otherwise.</returns>
    </member>
    <member name="M:UnityEditor.Handles.SphereCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Sphere. Pass this into handle functions.</para>
        <para>Note: Use <see cref="UnityEditor.HandleUtility.GetHandleSize" /> where you might want to have constant screen-sized handles. <c>Sphere Cap on the Scene View.</c> To use this example, save this script into the Assets/Editor folder:</para>
        <para>...and attach this script to the object where you'd like the SphereCap handles to appear:</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The 3D location for the sphere.</param>
      <param name="rotation">The rotation of the sphere around the object connected to.</param>
      <param name="size">The size of the sphere.</param>
    </member>
    <member name="M:UnityEditor.Handles.SphereHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a sphere handle. Pass this into handle functions.</para>
        <para>On <see cref="UnityEngine.EventType.Layout" /> event, calculates handle distance to mouse and calls <see cref="UnityEditor.HandleUtility.AddControl" /> accordingly. On <see cref="UnityEngine.EventType.Repaint" /> event, draws the handle shape. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The world-space position of the handle's start point.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles <see cref="UnityEngine.EventType.Layout" /> and <see cref="UnityEngine.EventType.Repaint" /> events.</param>
    </member>
    <member name="P:UnityEditor.HandleUtility.acceleration">
      <summary>
        <para>Get standard acceleration for dragging values (Read Only).</para>
        <para>Normal acceleration is 1.0. When Shift is pressed, it is 4.0; when Alt is pressed, acceleration is 0.25.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDelta">
      <summary>
        <para>Get nice mouse delta to use for dragging a float value (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back a float that is measured accordingly. This also handles modifier keys correctly, i.e. the delta is already multiplied by <see cref="UnityEditor.HandleUtility.acceleration" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDeltaZoom">
      <summary>
        <para>Get nice mouse delta to use for zooming (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back a float that is measured accordingly. This also handles modifier keys correctly, i.e. the delta is already multiplied by <see cref="UnityEditor.HandleUtility.acceleration" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddControl(System.Int32,System.Single)">
      <summary>
        <para>Record a distance measurement from a handle.</para>
        <para>All handles call this with their controlID during layout, then use nearestControl to check if they got the mouseDown.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddDefaultControl(System.Int32)">
      <summary>Add the ID for a default control. This will be picked if nothing else is.</summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.CalcLineTranslation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Map a mouse drag onto a movement along a line in 3D space.</para>
        <para>Certain types of Handles (such as arrows) involve movement along a line in 3D space. For example, the Transform's position arrows move the object along its local X, Y or Z axis as the mouse is dragged. The CalcLineTranslation function converts the movement of the mouse into constrained movement along a 3D line in the familiar way used by Unity's built-in tools.</para>
      </summary>
      <param name="src">The source point of the drag.</param>
      <param name="dest">The destination point of the drag.</param>
      <param name="srcPosition">The 3D position the dragged object had at <c>src</c> ray.</param>
      <param name="constraintDir">3D direction of constrained movement.</param>
      <returns>The distance travelled along constraintDir.</returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Get the point on an arc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the arc defined by its parameters and "flattens" it into screen space. The closest point between the flattened arc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D arc. This is useful for Handle GUIs that involve rotation of an object around the center of the arc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Get the point on an disc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the disc defined by its parameters and "flattens" it into screen space. The closest point between the flattened disc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D disc. This is useful for Handle GUIs that involve rotation of an object around the center of the disc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Get the point on a polyline (in 3D space) which is closest to the current mouse position.</para>
        <para>A polyline is simply a zigzag line defined by a set of points connected in sequence. The ClosestPointToPolyLine function takes the polyline defined by a point array and "flattens" it into screen space. The closest point between the flattened line and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D polyline. This is useful for Handle GUIs that involve manipulating an arbitrary 3D shape using the mouse; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools. An example of where this might be used is a racetrack defined by a set of waypoints - a position along the track line could be selected via the mouse using ClosestPointToPolyLine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>Calculate distance between a point and a Bezier curve.</summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>Calculate distance between a point and a line.</summary>
      <seealso cref="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>Distance from a point <c>p</c> in 2d to a line defined by two points <c>a</c> and <c>b</c>.</summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>Distance from a point <c>p</c> in 2d to a line segment defined by two points <c>a</c> and <c>b</c>.</summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D section of a disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc section at given world space <c>position</c> with the given <c>radius</c> and <c>normal</c>. The disc section is defined by <c>from</c> vector and the <c>angle</c> in degrees. Uses the current camera to determine the distance.</para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)" />
      <seealso cref="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to camera facing circle.</para>
        <para>Calculates the screen space distance from the mouse pointer to the circle at given world space <c>position</c> with the given <c>radius</c>. The circle is assumed to be facing the camera. Uses the current camera to determine the distance.</para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc (circle) at given world space <c>position</c> with the given <c>radius</c> and <c>normal</c>. Uses the current camera to determine the distance.</para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Pixel distance from mouse pointer to line.</para>
        <para>Calculates the screen space distance from the mouse pointer to the line between <c>p1</c> and <c>p2/</c> world space points. Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Pixel distance from mouse pointer to a polyline.</para>
        <para>Calculates the screen space distance from the mouse pointer to the multi segment line that goes through the given world space points. Uses the current camera to determine the distance.</para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToRectangle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a rectangle on screen.</para>
        <para>Calculates the screen space distance from the mouse pointer to the rectangle. Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)">
      <summary>
        <para>Get world space size of a manipulator handle at given position.</para>
        <para>Uses the current camera to calculate suitable size.</para>
      </summary>
      <param name="position">The position of the handle in 3d space.</param>
      <returns>A constant screen-size for the handle, based on the distance between from the supplied handle's position to the camera.</returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)">
      <summary>
        <para>Convert 2D GUI position to a world space ray.</para>
        <para>Uses the current camera to calculate the ray.</para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)" />
      <seealso cref="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Boolean)">
      <summary>Pick game object closest to specified position.</summary>
      <param name="selectPrefabRoot">Select prefab.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Int32@)">
      <summary>Pick game object closest to specified position.</summary>
      <param name="materialIndex">Returns index into material array of the Renderer component that is closest to specified position.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect)">
      <summary>
        <para>Pick GameObjects that lie within a specified screen rectangle.</para>
        <para>This is useful for implementing multi-select tools that allow the user to drag a rectangle around the desired objects.</para>
      </summary>
      <param name="rect">An screen rectangle specified with pixel coordinates.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the parameter for the projection of the <c>point</c> on the given line.</para>
        <para>The return value can be negative if the projected point is in negative <c>lineDirection</c> relative to the <c>linePoint/</c></para>
      </summary>
      <seealso cref="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.PopCamera(UnityEngine.Camera)">
      <summary>
        <para>Retrieve all camera settings.</para>
        <para>A call to PopCamera will retrieve the most recently stored Camera settings added to a "stack" structure by <see cref="UnityEditor.HandleUtility.PushCamera" />. This allows for easy saving and restoration of temporary camera changes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>Project <c>point</c> onto a line.</summary>
      <seealso cref="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)" />
      <seealso cref="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)" />
    </member>
    <member name="M:UnityEditor.HandleUtility.PushCamera(UnityEngine.Camera)">
      <summary>
        <para>Store all camera settings.</para>
        <para>The camera settings will be added to a so-called "stack" list, where they will stay until retrieved by a call to <see cref="UnityEditor.HandleUtility.PopCamera" />. The settings will be stored in the reverse of the order in which they were added, so a call to PopCamera will retrieve the most recently stored Camera data and then remove it from the stack. A subsequent call to PopCamera will then retrieve the next most recently pushed data and so on.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)">
      <summary>Casts <c>ray</c> against the scene and report if an object lies in its path.</summary>
      <returns>A boxed RaycastHit, null if nothing hit it.</returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.Repaint">
      <summary>Repaint the current view.</summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldPointToSizedRect(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.</para>
        <para>This function is useful when 3D objects need labels or other 2D controls that follow them around in 3D space as the camera moves.</para>
      </summary>
      <param name="position">The world-space position to use.</param>
      <param name="content">The content to make room for.</param>
      <param name="style">The style to use. The style's alignment.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)">
      <summary>
        <para>Convert world space point to a 2D GUI position.</para>
        <para>Uses the current camera to calculate the projection.</para>
      </summary>
      <param name="world">Point in world space.</param>
      <seealso cref="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)" />
      <seealso cref="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)" />
    </member>
    <member name="M:UnityEditor.Help.BrowseURL(System.String)">
      <summary>Open <c>url</c> in the default web browser.</summary>
    </member>
    <member name="M:UnityEditor.Help.GetHelpURLForObject(UnityEngine.Object)">
      <summary>Get the URL for this object's documentation.</summary>
      <param name="obj">The object to retrieve documentation for.</param>
      <returns>The documentation URL for the object. Note that this could use the http: or file: schemas.</returns>
    </member>
    <member name="M:UnityEditor.Help.HasHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Is there a help page for this object?</para>
        <para>
          <c>Editor Window that lets you load docs for any Selected GameObject.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Show help page for this object.</para>
        <para>
          <c>Editor Window that lets you load docs for any Selected GameObject.</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpPage(System.String)">
      <summary>
        <para>Show a help page.</para>
        <para>
          <c>page</c> should be the URL of the help page, usually beginning with <c>file://</c>. If <c>page</c> starts with <c>file:///unity/</c>, then it points to Unity help.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.active">
      <summary>Is there currently an active highlight?</summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeRect">
      <summary>The rect in screenspace of the current active highlight.</summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeText">
      <summary>The text of the current active highlight.</summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeVisible">
      <summary>
        <para>Is the current active highlight visible yet?</para>
        <para>If the element to be highlighted is inside a scrollview, the scrollview automatically scrolls to reveal the element. Once it is within view, activeViisble will be true.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it. Once the element is highlighted it will stay highlighted until either the <see cref="UnityEditor.Highlighter.Stop" /> function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode. Most EditorGUI controls can be highlighted using their label as identifier.</para>
        <para>Any control that uses the <see cref="UnityEditor.SerializedProperty" /> system can be highlighted using its <see cref="UnityEditor.SerializedProperty.propertyPath" />.</para>
        <para>Any element with text in it can be highlighted using that text as identifier, which is for example useful for buttons.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <returns>
        <c>true</c> if the requested element was found; otherwise <c>false</c>.</returns>
      <seealso cref="T:UnityEditor.HighlightSearchMode" />
      <seealso cref="M:UnityEditor.Highlighter.Stop" />
      <seealso cref="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)" />
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it. Once the element is highlighted it will stay highlighted until either the <see cref="UnityEditor.Highlighter.Stop" /> function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode. Most EditorGUI controls can be highlighted using their label as identifier.</para>
        <para>Any control that uses the <see cref="UnityEditor.SerializedProperty" /> system can be highlighted using its <see cref="UnityEditor.SerializedProperty.propertyPath" />.</para>
        <para>Any element with text in it can be highlighted using that text as identifier, which is for example useful for buttons.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <param name="mode">Optional mode to specify how to search for the element.</param>
      <returns>
        <c>true</c> if the requested element was found; otherwise <c>false</c>.</returns>
      <seealso cref="T:UnityEditor.HighlightSearchMode" />
      <seealso cref="M:UnityEditor.Highlighter.Stop" />
      <seealso cref="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)" />
    </member>
    <member name="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)">
      <summary>
        <para>Call this method to create an identifiable rect that the Highlighter can find.</para>
        <para>If you want a custom rect in an EditorWindow or custom Editor to be highlightable, you can call this method to specify the rect and the identifier text for that rect. That will make it possible for the Highlighter to highlight the rect.</para>
      </summary>
      <param name="position">The position to make highlightable.</param>
      <param name="identifier">The identifier text of the rect.</param>
    </member>
    <member name="M:UnityEditor.Highlighter.Stop">
      <summary>Stops the active highlight.</summary>
    </member>
    <member name="P:UnityEditor.iOSDeviceRequirement.values">
      <summary>
        <para>The values of the device requirement description.</para>
        <para>The values are encoded as a set of key-value pairs. Both keys and values directly correspond to keys and values used to describe device requirements in asset catalog Contents.json file.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.iOSDeviceRequirement.#ctor">
      <summary>Constructs new device requirement description.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoMaxDistance">
      <summary>
        <para>Beyond this distance a ray is considered to be unoccluded.</para>
        <para>Can be used to avoid full occlusion in closed scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasHeight">
      <summary>The maximum height of an individual lightmap texture.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasWidth">
      <summary>The maximum width of an individual lightmap texture.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.padding">
      <summary>Texel separation between shapes.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.realtimeResolution">
      <summary>Lightmap resolution in texels per world unit. Defines the resolution of Realtime GI if enabled. If Baked GI is enabled, this defines the resolution used for indirect lighting. Higher resolution may take a long time to bake.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.reflectionCubemapCompression">
      <summary>Determines how Unity will compress baked reflection cubemap.</summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.textureCompression">
      <summary>
        <para>Whether to use texture compression on the generated lightmaps.</para>
        <para>Compression is recommended to improve lightmap rendering performance and lower the memory footprint, but might introduce visible artifacts in scenes without high-detail texturing that would mask-out the issues.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.antiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing.</para>
        <para>For preview bakes, a value of 1 is sufficient, but you may notice jagged shadow edges in the output. The default value removes the majority of aliasing issues. For scenes with lots of lights, halving this value halves the baking time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOAntiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing in AO.</para>
        <para>Increasing this value does not increase baking times as the number of rays is only defined by AO quality. Effectively this parameter controls how to distribute the rays within the texel.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOQuality">
      <summary>
        <para>The number of rays to cast for computing ambient occlusion.</para>
        <para>Fewer rays produce a noisier result. In many cases using 256 rays gives a smooth result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.backFaceTolerance">
      <summary>
        <para>The percentage of rays shot from a ray origin that must hit front faces to be considered usable.</para>
        <para>The precompute calculates visibility from ray origins to clusters, but attempts to reject ray origins that are inside geometry. If the percentage of rays that hit front faces is less than backFaceTolerance, the ray origin is marked invalid and will not affect the radiosity computation. For example, if backFaceTolerance is 0.0, the ray origin is rejected only if it sees nothing but backfaces. If 1.0, the ray origin is rejected if it has even one ray that hits a backface. This setting can help control light leaking, but should be considered in the context of the mesh authoring workflow. Preventing the rejection of ray origins by setting a value of 0.0 will ensure Enlighten does not reject ray origins due to single-sided geometry. However, if the majority of the meshes are closed, so visible backfaces are rare, a positive value can reduce light leaking or darkening that intersecting geometry would otherwise cause.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.bakedLightmapTag">
      <summary>BakedLightmapTag is an integer that affects the assignment to baked lightmaps. Objects with different values for bakedLightmapTag are guaranteed to not be assigned to the same lightmap even if the other baking parameters are the same.</summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.blurRadius">
      <summary>
        <para>The radius (in texels) of the post-processing filter that blurs baked direct lighting.</para>
        <para>The filter is aware of geometry and visibility between texels and thus light leaking is reduced. In general, a value in the range from 2 to 8 leads to good results. Note that the processing time depends on the filter size squared and thus larger values should be avoided.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.clusterResolution">
      <summary>
        <para>Controls the resolution at which Enlighten stores and can transfer input light.</para>
        <para>Typically this resolution can be slightly lower than the resolution of the realtime lightmap without significantly reducing the final quality, although this depends on the kinds of lighting environments you wish to use. Small, bright light sources will require a higher clusterResolution for Enlighten to capture them accurately. Cluster resolution is multiplied by the realtime lightmap resolution. A high value means a higher cluster resolution. A value of 1 matches each texel in the realtime lightmap with one input cluster. Using a very small cluster resolution results in light being smeared across the output texels. Larger values do not significantly increase quality (as they have to be averaged for the final output texel), but can cause unnecessary increases in time and memory footprint.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.directLightQuality">
      <summary>
        <para>The number of rays used for lights with an area. Allows for accurate soft shadowing.</para>
        <para>This is the maximum number of rays to trace to any light with an area. Larger lights will require more rays to produce a noise-free output. The default value works with the majority of scene setups, but you should increase this value if you observe noise. It can have a significant impact on performance, and for scenes with lots of area lights, halving this value halves the baking time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceBudget">
      <summary>
        <para>The amount of data used for realtime GI texels. Specifies how detailed view of the scene a texel has. Small values mean more averaged out lighting.</para>
        <para>Performance impact: It affects the memory footprint and the rate of lighting updates.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceQuality">
      <summary>The number of rays to cast for computing irradiance form factors.</summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.isTransparent">
      <summary>
        <para>If enabled, the object appears transparent during GlobalIllumination lighting calculations.</para>
        <para>Backfaces are not contributing to and light travels through the surface. This is useful for emissive invisible surfaces.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.modellingTolerance">
      <summary>
        <para>Maximum size of gaps that can be ignored for GI (multiplier on pixel size).</para>
        <para>Can be used to alleviate issues when objects are close together and the gap between the objects should not be used in the calculation of GI. In some cases having an object near a surface may cause a dark halo on the surface around the perimeter of the object because there is a small gap between the object and the surface where nearly no light will enter causing a very dark pixel. These dark pixels can look bad if they are partially visible and not completely obscured by the object. Increasing the modelling tolerance will make the GI calculation ignore the parts of the pixel that are very near another surface. The value is multiplier on the pixel size. If you want to ignore 5cm gaps with a realtime resolution of 2 texels per meter you would need a modelling tolerance of 0.01.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.resolution">
      <summary>The texel resolution per meter used for realtime lightmaps. This value is multiplied by LightmapEditorSettings.resolution.</summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.stitchEdges">
      <summary>
        <para>Whether pairs of edges should be stitched together.</para>
        <para>When true, Enlighten identifies the pair of edges that should be stitched together and produces radiosity which is as smooth as possible across the seam. This parameter applies only to straight edges which run horizontally or vertically along chart boundaries in the atlas; the method is designed to work with rectangles which are axis-aligned in UV space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.systemTag">
      <summary>System tag is an integer identifier. It lets you force an object into a different Enlighten system even though all the other parameters are the same.</summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.bakedGI">
      <summary>Is baked GI enabled?</summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.bounceBoost">
      <summary>
        <para>Boost the albedo.</para>
        <para>When light bounces off a surface it is multiplied by the albedo of the surface. This values intensifies albedo and thus affects how strong the light bounces from one surface to the next. Used for realtime and baked lightmaps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.buildProgress">
      <summary>
        <para>Returns the current lightmapping build progress or 0 if <see cref="UnityEditor.Lightmapping.isRunning" /> is false.</para>
        <para>The returned range is 0 to 1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping.completed">
      <summary>Delegate which is called when bake job is completed.</summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.giWorkflowMode">
      <summary>The lightmap baking workflow mode used. Iterative mode is default, but you can switch to on demand mode which bakes only when the user presses the bake button.</summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.indirectOutputScale">
      <summary>
        <para>Scale for indirect lighting.</para>
        <para>Indirect light is composed of bounce lighting, emission and ambient lighting. This property changes the amount of indirect light within the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.isRunning">
      <summary>Returns true when the bake job is running, false otherwise (Read Only).</summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.lightingDataAsset">
      <summary>
        <para>The lighting data asset used by the active scene.</para>
        <para>Please note that modifying this value currently does not affect the scene immediately, the lighting data is only patched into the active scene when loading the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.realtimeGI">
      <summary>Is realtime GI enabled?</summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Bake">
      <summary>
        <para>Stars a synchronous bake job.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeAsync">
      <summary>
        <para>Starts an asynchronous bake job.</para>
        <para>The progress can be monitored via <see cref="UnityEditor.Lightmapping.isRunning" /> property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeMultipleScenes(System.String[])">
      <summary>
        <para>Bakes an array of scenes.</para>
        <para>This loads all scenes and then builds all lightmaps, reflection probes and enlighten data. The function automatically splits all baked data based on scene. Lightmap atlasses for example are always split between scenes. Thus you can bake lightmaps for two adjacent levels and light and shadows casted onto objects in level A will be affected by the objects in level B. Enlighten system data will automatically connect neighboring systems when it is additively loaded, thus bounce lighting can flow from one scene to another. A single LightProbe asset is generated for all scenes. Hence for the time being, lightprobes always take as much memory as there are lightprobes in all levels that are baked together. Only one ambient probe &amp; default sky probe will be baked and assigned to each scene. Multiple Lightmapsnapshot objects containing the data for each scene are written into a single file in "MyScene/LightmapSnapshot.asset". At build time this data will also be automatically split as well, hence if you bake multiple scenes but then only deploy one scene then only the lightmap data for that scene will be deployed.</para>
      </summary>
      <param name="paths">The path of the scenes that should be baked.</param>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeReflectionProbe(UnityEngine.ReflectionProbe,System.String)">
      <summary>
        <para>Starts a synchronous bake job for the probe.</para>
        <para>Returns when the baking has finished.</para>
      </summary>
      <param name="probe">Target probe.</param>
      <param name="path">The location where cubemap will be saved.</param>
      <returns>Returns true if baking was succesful.</returns>
      <seealso cref="T:UnityEngine.ReflectionProbe" />
    </member>
    <member name="M:UnityEditor.Lightmapping.Cancel">
      <summary>Cancels the currently running asynchronous bake job.</summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Clear">
      <summary>
        <para>Deletes all lightmap assets and makes all lights behave as if they weren't baked yet.</para>
        <para>The assets are located in the folder with the same name as the scene. Only the assets with names matching the following pattern are deleted. The naming depends on the lightmap mode: Non-directional lightmap mode: Lightmap-#_comp_light.exr Directional and Directional Specular lightmap mode: Lightmap-#_comp_light.exr Lightmap-#_comp_dir.exr It will also clear the lightmaps array and clear lightmap indices on all objects. Baked light probes and reflection probes are cleared as well.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ClearDiskCache">
      <summary>Clears the cache used by lightmaps, reflection probes and default reflection.</summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ClearLightingDataAsset">
      <summary>
        <para>Remove the lighting data asset used by the current scene.</para>
        <para>Removes the Lighting Data asset file from the Assets directory.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.GetTerrainGIChunks(UnityEngine.Terrain,System.Int32@,System.Int32@)">
      <summary>Get how many chunks the terrain is divided into for GI baking.</summary>
      <param name="terrain">The terrain.</param>
      <param name="numChunksX">Number of chunks in terrain width.</param>
      <param name="numChunksY">Number of chunks in terrain length.</param>
    </member>
    <member name="M:UnityEditor.Lightmapping.Tetrahedralize(UnityEngine.Vector3[],System.Int32[]@,UnityEngine.Vector3[]@)">
      <summary>
        <para>Calculates a Delaunay Tetrahedralization of the 'positions' point set - the same way the lightmapper.</para>
        <para>Tetrahedralizes the space for Light Probes. outIndices index into the array of outPositions and every four indices correspond to a tetrahedron. During the tetrahedralization any position duplicates withing some tolerance are removed (the first element is kept, subsequent are removed), so outPositions might have fewer elements than positions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.LODUtility.CalculateLODGroupBoundingBox(UnityEngine.LODGroup)">
      <summary>Recalculate the bounding region for the given LODGroup.</summary>
    </member>
    <member name="F:UnityEditor.MaterialEditor.kMiniTextureFieldLabelIndentLevel">
      <summary>Useful for indenting shader properties that need the same indent as mini texture field.</summary>
    </member>
    <member name="P:UnityEditor.MaterialEditor.isVisible">
      <summary>
        <para>Is the current material expanded.</para>
        <para>Use this to check if custom material fields should be rendered.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.Awake">
      <summary>Called when the Editor is woken up.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a color shader property.</summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a color shader property.</summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Default handling of preview area for materials.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewSettingsGUI">
      <summary>Default toolbar for material preview area.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to <see cref="UnityEditor.MaterialEditor.ShaderProperty" /> function, except it ignores any custom <see cref="UnityEditor.MaterialPropertyDrawer" /> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to <see cref="UnityEditor.MaterialEditor.ShaderProperty" /> function, except it ignores any custom <see cref="UnityEditor.MaterialPropertyDrawer" /> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a float shader property.</summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a float shader property.</summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>Calculate height needed for the property.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty,System.String)">
      <summary>Calculate height needed for the property.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetTexturePropertyCustomArea(UnityEngine.Rect)">
      <summary>Returns the free rect below the label and before the large thumb object field. Is used for e.g. tiling and offset properties.</summary>
      <param name="position">The total rect of the texture property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HelpBoxWithButton(UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>Make a help box with a message and button. Returns true, if button was pressed.</summary>
      <param name="messageContent">The message text.</param>
      <param name="buttonContent">The button text.</param>
      <returns>Returns true, if button was pressed.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.LightmapEmissionProperty(System.String)">
      <summary>This function will draw the UI for the lightmap emission property. (None, Realtime, baked)</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnDisable">
      <summary>Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnEnable">
      <summary>Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnInspectorGUI">
      <summary>Implement specific MaterialEditor GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesChanged">
      <summary>Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesDefaultGUI(UnityEditor.MaterialProperty[])">
      <summary>
        <para>Default rendering of shader properties.</para>
        <para>Note that you can customize shader properties rendering by implementing the IShaderGUI interface.</para>
      </summary>
      <param name="props">Array of material properties.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesGUI">
      <summary>Render the standard material properties. This method will either render properties using a IShaderGUI instance if found otherwise it uses <see cref="UnityEditor.MaterialEditor.PropertiesDefaultGUI" />.</summary>
      <returns>Returns true if any value was changed.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
        <para>To create a custom material editor, first you need to create the custom editor class and save it in the Assets/Editor folder, then reference the class name in your shader. For example:</para>
        <para>Here is an example showing a Range slider, affecting the shader's Glossiness property:</para>
        <para>Here is a similar example, using the Rect parameter to position and size the slider control within the custom material editor pane:</para>
        <para>This is what the example editor pane looks like: <c>Example material editor in Inspector.</c></para>
      </summary>
      <param name="prop">The property to edit.</param>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
        <para>To create a custom material editor, first you need to create the custom editor class and save it in the Assets/Editor folder, then reference the class name in your shader. For example:</para>
        <para>Here is an example showing a Range slider, affecting the shader's Glossiness property:</para>
        <para>Here is a similar example, using the Rect parameter to position and size the slider control within the custom material editor pane:</para>
        <para>This is what the example editor pane looks like: <c>Example material editor in Inspector.</c></para>
      </summary>
      <param name="position">Position and size of the range slider control.</param>
      <param name="prop">The property to edit.</param>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RegisterPropertyChangeUndo(System.String)">
      <summary>Call this when you change a material property. It will add an undo for the action.</summary>
      <param name="label">Undo Label.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RenderQueueField">
      <summary>
        <para>Display UI for editing material's render queue setting.</para>
        <para>The Render Queue UI allows you to set <see cref="UnityEngine.Material.renderQueue" /> to one of the common values (e.g. Geometry or Transparent), as well as allowing you to specify a custom render queue value.</para>
      </summary>
      <seealso cref="P:UnityEngine.Material.renderQueue" />
      <seealso cref="P:UnityEngine.Shader.renderQueue" />
      <seealso cref="T:UnityEngine.Rendering.RenderQueue" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.RenderQueueField(UnityEngine.Rect)">
      <summary>
        <para>Display UI for editing material's render queue setting.</para>
        <para>The Render Queue UI allows you to set <see cref="UnityEngine.Material.renderQueue" /> to one of the common values (e.g. Geometry or Transparent), as well as allowing you to specify a custom render queue value.</para>
      </summary>
      <seealso cref="P:UnityEngine.Material.renderQueue" />
      <seealso cref="P:UnityEngine.Shader.renderQueue" />
      <seealso cref="T:UnityEngine.Rendering.RenderQueue" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.RequiresConstantRepaint">
      <summary>Does this edit require to be repainted constantly in its current state?</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetDefaultGUIWidths">
      <summary>Set EditorGUIUtility.fieldWidth and labelWidth to the default values that PropertiesGUI uses.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="shader">Shader to set.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader,System.Boolean)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="registerUndo">Should undo be registered.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type. Any custom <see cref="UnityEditor.MaterialPropertyDrawer" /> objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use <see cref="UnityEditor.MaterialEditor.DefaultShaderProperty" /> function.</para>
      </summary>
      <seealso cref="T:UnityEngine.MaterialPropertyBlock" />
      <seealso cref="T:UnityEditor.MaterialPropertyDrawer" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type. Any custom <see cref="UnityEditor.MaterialPropertyDrawer" /> objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use <see cref="UnityEditor.MaterialEditor.DefaultShaderProperty" /> function.</para>
      </summary>
      <seealso cref="T:UnityEngine.MaterialPropertyBlock" />
      <seealso cref="T:UnityEditor.MaterialPropertyDrawer" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureCompatibilityWarning(UnityEditor.MaterialProperty)">
      <summary>
        <para>Checks if particular property has incorrect type of texture specified by the material, displays appropriate warning and suggests the user to automatically fix the problem.</para>
        <para>The warning box is shown using GUILayout so it is recommended to call this method right after the property.</para>
      </summary>
      <param name="prop">The texture property to check and display warning for, if necessary.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a texture shader property.</summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>Draw a property field for a texture shader property.</summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a texture shader property.</summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>Draw a property field for a texture shader property.</summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String,System.Boolean)">
      <summary>Draw a property field for a texture shader property.</summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyMiniThumbnail(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property that only takes up a single line height.</para>
        <para>The thumbnail is shown to the left of the label. Note for some textures it might use more vertical space than a single line height because of an additional information box.</para>
      </summary>
      <param name="position">Rect that this control should be rendered in.</param>
      <param name="label">Label for the field.</param>
      <returns>Returns total height used by this control.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <returns>Returns the Rect used.</returns>
      <seealso cref="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)" />
      <seealso cref="T:UnityEditor.ShaderGUI" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <returns>Returns the Rect used.</returns>
      <seealso cref="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)" />
      <seealso cref="T:UnityEditor.ShaderGUI" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <param name="extraProperty2">Second optional property inlined after the extraProperty1.</param>
      <returns>Returns the Rect used.</returns>
      <seealso cref="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)" />
      <seealso cref="T:UnityEditor.ShaderGUI" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a compact layout of properties.</para>
        <para>The texture is shown using the mini thumbnail that fits on a single line. The first extra property is shown inlined after the texture property and the second extra property is shown below on a new line with it's own label.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First extra property inlined after the texture property.</param>
      <param name="label2">Label for the second extra property (on a new line and indented).</param>
      <param name="extraProperty2">Second property on a new line below the texture.</param>
      <returns>Returns the Rect used.</returns>
      <seealso cref="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty)" />
      <seealso cref="T:UnityEditor.ShaderGUI" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyWithHDRColor(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.ColorPickerHDRConfig,System.Boolean)">
      <summary>
        <para>Method for showing a texture property control with a HDR color field and its color brightness float field.</para>
        <para>The texture is shown using the mini thumbnail. Usefull for compact representation of a texture and a HDR color.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="colorProperty">The color property (will be treated as a HDR color).</param>
      <param name="hdrConfig">The HDR color configuration used by the HDR Color Picker.</param>
      <param name="showAlpha">If false then the alpha channel information will be hidden in the GUI.</param>
      <returns>Return the Rect used.</returns>
      <seealso cref="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty)" />
      <seealso cref="T:UnityEditor.ShaderGUI" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty)">
      <summary>Draws tiling and offset properties for a texture.</summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.Boolean)">
      <summary>Draws tiling and offset properties for a texture.</summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
      <param name="partOfTexturePropertyControl">If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4)">
      <summary>TODO.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4,System.Boolean)">
      <summary>TODO.</summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a vector shader property.</summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>Draw a property field for a vector shader property.</summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Material)">
      <summary>
        <para>Apply initial <see cref="UnityEditor.MaterialPropertyDrawer" /> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Object[])">
      <summary>
        <para>Apply initial <see cref="UnityEditor.MaterialPropertyDrawer" /> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetDefaultPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property, ignoring custom drawers.</para>
        <para>This is similar to <see cref="UnityEditor.MaterialEditor.GetPropertyHeight" />, except it ignores any custom <see cref="UnityEditor.MaterialPropertyDrawer" /> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(UnityEngine.Rect)">
      <summary>Utility method for GUI layouting ShaderGUI. Used e.g for the rect after a left aligned Color field.</summary>
      <param name="r">Field Rect.</param>
      <returns>A sub rect of the input Rect.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenLabelAndField(UnityEngine.Rect)">
      <summary>Utility method for GUI layouting ShaderGUI.</summary>
      <param name="r">Field Rect.</param>
      <returns>A sub rect of the input Rect.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetLeftAlignedFieldRect(UnityEngine.Rect)">
      <summary>Utility method for GUI layouting ShaderGUI.</summary>
      <param name="r">Field Rect.</param>
      <returns>A sub rect of the input Rect.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])">
      <summary>
        <para>Get shader property information of the passed materials.</para>
        <para>When implementing custom MaterialEditors, you'd usually pass this.targets array to this function, i.e. all the selected materials.</para>
      </summary>
      <seealso cref="T:UnityEngine.MaterialPropertyBlock" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.String)">
      <summary>Get information about a single shader property.</summary>
      <param name="mats">Selected materials.</param>
      <param name="name">Property name.</param>
      <seealso cref="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])" />
      <seealso cref="T:UnityEngine.MaterialPropertyBlock" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.Int32)">
      <summary>Get information about a single shader property.</summary>
      <param name="mats">Selected materials.</param>
      <param name="propertyIndex">Property index.</param>
      <seealso cref="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])" />
      <seealso cref="T:UnityEngine.MaterialPropertyBlock" />
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRectAfterLabelWidth(UnityEngine.Rect)">
      <summary>Utility method for GUI layouting ShaderGUI. This is the rect after the label which can be used for multiple properties. The input rect can be fetched by calling: EditorGUILayout.GetControlRect.</summary>
      <param name="r">Line Rect.</param>
      <returns>A sub rect of the input Rect.</returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRightAlignedFieldRect(UnityEngine.Rect)">
      <summary>Utility method for GUI layouting ShaderGUI.</summary>
      <param name="r">Field Rect.</param>
      <returns>A sub rect of the input Rect.</returns>
    </member>
    <member name="P:UnityEditor.MaterialProperty.colorValue">
      <summary>
        <para>Color value of the property.</para>
        <para>Setting a new value will apply it to all material <see cref="UnityEditor.MaterialProperty.targets" />, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.displayName">
      <summary>
        <para>Display name of the property (Read Only).</para>
        <para>This is the user-visible property name, for example "Main Texture" that is declared in the shader's Properties block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.flags">
      <summary>Flags that control how property is displayed (Read Only).</summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.floatValue">
      <summary>
        <para>Float vaue of the property.</para>
        <para>Setting a new value will apply it to all material <see cref="UnityEditor.MaterialProperty.targets" />, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.hasMixedValue">
      <summary>
        <para>Does this property have multiple different values? (Read Only)</para>
        <para>When multiple materials are selected at once, some of their properties can have different values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.name">
      <summary>
        <para>Name of the property (Read Only).</para>
        <para>This is the variable name that is used in the shader, for example _MainTex.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.rangeLimits">
      <summary>
        <para>Min/max limits of a ranged float property (Read Only).</para>
        <para>This is only relevant for <see href="MaterialProperty.PropType.Range" cref="MaterialProperty.PropType.Range" /> properties.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.targets">
      <summary>
        <para>Material objects being edited by this property (Read Only).</para>
        <para>Changes done to property values via <see cref="UnityEditor.MaterialProperty.floatValue" />, <see cref="UnityEditor.MaterialProperty.colorValue" />, <see cref="UnityEditor.MaterialProperty.vectorValue" />, <see cref="UnityEditor.MaterialProperty.textureValue" /> will be applied to these objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureDimension">
      <summary>Texture dimension (2D, Cubemap etc.) of the property (Read Only).</summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureValue">
      <summary>
        <para>Texture value of the property.</para>
        <para>Setting a new value will apply it to all material <see cref="UnityEditor.MaterialProperty.targets" />, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.type">
      <summary>
        <para>Type of the property (Read Only).</para>
        <para>Material properties can be textures, colors, floats and so on. Depending on the type, you should use <see cref="UnityEditor.MaterialProperty.textureValue" />, <see cref="UnityEditor.MaterialProperty.colorValue" />, <see cref="UnityEditor.MaterialProperty.vectorValue" /> or <see cref="UnityEditor.MaterialProperty.floatValue" /> to access the property value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.vectorValue">
      <summary>
        <para>Vector value of the property.</para>
        <para>Setting a new value will apply it to all material <see cref="UnityEditor.MaterialProperty.targets" />, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.Apply(UnityEditor.MaterialProperty)">
      <summary>
        <para>Apply extra initial values to the material.</para>
        <para>This function is called in all property drawers when a new material is created, or a shader is changed on an existing material. This lets the property drawers apply any extra values to the materials, for example to setup shader keywords. Note that if you change a property by assigning a value to it, Apply() is not called automatically. If you have any extra setup you need it to do, you should call it yourself.</para>
      </summary>
      <param name="prop">The <see cref="UnityEditor.MaterialProperty" /> to apply values for.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.GetPropertyHeight(UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to specify how tall the GUI for this property is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="prop">The <see cref="UnityEditor.MaterialProperty" /> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="prop">The <see cref="UnityEditor.MaterialProperty" /> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.Menu.#ctor">
      <summary>Default constructor.</summary>
    </member>
    <member name="M:UnityEditor.Menu.GetChecked(System.String)">
      <summary>Get the check status of the given menu.</summary>
    </member>
    <member name="M:UnityEditor.Menu.SetChecked(System.String,System.Boolean)">
      <summary>Set the check status of the given menu.</summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.context">
      <summary>
        <para>Context is the object that is the target of a menu command.</para>
        <para>Usually the context is the current selection or the item under the mouse when invoking a context menu.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.userData">
      <summary>An integer for passing custom information to a menu item.</summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context and userData will be initialized to inContext and inUserdata respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context will be initialized to inContext and userdata will be set to 0.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.GetMeshCompression(UnityEngine.Mesh)">
      <summary>Returns the mesh compression setting for a Mesh.</summary>
      <param name="mesh">The mesh to get information on.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.Optimize(UnityEngine.Mesh)">
      <summary>
        <para>Optimizes the mesh for GPU access.</para>
        <para>This operation might take a while but will make the geometry displayed be faster. You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time. Internally it converts the mesh to triangle list and optimizes the triangles and vertices for both pre and post transform cache locality. For imported models you should never call this as the import pipeline already does it for you.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetMeshCompression(UnityEngine.Mesh,UnityEditor.ModelImporterMeshCompression)">
      <summary>
        <para>Change the mesh compression setting for a mesh.</para>
        <para>This allows you to enable mesh compression for meshes created from scripting, which have not been generated by the ModelImporter. That way you can generate compressed mesh assets from code.</para>
      </summary>
      <param name="mesh">The mesh to set the compression mode for.</param>
      <param name="compression">The compression mode to set.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetPerTriangleUV2(UnityEngine.Mesh,UnityEngine.Vector2[])">
      <summary>Will insert per-triangle uv2 in mesh and handle vertex splitting etc.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.addCollider">
      <summary>Add mesh colliders to imported meshes.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationCompression">
      <summary>
        <para>Animation compression setting.</para>
        <para>Compressing animations saves space in the built game, but more compression introduces more artifacts in the animation data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationPositionError">
      <summary>
        <para>Allowed error of animation position compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and original positions on a curve. This settings used only when animation keyframe reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationRotationError">
      <summary>
        <para>Allowed error of animation rotation compression.</para>
        <para>Allowed error is defined in angle (in degrees) between compressed and original quaternions on a curve. This settings used only when animation keyframe reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationScaleError">
      <summary>
        <para>Allowed error of animation scale compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and original scale on a curve. This settings used only when animation keyframe reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationType">
      <summary>Animator generation mode.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationWrapMode">
      <summary>The default wrap mode for the generated animation clips.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.bakeIK">
      <summary>Bake Inverse Kinematics (IK) when importing.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.clipAnimations">
      <summary>
        <para>Animation clips to split animation into.</para>
        <para>When you import a file for the first time clipAnimations will be always empty. If you need to populate clipAnimations before the first import you can use an <see cref="UnityEditor.AssetPostprocessor" /> and override <see cref="UnityEditor.AssetPostprocessor.OnPreprocessAnimation" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.defaultClipAnimations">
      <summary>Generate a list of all default animation clip based on TakeInfo.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.extraExposedTransformPaths">
      <summary>
        <para>Animation optimization setting.</para>
        <para>Specify the paths of the Transforms which are not supposed to be optimized out when <see cref="UnityEditor.ModelImporter.optimizeGameObjects" /> is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.fileScale">
      <summary>File scale factor (if available) or default one. (Read-only).</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateAnimations">
      <summary>Animation generation options.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateSecondaryUV">
      <summary>Generate secondary UV set for lightmapping.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.globalScale">
      <summary>Global scale factor for importing.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.humanDescription">
      <summary>The human description that is used to generate an Avatar during the import process.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.humanoidOversampling">
      <summary>
        <para>Controls how much oversampling is used when importing humanoid animations for retargeting.</para>
        <para>Humanoid retargeting implies resampling animations at import. By default, the sampling rate of the imported file is used. There are exceptional cases where a higher sampling rate is needed to ensure valid interpolation between original frames. Key reducing can be used on top of oversampling to reduce the size of the final produced clip. Key reducing will not remove keys where tighter interpolation is needed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importAnimation">
      <summary>Import animation from file.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importBlendShapes">
      <summary>Controls import of BlendShapes.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importedTakeInfos">
      <summary>
        <para>Generates the list of all imported take.</para>
        <para>SA <see cref="UnityEditor.TakeInfo" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importMaterials">
      <summary>
        <para>Import materials from file.</para>
        <para>When set to false ModelImporter will use default material (Default-Diffuse.mat) instead of imported materials, otherwise it will find existing or create new materials based on <see cref="UnityEditor.ModelImporter.materialName" /> and <see cref="UnityEditor.ModelImporter.materialSearch" /> options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importNormals">
      <summary>Vertex normal import options.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importTangents">
      <summary>Vertex tangent import options.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isBakeIKSupported">
      <summary>Is Bake Inverse Kinematics (IK) supported by this importer.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isFileScaleUsed">
      <summary>Is FileScale was used when importing.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isReadable">
      <summary>
        <para>Are mesh vertices and indices accessible from script?</para>
        <para>Making a mesh readable will keep two copies of it in memory, one for rendering and one in system memory for script access. Setting isReadable to false therefore saves memory. Scaling a mesh with different amounts along the three axes (i.e. non-uniform scaling) requires the mesh to be readable for correct lighting. In the Unity editor access is always permitted when not in play mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isTangentImportSupported">
      <summary>Is import of tangents supported by this importer.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isUseFileUnitsSupported">
      <summary>
        <para>Is useFileUnits supported for this asset.</para>
        <para>UseFileUnits is supported only on .max files.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialName">
      <summary>
        <para>Material naming setting.</para>
        <para>When importing new model Unity will generate material name based on this setting and then it will try to locate existing material with such name, if no such material exists Unity will create a new material by that name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialSearch">
      <summary>
        <para>Existing material search setting.</para>
        <para>When importing new model Unity will try to find existing materials in a set of folders based on this setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.meshCompression">
      <summary>
        <para>Mesh compression setting.</para>
        <para>Compressing meshes saves space in the built game, but more compression introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.motionNodeName">
      <summary>
        <para>The path of the transform used to generation the motion of the animation.</para>
        <para>Path should look like this : "Reference/Root".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalSmoothingAngle">
      <summary>
        <para>Smoothing angle (in degrees) for calculating normals.</para>
        <para>How sharp the edge has to be to be turned into a hard edge when calculating normals. This setting is only used when <see cref="UnityEditor.ModelImporter.importNormals" /> is set to <see cref="UnityEditor.ModelImporterNormals.Calculate" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeGameObjects">
      <summary>
        <para>Animation optimization setting.</para>
        <para>In the GameObjects hierarchy of a character, the GameObjects which only contain Transform component, will be optimized out unless they are specified in <see cref="UnityEditor.ModelImporter.extraExposedTransformPaths" /> for better CPU performance. The remaining GameObjects hierarchy will be flattened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeMesh">
      <summary>
        <para>Vertex optimization setting.</para>
        <para>The vertices and indices will be reordered for better GPU performance. Techniques that require strict vertex ordering like mesh morphing or special particle mesh emitter effects should have this option disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.referencedClips">
      <summary>Generates the list of all imported Animations.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.resampleCurves">
      <summary>If set to false, the importer will not resample curves when possible. Read more about animation curve resampling. Notes: - Some unsupported FBX features (such as PreRotation or PostRotation on transforms) will override this setting. In these situations, animation curves will still be resampled even if the setting is disabled. For best results, avoid using PreRotation, PostRotation and GetRotationPivot. - This option was introduced in Version 5.3. Prior to this version, Unity's import behaviour was as if this option was always enabled. Therefore enabling the option gives the same behaviour as pre-5.3 animation import.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAngleDistortion">
      <summary>Threshold for angle distortion (in degrees) when generating secondary UV.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAreaDistortion">
      <summary>Threshold for area distortion when generating secondary UV.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVHardAngle">
      <summary>Hard angle (in degrees) for generating secondary UV.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVPackMargin">
      <summary>Margin to be left between charts when packing secondary UV.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.sourceAvatar">
      <summary>
        <para>Imports the HumanDescription from the given Avatar.</para>
        <para>This is the same as using Copy from Other Avatar in the inspector. The Avatar must be attached to an importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.swapUVChannels">
      <summary>Swap primary and secondary UV channels when importing.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.transformPaths">
      <summary>Generates the list of all imported Transforms.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.useFileUnits">
      <summary>
        <para>Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.</para>
        <para>This setting is used only for .max files. It was introduced for backwards compatibility: there is a bug in some FBX 2011 plugins - they fail to pick up file units and export everything as 1unit=1cm. We fixed that problem by setting the units manually, but that breaks projects which were built with FBX 2011 plugins already, so useFileUnits was introduced as a solution. Set it to false if you want to default to centimeters in FBX exporter.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ModelImporter.CreateDefaultMaskForClip(UnityEditor.ModelImporterClipAnimation)">
      <summary>
        <para>Creates a mask that matches the model hierarchy, and applies it to the provided <see cref="UnityEditor.ModelImporterClipAnimation" />.</para>
        <para>When writing an <see cref="UnityEditor.AssetPostprocessor" />, use this method with your created clips to apply a mask that matches the transform hierarchy in the <see cref="UnityEditor.ModelImporter" />.</para>
      </summary>
      <param name="clip">Clip to which the mask will be applied.</param>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.curves">
      <summary>
        <para>Additionnal curves that will be that will be added during the import process.</para>
        <para>They are automatically binded to the animator controller parameter that have the same name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.cycleOffset">
      <summary>Offset to the cycle of a looping animation, if a different time in it is desired to be the start.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.events">
      <summary>AnimationEvents that will be added during the import process.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.firstFrame">
      <summary>First frame of the clip.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.hasAdditiveReferencePose">
      <summary>Enable to defines an additive reference pose.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightFromFeet">
      <summary>Keeps the feet aligned with the root transform position.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightOffset">
      <summary>Offset to the vertical root position.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalOrientation">
      <summary>Keeps the vertical position as it is authored in the source file.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionXZ">
      <summary>Keeps the vertical position as it is authored in the source file.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionY">
      <summary>Keeps the vertical position as it is authored in the source file.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lastFrame">
      <summary>Last frame of the clip.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootHeightY">
      <summary>Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootPositionXZ">
      <summary>Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootRotation">
      <summary>Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loop">
      <summary>Is the clip a looping animation?</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopPose">
      <summary>Enable to make the motion loop seamlessly.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopTime">
      <summary>Enable to make the clip loop.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskNeedsUpdating">
      <summary>Returns true when the source AvatarMask has changed. This only happens when <see cref="UnityEditor.ModelImporterClipAnimation.maskType" /> is set to <see cref="UnityEditor.ClipAnimationMaskType.CopyFromOther" /> To force a reload of the mask, simply set <see cref="UnityEditor.ModelImporterClipAnimation.maskSource" /> to the desired <see cref="UnityEditor.Animations.AvatarMask" />.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskSource">
      <summary>
        <para>The AvatarMask used to mask transforms during the import process.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip. A source mask is only needed if <see cref="UnityEditor.ModelImporterClipAnimation.maskType" /> is set to <see cref="UnityEditor.ClipAnimationMaskType.CopyFromOther" /></para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskType">
      <summary>
        <para>Define mask type.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.mirror">
      <summary>Mirror left and right in this clip.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.name">
      <summary>Clip name.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.rotationOffset">
      <summary>Offset in degrees to the root rotation.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.takeName">
      <summary>Take name.</summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.wrapMode">
      <summary>The wrap mode of the animation.</summary>
    </member>
    <member name="M:UnityEditor.ModelImporterClipAnimation.ConfigureClipFromMask(UnityEditor.Animations.AvatarMask)">
      <summary>
        <para>Copy the mask settings from an <see cref="UnityEditor.Animations.AvatarMask" /> to the clip configuration.</para>
        <para>When writing an <see cref="UnityEditor.AssetPostprocessor" />, use this method to copy an <see cref="UnityEditor.Animations.AvatarMask" /> to your clip configuration.</para>
      </summary>
      <param name="mask">
        <see cref="UnityEditor.Animations.AvatarMask" /> from which the mask settings will be imported.</param>
      <seealso cref="M:UnityEditor.ModelImporterClipAnimation.ConfigureMaskFromClip(UnityEditor.Animations.AvatarMask@)" />
    </member>
    <member name="M:UnityEditor.ModelImporterClipAnimation.ConfigureMaskFromClip(UnityEditor.Animations.AvatarMask@)">
      <summary>
        <para>Copy the current masking settings from the clip to an <see cref="UnityEditor.Animations.AvatarMask" />.</para>
        <para>When writing an <see cref="UnityEditor.AssetPostprocessor" />, use this method to copy the <see cref="UnityEditor.Animations.AvatarMask" /> from your clip configuration so that you can modify it. Note: you will need to use <see cref="UnityEditor.ModelImporterClipAnimation.ConfigureClipFromMask" /> to apply the <see cref="UnityEditor.Animations.AvatarMask" /> back on the <see cref="UnityEditor.ModelImporterClipAnimation" /></para>
      </summary>
      <param name="mask">
        <see cref="UnityEditor.Animations.AvatarMask" /> to which the masking values will be saved.</param>
      <seealso cref="M:UnityEditor.ModelImporterClipAnimation.ConfigureClipFromMask(UnityEditor.Animations.AvatarMask)" />
    </member>
    <member name="M:UnityEditor.MonoScript.GetClass">
      <summary>Returns the System.Type object of the class implemented by this script.</summary>
    </member>
    <member name="M:UnityEditor.MonoScript.FromMonoBehaviour(UnityEngine.MonoBehaviour)">
      <summary>Returns the MonoScript object containing specified MonoBehaviour.</summary>
      <param name="behaviour">The MonoBehaviour whose MonoScript should be returned.</param>
    </member>
    <member name="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)">
      <summary>Returns the MonoScript object containing specified ScriptableObject.</summary>
      <param name="scriptableObject">The ScriptableObject whose MonoScript should be returned.</param>
    </member>
    <member name="P:UnityEditor.MovieImporter.duration">
      <summary>Duration of the Movie to be imported in seconds.</summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.linearTexture">
      <summary>
        <para>Is the movie texture storing non-color data?</para>
        <para>The default value is false, i.e. movie is considered to contain sRGB color data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.quality">
      <summary>
        <para>Quality setting to use when importing the movie. This is a float value from 0 to 1.</para>
        <para>0 uses strongest compression for small download sizes. 1 uses best quality resulting in larger files. This corresponds directly to the slider in the MovieImporter inspector. The default value is 0.5.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)">
      <summary>Class name of an object.</summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetDragAndDropTitle(UnityEngine.Object)">
      <summary>Drag and drop title for an object.</summary>
      <seealso cref="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)" />
      <seealso cref="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)" />
    </member>
    <member name="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)">
      <summary>
        <para>Inspector title for an object.</para>
        <para>If an object is a script, this will return "<c>scriptname</c> (Script)", for example.</para>
      </summary>
      <seealso cref="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)" />
      <seealso cref="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)" />
    </member>
    <member name="M:UnityEditor.ObjectNames.GetUniqueName(System.String[],System.String)">
      <summary>Make a unique name using the provided name as a base. If the target name is in the provided list of existing names, a unique name is generated by appending the next available numerical increment.</summary>
      <param name="existingNames">A list of pre-existing names.</param>
      <param name="name">Desired name to be used as is, or as a base.</param>
      <returns>A name not found in the list of pre-existing names.</returns>
    </member>
    <member name="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)">
      <summary>
        <para>Make a displayable name for a variable.</para>
        <para>This function will insert spaces before capital letters and remove optional <c>m_</c>, <c>_</c> or <c>k</c> followed by uppercase letter in front of the name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.SetNameSmart(UnityEngine.Object,System.String)">
      <summary>
        <para>Sets the name of an Object.</para>
        <para>If the object is an Asset, renames the asset and file names to match the object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ObjectPreview.target">
      <summary>The object currently being previewed.</summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>This is the first entry point for Preview Drawing.</para>
        <para>The default implementation will draw a grid of previews if there are multiple targets available. Override this method if you want to change this behaviour.</para>
      </summary>
      <param name="previewArea">The available area to draw the preview.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetInfoString">
      <summary>Implement this method to show object information on top of the object preview.</summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetPreviewTitle">
      <summary>Override this method if you want to change the label of the Preview area.</summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.Initialize(UnityEngine.Object[])">
      <summary>
        <para>Called when the Preview gets created with the objects being previewed.</para>
        <para>You can override this function and use this to cache or initialize anything needed by your preview.</para>
      </summary>
      <param name="targets">The objects being previewed.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.MoveNextTarget">
      <summary>Called to iterate through the targets, this will be used when previewing more than one target.</summary>
      <returns>True if there is another target available.</returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of <see cref="UnityEditor.ObjectPreview.OnPreviewGUI" /> if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't). The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement <see cref="UnityEditor.ObjectPreview.OnInteractivePreviewGUI" /> then this will only be called for non-interactive custom previews. The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.ResetTarget">
      <summary>Called to Reset the target before iterating through them.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.accelerometerFrequency">
      <summary>
        <para>Accelerometer update frequency.</para>
        <para>Note: build-time option. Has no effect if changed when application is already running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.actionOnDotNetUnhandledException">
      <summary>
        <para>Sets the crash behavior on .NET unhandled exception.</para>
        <para>The options are `ActionOnDotNetUnhandledException.Crash` (the application crashes hardly and forces iOS to generate a crash report that can be submitted to iTunes by app users and inspected by developers) and `ActionOnDotNetUnhandledException.Silent Exit` (the application exits gracefully).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.advancedLicense">
      <summary>
        <para>Is the advanced version being used?</para>
        <para>Unity is available as Personal or Professional. advancedLicense will return true when running on a Professional version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeLeft">
      <summary>Is auto-rotation to landscape left supported?</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeRight">
      <summary>Is auto-rotation to landscape right supported?</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortrait">
      <summary>Is auto-rotation to portrait supported?</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortraitUpsideDown">
      <summary>Is auto-rotation to portrait upside-down supported?</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowFullscreenSwitch">
      <summary>If enabled, allows the user to switch between full screen and windowed mode using OS specific keyboard short cuts.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.aotOptions">
      <summary>Additional AOT compilation options. Shared by AOT platforms.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.apiCompatibilityLevel">
      <summary>.NET API compatibility level.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bakeCollisionMeshes">
      <summary>Pre bake collision meshes on player build.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleIdentifier">
      <summary>Application bundle identifier shared between iOS &amp; Android platforms.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleVersion">
      <summary>Application bundle version shared between iOS &amp; Android platforms.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.captureSingleScreen">
      <summary>Defines if fullscreen games should darken secondary displays.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.cloudProjectId">
      <summary>A unique cloud project identifier. It is unique for every project (Read Only).</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.colorSpace">
      <summary>
        <para>Set the rendering color space for the current project.</para>
        <para>Note that changing the project color space may cause a reimport of some assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.companyName">
      <summary>
        <para>The name of your company.</para>
        <para>This is used to locate the preferences file. <c>Custom player settings.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.cursorHotspot">
      <summary>Default cursor's click position in pixels from the top left corner of the cursor image.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d11FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 11 mode).</para>
        <para>Set this to change how fullscreen mode is handled in Windows standalone builds with Direct3D 11. See D3D11FullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d9FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 9 mode).</para>
        <para>Set this to change how fullscreen mode is handled in Windows standalone builds with Direct3D 9. See D3D9FullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultCursor">
      <summary>The default cursor for your application.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultInterfaceOrientation">
      <summary>Default screen orientation for mobiles.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultIsFullScreen">
      <summary>
        <para>If enabled, the game will default to fullscreen mode.</para>
        <para>The Windowed checkbox on the Resolution Dialog will be disabled by default when this setting is enabled. <c>Custom player settings.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenHeight">
      <summary>Default vertical dimension of stand-alone player window.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenWidth">
      <summary>Default horizontal dimension of stand-alone player window.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenHeight">
      <summary>Default vertical dimension of web player window.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenWidth">
      <summary>Default horizontal dimension of web player window.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.displayResolutionDialog">
      <summary>Defines the behaviour of the Resolution Dialog on product launch.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableCrashReportAPI">
      <summary>
        <para>Enables CrashReport API.</para>
        <para>Enables a custom crash reporter to capture crashes. Crash logs will be available to scripts via CrashReport API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableInternalProfiler">
      <summary>
        <para>Enables internal profiler.</para>
        <para>Enables the internal profiler which collects performance data of the application and prints a report to the console. The report contains the number of milliseconds that it took for each Unity subsystem to execute on each frame. The data is averaged across 30 frames.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.forceSingleInstance">
      <summary>
        <para>Restrict standalone players to a single concurrent running instance.</para>
        <para>This detects at startup whether another instance of the same player is already running, and aborts with an error message if so.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.gpuSkinning">
      <summary>
        <para>Enable GPU skinning on capable platforms.</para>
        <para>DX11, OpenGL ES 3.0 and Xbox 360 can do mesh skinning on the GPU.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.graphicsJobs">
      <summary>
        <para>Enable graphics jobs (multi threaded rendering).</para>
        <para>This enables rendering code to be split and run in parallel on multiple cores on multi core machines.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iPhoneBundleIdentifier">
      <summary>The bundle identifier of the iPhone application.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keyaliasPass">
      <summary>
        <para>Password for the key used for signing an Android application.</para>
        <para>This is the password for signing an application with a particular key (known as [-keypass &lt;keypass&gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keystorePass">
      <summary>
        <para>Password used for interacting with the Android Keystore.</para>
        <para>This is the password for retrieving and updating the keys inside a particular keystore (known as [-storepass &lt;storepass&gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.logObjCUncaughtExceptions">
      <summary>
        <para>Are ObjC uncaught exceptions logged?</para>
        <para>Enables a custom Objective-C Uncaught Exception handler, which will print exception information to console.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.macFullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in macOS standalones.</para>
        <para>Set this to change how fullscreen mode is handled in macOS standalone games. See MacFullscreenMode for description on the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.MTRendering">
      <summary>Is multi-threaded rendering enabled?</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.muteOtherAudioSources">
      <summary>
        <para>Mute or allow audio from other applications to play in the background while the Unity application is running.</para>
        <para>A shared setting between iOS and Android platforms. If this is set to true, the Unity application silences audio from other applications. If this is set to false, audio from other applications continues to play in the background. The volume of the background audio depends on the platform. On iOS the volume stays the same, while on Android it is decreased. This is how audio from different applications has to be handled on Android. If your Unity application does not have any sound, you can disable Unity audio in the <see href="class-AudioManager" cref="Audio Manager" /> (menu: Edit &gt; Project Settings &gt; Audio), allowing audio from other applications on Android to play at the original volume.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.productName">
      <summary>
        <para>The name of your product.</para>
        <para>This will appear on the menu bar when your game is running and is used to locate the preferences file. <c>Custom player settings.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.protectGraphicsMemory">
      <summary>
        <para>Protect graphics memory.</para>
        <para>When enabled, graphics memory will be protected from external reading, if supported by the device and platform. This will ensure users can not take screenshots for instance. On Android, this requires a device that supports the EGL_PROTECTED_CONTENT_EXT extension.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resizableWindow">
      <summary>
        <para>Use resizable window in standalone player builds.</para>
        <para>By default standalone Windows, Mac and Linux builds use a non-resizable game window. Enabling this makes the window resizable.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resolutionDialogBanner">
      <summary>The image to display in the Resolution Dialog window.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.runInBackground">
      <summary>If enabled, your game will continue to run after lost focus.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.statusBarHidden">
      <summary>Should status bar be hidden. Shared between iOS &amp; Android platforms.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stereoRenderingPath">
      <summary>
        <para>Active stereo rendering path</para>
        <para>Specifies which path should Unity use for VR rendering..</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripEngineCode">
      <summary>
        <para>Remove unused Engine code from your build (IL2CPP-only).</para>
        <para>If this is enabled, unused modules and classes of the Unity Engine codebase will be removed in IL2CPP builds. This will result in smaller binary size. It is recommended to use this setting, however, you may want to disable it if you suspect this causes issues with your project. Note that byte code stripping of managed assemblies is always enabled for the IL2CPP scripting backend.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.strippingLevel">
      <summary>Managed code stripping level.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripUnusedMeshComponents">
      <summary>
        <para>Should unused <see cref="UnityEngine.Mesh" /> components be excluded from game build?</para>
        <para>When this setting is on, Mesh components (e.g. tangent vectors, vertex colors etc.) that are not in use will be removed. This is good for game data size and runtime performance. However, be aware of this flag if you're switching shaders on some objects at runtime. For example, if a mesh uses a simple Diffuse shader when building the game, Unity will remove tangent vectors since they are not needed. If you'd want to switch to a bumpmapped shader on this mesh at runtime, you will not get proper tangent data since it was removed!</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.use32BitDisplayBuffer">
      <summary>32-bit Display Buffer is used.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useAnimatedAutorotation">
      <summary>Let the OS autorotate the screen as the device orientation changes.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useMacAppStoreValidation">
      <summary>
        <para>Enable receipt validation for the Mac App Store.</para>
        <para>This enables receipt validation for the Mac App Store. If this is enabled, your game will only run when it contains a valid receipt from the Mac App Store. Use this when submitting games to Apple for publishing on the App Store. This prevents people from running the game on any computer then the one it was purchased on. Note that this feature does not implement any strong copy protection. In particular, any potential crack against one Unity game would work against any other Unity content. For this reason, it is recommended that you implement your own receipt validation code on top of this using Unity's plugin feature. However, since Apple requires plugin validation to initially happen before showing the screen setup dialog, you should still enable this check, or Apple might reject your submission.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.usePlayerLog">
      <summary>
        <para>Write a log file with debugging information.</para>
        <para>This is useful to find out what happened if there are problems with your game. When publishing games for Apple's Mac App Store, it is recommended to turn this off, because Apple may reject your submission otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.virtualRealitySplashScreen">
      <summary>
        <para>Virtual Reality specific splash screen.</para>
        <para>This is only utilized if Virtual Reality support is enabled. The image is displayed in front of the user while loading the first scene in a black room. Any size image can be supplied.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.virtualRealitySupported">
      <summary>
        <para>Enable virtual reality support.</para>
        <para>When enabled, the virtual reality module is used if possible. This causes a reload of graphics resources. Extra VR specific dependencies are included in platform builds which support VR.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.visibleInBackground">
      <summary>
        <para>On Windows, show the application in the background if Fullscreen Windowed mode is used.</para>
        <para>This setting is used with the Fullscreen Windowed mode. If this setting is false and you Alt-Tab out of the application, it will minimize. If this setting is true, the application will not minimize and remain visible behind other windows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadOrientation">
      <summary>Xbox 360 Kinect Head Orientation file deployment.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadPosition">
      <summary>Xbox 360 Kinect Head Position file deployment.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectResources">
      <summary>Xbox 360 Kinect resource file deployment.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableAvatar">
      <summary>Xbox 360 Avatars.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinect">
      <summary>Xbox 360 Kinect title flag - if false, the Kinect APIs are inactive.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinectAutoTracking">
      <summary>Xbox 360 Kinect automatic skeleton tracking.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableSpeech">
      <summary>Xbox 360 Kinect Enable Speech Engine.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxGenerateSpa">
      <summary>Xbox 360 auto-generation of _SPAConfig.cs.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxImageXexFilePath">
      <summary>Xbox 360 ImageXex override configuration file path.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpaFilePath">
      <summary>Xbox 360 SPA file path.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpeechDB">
      <summary>Xbox 360 Kinect Speech DB.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSplashScreen">
      <summary>Xbox 360 splash screen.</summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxTitleId">
      <summary>Xbox 360 title id.</summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Get graphics APIs to be used on a build platform.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one (see <see cref="UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs" />). However it is possible to change that to explicitly limit the graphics APIs used via <see cref="UnityEditor.PlayerSettings.SetGraphicsAPIs" />.</para>
      </summary>
      <param name="platform">Platform to get APIs for.</param>
      <returns>Array of graphics APIs.</returns>
      <seealso cref="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])" />
      <seealso cref="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)" />
      <seealso cref="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)" />
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconsForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns the list of assigned icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. Each texture in the returned array correspond to the corresponding entry in the list of icon sizes returned by GetIconSizesForTargetGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconSizesForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a list of icon sizes for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. Use this function to get the sizes to use for the specified platform, where each size specifies both the width and height in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup)">
      <summary>Get user-specified symbols for script compilation for the given build target group.</summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetStackTraceLogType(UnityEngine.LogType)">
      <summary>Get stack trace logging options.</summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Is a build platform using automatic graphics API choice?</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one. However it is possible to change that to explicitly limit the graphics APIs used, see <see cref="UnityEditor.PlayerSettings.SetGraphicsAPIs" />.</para>
      </summary>
      <param name="platform">Platform to get the flag for.</param>
      <returns>Should best available graphics API be used.</returns>
      <seealso cref="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)" />
      <seealso cref="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)" />
      <seealso cref="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])" />
    </member>
    <member name="M:UnityEditor.PlayerSettings.HasAspectRatio(UnityEditor.AspectRatio)">
      <summary>
        <para>Returns whether or not the specified aspect ratio is enabled.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetAspectRatio(UnityEditor.AspectRatio,System.Boolean)">
      <summary>
        <para>Enables the specified aspect ratio.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])">
      <summary>
        <para>Set graphics APIs to be used on a build platform.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one (see <see cref="UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs" />). However it is possible to change that to explicitly limit the graphics APIs used. The passed APIs will be tried in the order they are given, and first available one will be used.</para>
      </summary>
      <param name="platform">Platform to set APIs for.</param>
      <param name="apis">Array of graphics APIs.</param>
      <seealso cref="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)" />
      <seealso cref="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)" />
      <seealso cref="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)" />
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetIconsForTargetGroup(UnityEditor.BuildTargetGroup,UnityEngine.Texture2D[])">
      <summary>
        <para>Assign a list of icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. The list will only be assigned if it has the same length as the list of icon sizes returned by GetIconSizesForTargetGroup and if the specified platform is supported in this editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup,System.String)">
      <summary>Set user-specified symbols for script compilation for the given build target group.</summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetStackTraceLogType(UnityEngine.LogType,UnityEngine.StackTraceLogType)">
      <summary>Set stack trace logging options. Note: calling this function will implicitly call <see cref="UnityEngine.Application.SetStackTraceLogType" />.</summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Should a build platform use automatic graphics API choice.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one. However it is possible to change that to explicitly limit the graphics APIs used, see <see cref="UnityEditor.PlayerSettings.SetGraphicsAPIs" />.</para>
      </summary>
      <param name="platform">Platform to set the flag for.</param>
      <param name="automatic">Should best available graphics API be used?</param>
      <seealso cref="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)" />
      <seealso cref="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)" />
      <seealso cref="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])" />
    </member>
    <member name="P:UnityEditor.PluginImporter.isNativePlugin">
      <summary>Is plugin native or managed? Note: C++ libraries with CLR support are treated as native plugins, because Unity cannot load such libraries. You can still access them via P/Invoke.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.ClearSettings">
      <summary>Clear all plugin settings and set the compatability with Any Platform to true.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform">
      <summary>
        <para>Is plugin comptabile with any platform.</para>
        <para>When checking if plugin is compatible, Unity will first check <see cref="UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform" /> value, if it returns false - <see cref="UnityEditor.PluginImporter.GetCompatibleWithPlatform" /> will be used instead.</para>
      </summary>
      <seealso cref="M:UnityEditor.PluginImporter.SetCompatibleWithAnyPlatform(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithEditor">
      <summary>Is plugin compatible with editor.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(UnityEditor.BuildTarget)">
      <summary>Is plugin compatible with specified platform.</summary>
      <param name="platform">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(System.String)">
      <summary>Is plugin compatible with specified platform.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetEditorData(System.String)">
      <summary>Returns editor specific data for specified key.</summary>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeEditorFromAnyPlatform">
      <summary>Is Editor excluded when Any Platform is set to true.</summary>
      <seealso cref="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeFromAnyPlatform(System.String)">
      <summary>Is platform excluded when Any Platform set to true.</summary>
      <seealso cref="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeFromAnyPlatform(UnityEditor.BuildTarget)">
      <summary>Is platform excluded when Any Platform set to true.</summary>
      <param name="platform">Target platform.</param>
      <seealso cref="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.PluginImporter.GetIsOverridable">
      <summary>Identifies whether or not this plugin will be overridden if a plugin of the same name is placed in your project folder.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(UnityEditor.BuildTarget,System.String)">
      <summary>Get platform specific data.</summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(System.String,System.String)">
      <summary>Get platform specific data.</summary>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithAnyPlatform(System.Boolean)">
      <summary>
        <para>Set compatiblity with any platform.</para>
        <para>When checking if plugin is compatible, Unity will first check <see cref="UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform" /> value, if it returns false - <see cref="UnityEditor.PluginImporter.GetCompatibleWithPlatform" /> will be used instead.</para>
      </summary>
      <param name="enable">Is plugin compatible with any platform.</param>
      <seealso cref="M:UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform" />
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithEditor(System.Boolean)">
      <summary>Set compatiblity with any editor.</summary>
      <param name="enable">Is plugin compatible with editor.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(UnityEditor.BuildTarget,System.Boolean)">
      <summary>Set compatiblity with specified platform.</summary>
      <param name="platform">Target platform.</param>
      <param name="enable">Is plugin compatible with specified platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(System.String,System.Boolean)">
      <summary>Set compatiblity with specified platform.</summary>
      <param name="platformName">Target platform.</param>
      <param name="enable">Is plugin compatible with specified platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetEditorData(System.String,System.String)">
      <summary>Set editor specific data.</summary>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeEditorFromAnyPlatform(System.Boolean)">
      <summary>Exclude Editor from compatible platforms when Any Platform is set to true.</summary>
      <seealso cref="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)" />
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)">
      <summary>
        <para>Exclude platform from compatible platforms when Any Platform is set to true.</para>
        <para>Useful when you want to apply logic - "plugin is compatible with any platform except this platform". Note: <see cref="UnityEditor.PluginImporter.SetCompatibleWithPlatform" /> or <see cref="UnityEditor.PluginImporter.SetCompatibleWithEditor" /> will override this setting. You can also use <see cref="UnityEditor.PluginImporter.GetImporters" /> to check if your plugin is compatible or not compatbile with specific platform.</para>
      </summary>
      <param name="platformName">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Exclude platform from compatible platforms when Any Platform is set to true.</para>
        <para>Useful when you want to apply logic - "plugin is compatible with any platform except this platform". Note: <see cref="UnityEditor.PluginImporter.SetCompatibleWithPlatform" /> or <see cref="UnityEditor.PluginImporter.SetCompatibleWithEditor" /> will override this setting. You can also use <see cref="UnityEditor.PluginImporter.GetImporters" /> to check if your plugin is compatible or not compatbile with specific platform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(UnityEditor.BuildTarget,System.String,System.String)">
      <summary>Set platform specific data.</summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(System.String,System.String,System.String)">
      <summary>Set platform specific data.</summary>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.ShouldIncludeInBuild">
      <summary>Identifies whether or not this plugin should be included in the current build target.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetAllImporters">
      <summary>Returns all plugin importers for all platforms.</summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(UnityEditor.BuildTarget)">
      <summary>Returns all plugin importers for specfied platform.</summary>
      <param name="platform">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(System.String)">
      <summary>Returns all plugin importers for specfied platform.</summary>
      <param name="platformName">Name of the target platform.</param>
    </member>
    <member name="M:UnityEditor.PopupWindow.Show(UnityEngine.Rect,UnityEditor.PopupWindowContent)">
      <summary>Show a popup with the given PopupWindowContent.</summary>
      <param name="activatorRect">The rect of the button that opens the popup.</param>
      <param name="windowContent">The content to show in the popup window.</param>
      <seealso cref="T:UnityEditor.PopupWindow" />
    </member>
    <member name="P:UnityEditor.PopupWindowContent.editorWindow">
      <summary>The <see cref="UnityEditor.EditorWindow" /> that contains the popup content.</summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.GetWindowSize">
      <summary>The size of the popup window.</summary>
      <returns>The size of the Popup window.</returns>
      <seealso cref="T:UnityEditor.PopupWindow" />
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnClose">
      <summary>Callback when the popup window is closed.</summary>
      <seealso cref="T:UnityEditor.PopupWindow" />
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnGUI(UnityEngine.Rect)">
      <summary>Callback for drawing GUI controls for the popup window.</summary>
      <param name="rect">The rectangle to draw the GUI inside.</param>
      <seealso cref="T:UnityEditor.PopupWindow" />
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnOpen">
      <summary>Callback when the popup window is opened.</summary>
      <seealso cref="T:UnityEditor.PopupWindow" />
    </member>
    <member name="F:UnityEditor.PrefabUtility.prefabInstanceUpdated">
      <summary>Called after prefab instances in the scene have been updated.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ConnectGameObjectToPrefab(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>Connects the source prefab to the game object.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreateEmptyPrefab(System.String)">
      <summary>
        <para>Creates an empty prefab at given path.</para>
        <para>If a prefab at the path already exists it will be deleted and replaced with an empty prefab. Returns a reference to the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject,UnityEditor.ReplacePrefabOptions)">
      <summary>Creates a prefab from a game object hierarchy.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject)">
      <summary>Creates a prefab from a game object hierarchy.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.DisconnectPrefabInstance(UnityEngine.Object)">
      <summary>Disconnects the prefab instance from its parent prefab.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindPrefabRoot(UnityEngine.GameObject)">
      <summary>
        <para>Helper function to find the prefab root of an object (used for picking niceness).</para>
        <para>A prefab internally consists of a Prefab object and the list of objects used for the prefab. The Prefab object has a pointer to the root game object and if the prefab is an instance then it also contains a pointer to the asset it was created from and a list of modifications done to the instance. This checks if the object is part of a prefab, either instance or asset. If so it returns the root game object of the prefab.</para>
        <para>Checks if the object is part of a prefab, either instance or asset, if so it returns the root game object of the prefab</para>
      </summary>
      <param name="source">The object to check.</param>
      <returns>The prefab root.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Returns the topmost game object that has the same prefab parent as <c>target</c>.</para>
        <para>A prefab internally consists of a Prefab object and the list of objects used for the prefab. The Prefab object has a pointer to the root game object and if the prefab is an instance then it also contains a pointer to the asset it was created from and a list of modifications done to the instance. This only returns a valid result when a prefab instance object, or an object that has been disconnected from a prefab, is used. The function finds the transform associated with the input object. It will the walk up the ancestors of the transform tree as long as the transform was instantiated from the same prefab asset. Once it reaches the transform that matches the transform on the root game object of the prefab asset it will stop and returns the game object instance. This is similar to <see cref="UnityEditor.PrefabUtility.FindPrefabRoot" /> but it also works if the prefab instance has been disconnected. This is useful if you have a disconnected prefab instance object and you want to reconnect it to the prefab asset.</para>
        <para>This returns a valid result when a prefab instance object, or an object that has been disconnected from a prefab, is used. This function finds the transform associated with the input object. It will the walk up the ancestors of the transform tree as long as the transform was instantiated from the same prefab asset. Once it reaches the transform that matches the transform on the root game object of the prefab asset it will stop and returns the game object instance. This is similar to FindPrefabRoot but it also works if the prefab instance has been disconnected. This is useful if you have a disconnected prefab instance object and you want to reconnect it to the prefab asset.</para>
      </summary>
      <returns>The GameObject at the root of the prefab.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindValidUploadPrefabInstanceRoot(UnityEngine.GameObject)">
      <summary>
        <para>Returns root game object of the prefab instance if that root prefab instance is a parent of the prefab.</para>
        <para>A prefab internally consists of a Prefab object and the list of objects used for the prefab. The Prefab object has a pointer to the root game object and if the prefab is an instance then it also contains a pointer to the asset it was created from and a list of modifications done to the instance. This works in the same way as <see cref="UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab" /> but it will return the root game object of the prefab asset. This is useful if you have a disconnected prefab instance object and you want to know the root game object of the prefab asset which it used to be connected to.</para>
      </summary>
      <param name="target">GameObject to process.</param>
      <returns>Return the root game object of the prefab asset.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabObject(UnityEngine.Object)">
      <summary>
        <para>Retrieves the enclosing prefab for any object contained within.</para>
        <para>A prefab internally consists of a Prefab object and the list of objects used for the prefab. The Prefab object has a pointer to the root game object and if the prefab is an instance then it also contains a pointer to the asset it was created from and a list of modifications done to the instance. This checks if the object is part of a prefab, either instance or asset. If so it returns the Prefab object.</para>
      </summary>
      <param name="targetObject">An object contained within a prefab object.</param>
      <returns>The prefab the object is contained in.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabParent(UnityEngine.Object)">
      <summary>
        <para>Returns the parent asset object of <c>source</c>, or null if it can't be found.</para>
        <para>Use this function to get a prefab asset object the <c>source</c> was instantiated from. This also returns the prefab parent if the prefab has become disconnected, which can then be used to reconnect the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabType(UnityEngine.Object)">
      <summary>Given an object, returns its prefab type (None, if it's not a prefab).</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPropertyModifications(UnityEngine.Object)">
      <summary>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiateAttachedAsset(UnityEngine.Object)">
      <summary>Instantiate an asset that is referenced by a prefab and use it on the prefab instance.</summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object)">
      <summary>
        <para>Instantiates the given prefab in a given scene.</para>
        <para>This is similar to Instantiate but creates a prefab connection to the prefab. If a scene handle is not given the prefab is instantiated in the active scene.</para>
      </summary>
      <param name="target">Prefab asset to instantiate.</param>
      <returns>The GameObject at the root of the prefab.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Instantiates the given prefab in a given scene.</para>
        <para>This is similar to Instantiate but creates a prefab connection to the prefab. If a scene handle is not given the prefab is instantiated in the active scene.</para>
      </summary>
      <param name="target">Prefab asset to instantiate.</param>
      <param name="destinationScene">Scene to instantiate the prefab in.</param>
      <returns>The GameObject at the root of the prefab.</returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.MergeAllPrefabInstances(UnityEngine.Object)">
      <summary>
        <para>Force re-merging all prefab instances of this prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Connects the game object to the prefab that it was last connected to.</para>
        <para>Returns true if the game object has never been a prefab instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RecordPrefabInstancePropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Force record property modifications by comparing against the parent prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
      <param name="targetObject">Object to process</param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created. If <c>connectToPrefab</c> is enabled <c>go</c> will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created. If <c>connectToPrefab</c> is enabled <c>go</c> will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ResetToPrefabState(UnityEngine.Object)">
      <summary>
        <para>Resets the properties of the component or game object to the parent prefab state.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RevertPrefabInstance(UnityEngine.GameObject)">
      <summary>
        <para>Resets the properties of all objects in the prefab, including child game objects and components that were added to the prefab instance.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.SetPropertyModifications(UnityEngine.Object,UnityEditor.PropertyModification[])">
      <summary>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.attribute">
      <summary>The <see cref="UnityEngine.PropertyAttribute" /> for the property. Not applicable for custom class drawers. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.fieldInfo">
      <summary>
        <para>The reflection FieldInfo for the member this property represents. (Read Only)</para>
        <para>For advanced uses, this allows you to get information about the member the property represents using reflection, such as the type of the property and which attributes it might have. Most PropertyDrawers will not need to make use of the FieldInfo.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="F:UnityEditor.PropertyModification.objectReference">
      <summary>The value being applied when it is a object reference (which can not be represented as a string).</summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.propertyPath">
      <summary>Property path of the property being modified (Matches as SerializedProperty.propertyPath).</summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.target">
      <summary>Object that will be modified.</summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.value">
      <summary>The value being applied.</summary>
    </member>
    <member name="M:UnityEditor.SceneAsset.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.createButtonName">
      <summary>Allows you to set the text shown on the create button of the wizard.</summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.errorString">
      <summary>
        <para>Allows you to set the error text of the wizard.</para>
        <para>
          <c>Error String on a ScriptableWizard window.</c>
        </para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.helpString">
      <summary>
        <para>Allows you to set the help text of the wizard.</para>
        <para>
          <c>Help string on a ScriptableWizard window.</c>
        </para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.isValid">
      <summary>
        <para>Allows you to enable and disable the wizard create button, so that the user can not click it.</para>
        <para>
          <c>The finish button gets disabled until the user sets the number to 5.</c>
        </para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.otherButtonName">
      <summary>Allows you to set the text shown on the optional other button of the wizard. Leave this parameter out to leave the button out.</summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DrawWizardGUI">
      <summary>
        <para>Will be called for drawing contents when the ScriptableWizard needs to update its GUI.</para>
        <para>Derived class may override this function to provide customized behaviour for GUI drawing. The default behaviour is to draw property fields for all public properties on the wizard, arranged vertically.</para>
      </summary>
      <returns>Returns true if any property has been modified.</returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="UnityEditor.ScriptableWizard.OnWizardCreate" /> function will be called. DisplayWizard will only show one wizard for every wizard class. <c>Simple Wizard window that copies a GameObject several times.</c></para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <returns>The wizard.</returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="UnityEditor.ScriptableWizard.OnWizardCreate" /> function will be called. DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <returns>The wizard.</returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="UnityEditor.ScriptableWizard.OnWizardCreate" /> function will be called. DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>The wizard.</returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="UnityEditor.ScriptableWizard.OnWizardCreate" /> function will be called. DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="klass">The class implementing the wizard. It has to derive from <see cref="UnityEditor.ScriptableWizard" />.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>The wizard.</returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.OnWizardCreate">
      <summary>
        <para>This is called when the user clicks on the Create button.</para>
        <para>Here you perform any final creation/modification actions. After OnCreateWizard is called, the wizard is automatically closed. <c>ScriptableWizard window for selecting GameObjects of a certain "type".</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.OnWizardOtherButton">
      <summary>
        <para>Allows you to provide an action when the user clicks on the other button.</para>
        <para>This is the place where you can implement all the stuff that will be done if the user clicks the secondary option when calling DisplayWizard. <c>ScriptableWizard with an "Other" button, in this case named "Info".</c></para>
      </summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.OnWizardUpdate">
      <summary>
        <para>This is called when the wizard is opened or whenever the user changes something in the wizard.</para>
        <para>This allows you to set the <see cref="UnityEditor.ScriptableWizard.helpString" />, <see cref="UnityEditor.ScriptableWizard.errorString" /> and enable/disable the Create button via <see cref="UnityEditor.ScriptableWizard.isValid" />. Also it lets you change labels (for timers i.e.) or buttons when the wizard is being shown <c>ScriptableWizard window for cloning a Game Object.</c></para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeGameObject">
      <summary>
        <para>Returns the active game object. (The one shown in the inspector).</para>
        <para>It will also return game objects that might be prefabs or non-modifiable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeInstanceID">
      <summary>
        <para>Returns the instanceID of the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeObject">
      <summary>
        <para>Returns the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeTransform">
      <summary>
        <para>Returns the active transform. (The one shown in the inspector).</para>
        <para>This will never return prefabs or non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.assetGUIDs">
      <summary>
        <para>Returns the guids of the selected assets.</para>
        <para>When working with asset selection it is recommended to use this property since it also handles if folders were selected in the first column in the Project Browser (in Two Column Mode).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.gameObjects">
      <summary>
        <para>Returns the actual game object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.transforms instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.instanceIDs">
      <summary>
        <para>The actual unfiltered selection from the Scene returned as instance ids instead of <see cref="UnityEditor.Selection.objects" />.</para>
        <para>All objects will be returned, including assets in projects. You can also assign objects to the selection. The instance ID of an object is always guaranteed to be unique.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.objects">
      <summary>
        <para>The actual unfiltered selection from the Scene.</para>
        <para>All objects will be returned, including assets in projects. You can also assign objects to the selection. <c>Scriptable Wizard that lets you select GameObjects by their tag.</c></para>
      </summary>
    </member>
    <member name="F:UnityEditor.Selection.selectionChanged">
      <summary>Delegate callback triggered when currently active/selected item has changed.</summary>
    </member>
    <member name="P:UnityEditor.Selection.transforms">
      <summary>
        <para>Returns the top level selection, excluding prefabs.</para>
        <para>This is the most common selection type when working with scene objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(System.Int32)">
      <summary>Returns whether an object is contained in the current selection.</summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(UnityEngine.Object)">
      <summary>Returns whether an object is contained in the current selection.</summary>
    </member>
    <member name="M:UnityEditor.Selection.GetFiltered(System.Type,UnityEditor.SelectionMode)">
      <summary>
        <para>Returns the current selection filtered by type and mode.</para>
        <para>For a selected GameObject that has multiple Components of <c>type</c>, only the first one will be included in the results. if <c>type</c> is a subclass of <see cref="UnityEngine.Component" /> or <see cref="UnityEngine.GameObject" /> the full SelectionMode is supported. if <c>type</c> does not subclass from <see cref="UnityEngine.Component" /> or <see cref="UnityEngine.GameObject" /> (eg. <see cref="UnityEngine.Mesh" /> or <see cref="UnityEngine.ScriptableObject" />) only SelectionMode.ExcludePrefab and SelectionMode.Editable are supported.</para>
      </summary>
      <param name="type">Only objects of this type will be retrieved.</param>
      <param name="mode">Further options to refine the selection.</param>
    </member>
    <member name="M:UnityEditor.Selection.GetTransforms(UnityEditor.SelectionMode)">
      <summary>Allows for fine grained control of the selection type using the <see cref="UnityEditor.SelectionMode" /> bitmask.</summary>
      <param name="mode">Options for refining the selection.</param>
    </member>
    <member name="P:UnityEditor.SerializedObject.isEditingMultipleObjects">
      <summary>Does the serialized object represents multiple objects due to multi-object editing? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.maxArraySizeForMultiEditing">
      <summary>
        <para>Defines the maximum size beyond which arrays cannot be edited when multiple objects are selected.</para>
        <para>This value controls the maximum size of arrays that can be edited during multiple-object-editing in the inspector. When you have GameObjects selected that share arrays larger than this value, the inspector will show an empty array. Prior to Unity 5.5, this value was hard-coded and could not be changed. A default value of 64 has been chosen as a good tradeoff between performance and utility. If your serialized object typically has arrays larger than this, you can set this value to a higher number to allow multi-editing on those arrays. Please be aware that setting too high a value might affect inspector performance when editing large arrays or a large number of objects</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObject">
      <summary>
        <para>The inspected object (Read Only).</para>
        <para>When multi-object editing, the targetObject property will just return the first of the edited objects. To get all the objects, use the <see cref="UnityEditor.SerializedObject.targetObjects" /> property instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObjects">
      <summary>
        <para>The inspected objects (Read Only).</para>
        <para>The serialized object can represent multiple objects simultaneously when multi-object editing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object)">
      <summary>Create SerializedObject for inspected object.</summary>
      <seealso cref="M:UnityEditor.SerializedObject.Update" />
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object[])">
      <summary>Create SerializedObject for inspected object.</summary>
      <seealso cref="M:UnityEditor.SerializedObject.Update" />
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedProperties">
      <summary>Apply property modifications.</summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedPropertiesWithoutUndo">
      <summary>Applies property modifications without registering an undo operation.</summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.CopyFromSerializedProperty(UnityEditor.SerializedProperty)">
      <summary>Copies a value from a SerializedProperty to the same serialized property on this serialized object.</summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.FindProperty(System.String)">
      <summary>
        <para>Find serialized property by name.</para>
        <para>You can use this to find a specific property in the target object.</para>
      </summary>
      <seealso cref="M:UnityEditor.SerializedObject.GetIterator" />
      <seealso cref="T:UnityEditor.SerializedProperty" />
    </member>
    <member name="M:UnityEditor.SerializedObject.GetIterator">
      <summary>
        <para>Get the first serialized property.</para>
        <para>You can use this to go over all properties of the target object.</para>
      </summary>
      <seealso cref="M:UnityEditor.SerializedObject.FindProperty(System.String)" />
      <seealso cref="T:UnityEditor.SerializedProperty" />
    </member>
    <member name="M:UnityEditor.SerializedObject.SetIsDifferentCacheDirty">
      <summary>
        <para>Update <c>hasMultipleDifferentValues</c> cache on the next /Update()/ call.</para>
        <para>Normally, you should not need to call this, as the SerializedProperty setters take care of this. However, when you change an object bypassing the SerializedProperty class, you will need to manually call this to force the difference cache to be updated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.Update">
      <summary>Update serialized object's representation.</summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.UpdateIfDirtyOrScript">
      <summary>
        <para>Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.</para>
        <para>In which case it is not safe to assume that SetDirty has been called.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.animationCurveValue">
      <summary>Value of a animation curve property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.arraySize">
      <summary>The number of elements in the array. If the SerializedObject contains multiple objects it will return the smallest number of elements. So it is always possible to iterate through the SerializedObject and only get properties found in all objects.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boolValue">
      <summary>Value of a boolean property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boundsValue">
      <summary>Value of bounds property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.colorValue">
      <summary>Value of a color property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.depth">
      <summary>Nesting depth of the property. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.displayName">
      <summary>Nice display name of the property. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.doubleValue">
      <summary>
        <para>Value of a float property as a double.</para>
        <para>Contains a valid value when <see cref="UnityEditor.SerializedProperty.propertyType" /> is <see cref="UnityEditor.SerializedPropertyType.Float" />. For accessing float and double properties. When assigning a float to <see cref="UnityEditor.SerializedProperty.doubleValue" />, the value is clamped to the range of a float.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.editable">
      <summary>Is this property editable? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumDisplayNames">
      <summary>
        <para>Display-friendly names of enumeration of an enum property.</para>
        <para>Similar to enumNames, but formatted with spaces and capitalization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumNames">
      <summary>Names of enumeration of an enum property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumValueIndex">
      <summary>Enum index of an enum property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.floatValue">
      <summary>
        <para>Value of a float property.</para>
        <para>Contains a valid value when <see cref="UnityEditor.SerializedProperty.propertyType" /> is <see cref="UnityEditor.SerializedPropertyType.Float" />. For accessing float properties. If you are accessing double properties use <see cref="UnityEditor.SerializedProperty.doubleValue" /> instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasChildren">
      <summary>Does it have child properties? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasMultipleDifferentValues">
      <summary>Does this property represent multiple different values due to multi-object editing? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasVisibleChildren">
      <summary>Does it have visible child properties? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.intValue">
      <summary>
        <para>Value of an integer property.</para>
        <para>Contains a valid value when <see cref="UnityEditor.SerializedProperty.propertyType" /> is <see cref="UnityEditor.SerializedPropertyType.Integer" />. For accessing sbyte, byte, short, ushort, int and uint properties. If you are accessing long or ulong properties use <see cref="UnityEditor.SerializedProperty.longValue" /> instead. When assigning a value to <see cref="UnityEditor.SerializedProperty.intValue" />, the value is clamped in the range of the property's declared type. For example, a property that is declared as a byte is clamped between 0 and 255.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isArray">
      <summary>Is this property an array? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isExpanded">
      <summary>Is this property expanded in the inspector?</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isInstantiatedPrefab">
      <summary>Is property part of a prefab instance? (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.longValue">
      <summary>
        <para>Value of a integer property as a long.</para>
        <para>Contains a valid value when <see cref="UnityEditor.SerializedProperty.propertyType" /> is <see cref="UnityEditor.SerializedPropertyType.Integer" />. For accessing sbyte, byte, short, ushort, int, uint, long and ulong properties. When assigning a value to <see cref="UnityEditor.SerializedProperty.intValue" />, the value is clamped in the range of the property's declared type. For example, a property that is declared as a byte is clamped between 0 and 255.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.name">
      <summary>Name of the property. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.objectReferenceValue">
      <summary>Value of an object reference property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.prefabOverride">
      <summary>Is property's value different from the prefab it belongs to?</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyPath">
      <summary>Full path of the property. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyType">
      <summary>
        <para>Type of this property (Read Only).</para>
        <para>Property type determines which of the "value" variable accessors are valid. For example, only <see cref="UnityEditor.SerializedProperty.boolValue" /> is valid for <see cref="UnityEditor.SerializedPropertyType.Boolean" /> Both <see cref="UnityEditor.SerializedProperty.intValue" /> and <see cref="UnityEditor.SerializedProperty.longValue" /> are valid for <see cref="UnityEditor.SerializedPropertyType.Integer" />. Both <see cref="UnityEditor.SerializedProperty.floatValue" /> and <see cref="UnityEditor.SerializedProperty.doubleValue" /> are valid for <see cref="UnityEditor.SerializedPropertyType.Float" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.quaternionValue">
      <summary>Value of a quaternion property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.rectValue">
      <summary>Value of a rectangle property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.serializedObject">
      <summary>
        <see cref="UnityEditor.SerializedObject" /> this property belongs to (Read Only).</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.stringValue">
      <summary>Value of a string property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.tooltip">
      <summary>Tooltip of the property. (Read Only)</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.type">
      <summary>
        <para>Type name of the property. (Read Only)</para>
        <para>Returns C# type name of the property for all <see cref="UnityEditor.SerializedPropertyType" /> values, except for <see cref="UnityEditor.SerializedPropertyType.ObjectReference" /> and other internal values of SerializedPropertyType, where the internal serialization type name is returned.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector2Value">
      <summary>Value of a 2D vector property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector3Value">
      <summary>Value of a 3D vector property.</summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector4Value">
      <summary>Value of a 4D vector property.</summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.ClearArray">
      <summary>Remove all elements from the array.</summary>
      <seealso cref="P:UnityEditor.SerializedProperty.isArray" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.Copy">
      <summary>
        <para>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</para>
        <para>Note that if you keep a reference to an array property and that array is subsequently resized then the stored reference is no longer reliable and should not be used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountInProperty">
      <summary>
        <para>Count visible children of this property, including this property itself.</para>
        <para>This is useful for allocating height for drawing this property including its children. Note that calling the method will move the property forward, so if this is not the desired behavior make a copy of the property before calling the method using <see cref="UnityEditor.SerializedProperty.Copy" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountRemaining">
      <summary>
        <para>Count remaining visible properties.</para>
        <para>This is useful for allocating height for drawing this property and all the following ones. Note that calling this method will move the property forward to the end of the <see cref="UnityEditor.SerializedObject" />. If this is not the desired behavior either use <see cref="UnityEditor.SerializedProperty.Copy" /> to make a copy of the current property before calling this method or <see cref="UnityEditor.SerializedProperty.Reset" /> to reset the property after calling this method.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)">
      <summary>Delete the element at the specified index in the array.</summary>
      <seealso cref="P:UnityEditor.SerializedProperty.isArray" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteCommand">
      <summary>
        <para>Deletes the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DuplicateCommand">
      <summary>
        <para>Duplicates the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.FindPropertyRelative(System.String)">
      <summary>Retrieves the SerializedProperty at a relative path to the current property.</summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetArrayElementAtIndex(System.Int32)">
      <summary>Returns the element at the specified index in the array.</summary>
      <seealso cref="P:UnityEditor.SerializedProperty.isArray" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty(System.Boolean)">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property. The end property can be used to iterate over all children of a property by using <see cref="UnityEditor.SerializedProperty.EqualContents" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property. The end property can be used to iterate over all children of a property by using <see cref="UnityEditor.SerializedProperty.EqualContents" />.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEnumerator">
      <summary>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.InsertArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Insert an empty element at the specified index in the array.</para>
        <para>The value of the inserted element is undefined and should be explicitly set after calling this function.</para>
      </summary>
      <seealso cref="P:UnityEditor.SerializedProperty.isArray" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.MoveArrayElement(System.Int32,System.Int32)">
      <summary>
        <para>Move an array element from srcIndex to dstIndex.</para>
        <para>The SerializedProperty must be pointed to an array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Next(System.Boolean)">
      <summary>Move to next property.</summary>
      <seealso cref="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)" />
      <seealso cref="M:UnityEditor.SerializedProperty.Reset" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)">
      <summary>Move to next visible property.</summary>
      <seealso cref="M:UnityEditor.SerializedProperty.Next(System.Boolean)" />
      <seealso cref="M:UnityEditor.SerializedProperty.Reset" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.Reset">
      <summary>Move to first property of the object.</summary>
      <seealso cref="M:UnityEditor.SerializedProperty.Next(System.Boolean)" />
      <seealso cref="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)" />
    </member>
    <member name="M:UnityEditor.SerializedProperty.EqualContents(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
      <summary>See if contained serialized properties are equal.</summary>
    </member>
    <member name="M:UnityEditor.ShaderGUI.AssignNewShaderToMaterial(UnityEngine.Material,UnityEngine.Shader,UnityEngine.Shader)">
      <summary>
        <para>This method is called when a new shader has been selected for a Material.</para>
        <para>Can be used for setting up the new shader based on state from the previous shader. Ensure to call <c>base.AssignNewShaderToMaterial</c> to actually set <c>material.shader</c>.</para>
      </summary>
      <param name="material">The material the newShader should be assigned to.</param>
      <param name="oldShader">Previous shader.</param>
      <param name="newShader">New shader to assign to the material.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnGUI(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty[])">
      <summary>To define a custom shader GUI use the methods of materialEditor to render controls for the properties array.</summary>
      <param name="materialEditor">The MaterialEditor that are calling this OnGUI (the 'owner').</param>
      <param name="properties">Material properties of the current selected shader.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewGUI(UnityEditor.MaterialEditor,UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Override for extending the rendering of the Preview area or completly replace the preview (by not calling base.OnMaterialPreviewGUI).</summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
      <param name="r">Preview rect.</param>
      <param name="background">Style for the background.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewSettingsGUI(UnityEditor.MaterialEditor)">
      <summary>Override for extending the functionality of the toolbar of the preview area or completly replace the toolbar by not calling base.OnMaterialPreviewSettingsGUI.</summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.FindProperty(System.String,UnityEditor.MaterialProperty[])">
      <summary>
        <para>Find shader properties.</para>
        <para>Utility method for finding a MaterialProperty by name.</para>
      </summary>
      <param name="propertyName">Name of the material property.</param>
      <param name="properties">The array of available properties.</param>
      <returns>The material property found, otherwise null.</returns>
    </member>
    <member name="M:UnityEditor.ShaderGUI.FindProperty(System.String,UnityEditor.MaterialProperty[],System.Boolean)">
      <summary>
        <para>Find shader properties.</para>
        <para>Utility method for finding a MaterialProperty by name.</para>
      </summary>
      <param name="propertyName">Name of the material property.</param>
      <param name="properties">The array of available properties.</param>
      <param name="propertyIsMandatory">If true then this method will throw an exception if a property with propertyName was not found.</param>
      <returns>The material property found, otherwise null.</returns>
    </member>
    <member name="P:UnityEditor.ShaderUtil.hardwareSupportsRectRenderTexture">
      <summary>Does the current hardware support render textues.</summary>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)">
      <summary>Get the number of properties in Shader s.</summary>
      <param name="s">The shader to check against.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyDescription(UnityEngine.Shader,System.Int32)">
      <summary>Get the description of the shader propery at index propertyIdx of Shader s.</summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyName(UnityEngine.Shader,System.Int32)">
      <summary>Get the name of the shader propery at index propertyIdx of Shader s.</summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyType(UnityEngine.Shader,System.Int32)">
      <summary>Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.</summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetRangeLimits(UnityEngine.Shader,System.Int32,System.Int32)">
      <summary>Get Limits for a range property at index propertyIdx of Shader s.</summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
      <param name="defminmax">Which value to get: 0 = default, 1 = min, 2 = max.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetTexDim(UnityEngine.Shader,System.Int32)">
      <summary>Gets texture dimension of a shader property.</summary>
      <param name="s">The shader to get the property from.</param>
      <param name="propertyIdx">The property index to use.</param>
      <returns>Texture dimension.</returns>
      <seealso cref="T:UnityEngine.Rendering.TextureDimension" />
      <seealso cref="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)" />
    </member>
    <member name="M:UnityEditor.ShaderUtil.IsShaderPropertyHidden(UnityEngine.Shader,System.Int32)">
      <summary>Is the shader propery at index propertyIdx of Shader s hidden?</summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.aspectRatio">
      <summary>Aspect ratio of the camera.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.fieldOfView">
      <summary>Field of view of the camera.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.isPerspective">
      <summary>Indicate if the camera is using a perspective or orthogonal projection.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.lookAt">
      <summary>The position the camera is looking at.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.orthoSize">
      <summary>The orthogonal projection size of the camera. This value only make sense if SketchUpImportCamera.isPerspective is false.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.position">
      <summary>The position of the camera.</summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.up">
      <summary>Up vector of the camera.</summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.latitude">
      <summary>Retrieves the latitude Geo Coordinate imported from the SketchUp file.</summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.longitude">
      <summary>Retrieves the longitude Geo Coordinate imported from the SketchUp file.</summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.northCorrection">
      <summary>Retrieves the north correction value imported from the SketchUp file.</summary>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetDefaultCamera">
      <summary>
        <para>The default camera or the camera of the active scene which the SketchUp file was saved with.</para>
        <para>The following is an example of extracting the default camera and logging if the camera is a perspective camera stored in <see cref="UnityEditor.SketchUpImportCamera" />.</para>
      </summary>
      <returns>The default camera.</returns>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetScenes">
      <summary>
        <para>The method returns an array of SketchUpImportScene which represents SketchUp scenes.</para>
        <para>
          <see cref="UnityEditor.SketchUpImportScene" /> is the structure to represent the scene that was extracted from the SketchUp file.</para>
        <para>The above example takes a GameObject that is imported from a SketchUp file and prints the name of the scenes in the SketchUp file.</para>
      </summary>
      <returns>Array of scenes extracted from a SketchUp file.</returns>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.camera">
      <summary>
        <para>The camera data of the SketchUp scene.</para>
        <para>This is the camera view data that was extracted from the SketchUp scene of the file. See <see cref="UnityEditor.SketchUpImportCamera" /> and <see cref="UnityEditor.SketchUpImporter.GetScenes" />.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.name">
      <summary>
        <para>The name of the SketchUp scene.</para>
        <para>This is the name of the SketchUp scene that was extracted from the SketchUp file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpeedTreeImporter.windQualityNames">
      <summary>Gets an array of name strings for wind quality value.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.alphaTestRef">
      <summary>Gets and sets a default alpha test reference values.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.animateCrossFading">
      <summary>Indicates if the cross-fade LOD transition, applied to the last mesh LOD and the billboard, should be animated.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.bestWindQuality">
      <summary>Returns the best-possible wind quality on this asset (configured in SpeedTree modeler).</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.billboardTransitionCrossFadeWidth">
      <summary>Proportion of the last 3D mesh LOD region width which is used for cross-fading to billboard tree.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.castShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow casting for each LOD.</para>
        <para>Billboard LOD (if present it is always the last LOD) will ignore the value and always returns false. Therefore when being set, the array passed in can be one element shorter than the total LODs on the tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableBump">
      <summary>Gets and sets an array of booleans to enable normal mapping for each LOD.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableHue">
      <summary>Gets and sets an array of booleans to enable Hue variation effect for each LOD.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableSmoothLODTransition">
      <summary>Enables smooth LOD transitions.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.fadeOutWidth">
      <summary>Proportion of the billboard LOD region width which is used for fading out the billboard.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasBillboard">
      <summary>Tells if there is a billboard LOD.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasImported">
      <summary>Tells if the SPM file has been previously imported.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hueVariation">
      <summary>Gets and sets a default Hue variation color and amount (in alpha).</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.LODHeights">
      <summary>Gets and sets an array of floats of each LOD's screen height value.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.mainColor">
      <summary>Gets and sets a default main color.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.materialFolderPath">
      <summary>Returns the folder path where generated materials will be placed in.</summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.receiveShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow receiving for each LOD.</para>
        <para>Billboard LOD (if present it is always the last LOD) will ignore the value and always returns false. Therefore when being set, the array passed in can be one element shorter than the total LODs on the tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.reflectionProbeUsages">
      <summary>
        <para>Gets and sets an array of Reflection Probe usages for each LOD.</para>
        <para>Enabling reflection probes for billboard LOD may break batching and lead to performance penalty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.scaleFactor">
      <summary>
        <para>How much to scale the tree model compared to what is in the .spm file.</para>
        <para>The default value of scaleFactor is 0.3048, the conversion ratio from feet to meters. By default, 1 unit in SpeedTree Modeler is 1 foot, while the most conventional measurement in Unity is 1 unit = 1 meter. Therefore we apply a default scaling at import time so that the size of the imported model matches the source model.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.useLightProbes">
      <summary>
        <para>Gets and sets an array of booleans to enable Light Probe lighting for each LOD.</para>
        <para>Specify true for billboard LOD may break batching and lead to performance penalty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.windQualities">
      <summary>Gets and sets an array of integers of the wind qualities on each LOD. Values will be clampped by BestWindQuality internally.</summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.#ctor">
      <summary>Construct a new SpeedTreeImporter object.</summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.GenerateMaterials">
      <summary>Generates all necessary materials under materialFolderPath. If Version Control is enabled please first check out the folder.</summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.alignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows: Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.border">
      <summary>
        <para>Edge border size for a sprite (in pixels).</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.name">
      <summary>Name of the Sprite.</summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.pivot">
      <summary>
        <para>The pivot point of the Sprite, relative to its bounding rectangle.</para>
        <para>The pivot point is usually specified in (x, y) values within a range of (0-1). For example: The upper left of the rectangle is (0,0); the bottom right of the rectangle is (1,1), and the center of the rectangle is (0.5,0.5). The pivot point can also be placed outside the bounding rectangle. Do this by using values outside the (0-1) range. For example: A position central but far above the bounding rectangle is (0.5,-2). A position in line with the bottom of the bounding rectangle and to the far right outside the bounding rectangle is (3,1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.rect">
      <summary>Bounding rectangle of the sprite's graphic within the atlas image.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.doesSceneHaveManualPortals">
      <summary>Does the scene contain any occlusion portals that were added manually rather than automatically?</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.isRunning">
      <summary>Used to check if asynchronous generation of static occlusion culling data is still running.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.umbraDataSize">
      <summary>Returns the size in bytes that the PVS data is currently taking up in this scene on disk.</summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Cancel">
      <summary>Used to cancel asynchronous generation of static occlusion culling data.</summary>
      <seealso cref="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground" />
      <seealso cref="P:UnityEditor.StaticOcclusionCulling.isRunning" />
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Clear">
      <summary>Clears the PVS of the opened scene.</summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
      <summary>
        <para>Used to compute static occlusion culling data asynchronously.</para>
        <para>The memory limit (specified in bytes) is a hint to the PVS baking system about the likely memory requirements.</para>
      </summary>
      <seealso cref="M:UnityEditor.StaticOcclusionCulling.Cancel" />
      <seealso cref="P:UnityEditor.StaticOcclusionCulling.isRunning" />
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showGeometryCulling">
      <summary>If set to true, culling of geometry is enabled.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showOcclusionCulling">
      <summary>If set to true, visualization of target volumes is enabled.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPortals">
      <summary>If set to true, visualization of portals is enabled.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPreVisualization">
      <summary>If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showViewVolumes">
      <summary>If set to true, visualization of view volumes is enabled.</summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showVisibilityLines">
      <summary>If set to true, visualization of portals is enabled.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.CloneMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Clone an existing ProceduralMaterial instance.</para>
        <para>NOTE: This requires a re-import to actually create the new instance !</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.DestroyMaterial(UnityEngine.ProceduralMaterial)">
      <summary>Destroy an existing ProceduralMaterial instance.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ExportBitmaps(UnityEngine.ProceduralMaterial,System.String,System.Boolean)">
      <summary>
        <para>Export the bitmaps generated by a ProceduralMaterial as TGA files.</para>
        <para>When alphaRemap is false, the ProceduralTextures are saved with their original alpha channel, as they are setup in the SBSAR asset. When alphaRemap is true, the ProceduralTextures are saved with their alpha channel remapped according to the alpha channel selection dropdowns. For instance, the smoothness output is often shuffled into the metallic (or specular) output's alpha channel to meet the standard shader's expectations. In that particular case, setting alphaRemap to <c>true</c> will export a metallic (or specular) output with an alpha channel replaced with the smoothness values.</para>
      </summary>
      <param name="material">The ProceduralMaterial whose output textures will be saved.</param>
      <param name="exportPath">Path to a folder where the output bitmaps will be saved. The folder will be created if it doesn't already exist.</param>
      <param name="alphaRemap">Indicates whether alpha channel remapping should be performed.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ExportPreset(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Export a XML preset string with the value of all parameters of a given ProceduralMaterial to the specified folder.</para>
        <para>The preset file will be named after the ProceduralMaterial's name, with a .sbsprs extension. These files can be used in the Substance Player.</para>
      </summary>
      <param name="material">The ProceduralMaterial whose preset string will be saved.</param>
      <param name="exportPath">Path to a folder where the preset file will be saved. The folder will be created if it doesn't already exist.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetAnimationUpdateRate(UnityEngine.ProceduralMaterial)">
      <summary>Get the ProceduralMaterial animation update rate in millisecond.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateAllOutputs(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Check if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs. If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateMipMaps(UnityEngine.ProceduralMaterial)">
      <summary>Return true if the mipmaps are generated for this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialCount">
      <summary>Get the number of ProceduralMaterial instances.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialOffset(UnityEngine.ProceduralMaterial)">
      <summary>Get the material offset, which is used for all the textures that are part of this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterials">
      <summary>Get an array with the ProceduralMaterial instances.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialScale(UnityEngine.ProceduralMaterial)">
      <summary>Get the material scale, which is used for all the textures that are part of this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPlatformTextureSettings(System.String,System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
        <para>Get the import settings for a given ProceduralMaterial for a given platform (width and height, RAW/Compressed format, loading behavior).</para>
        <para>Returns a default set of settings (512x512, compressed outputs, "Generate at load" behavior) if no settings are found for the input materialName or for the input platform.</para>
      </summary>
      <param name="materialName">The name of the ProceduralMaterial.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this ProceduralMaterial (output value).</param>
      <param name="maxTextureHeight">The maximum texture height for this ProceduralMaterial (output value).</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this ProceduralMaterial (output value).</param>
      <param name="loadBehavior">The load behavior for this ProceduralMaterial (output value). Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPrototypeNames">
      <summary>Get a list of the names of the ProceduralMaterial prototypes in the package.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String)">
      <summary>Get the alpha source of the given texture in the ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.InstantiateMaterial(System.String)">
      <summary>Instantiate a new ProceduralMaterial instance from a prototype.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.OnShaderModified(UnityEngine.ProceduralMaterial)">
      <summary>After modifying the shader of a ProceduralMaterial, call this function to apply the changes to the importer.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.RenameMaterial(UnityEngine.ProceduralMaterial,System.String)">
      <summary>Rename an existing ProceduralMaterial instance.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ResetMaterial(UnityEngine.ProceduralMaterial)">
      <summary>Reset the ProceduralMaterial to its default values.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetAnimationUpdateRate(UnityEngine.ProceduralMaterial,System.Int32)">
      <summary>Set the ProceduralMaterial animation update rate in millisecond.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateAllOutputs(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Specify if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs. If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateMipMaps(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>Force the generation of mipmaps for this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialOffset(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>Set the material offset, which is used for all the textures that are part of this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialScale(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>Set the material scale, which is used for all the textures that are part of this ProceduralMaterial.</summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetPlatformTextureSettings(UnityEngine.ProceduralMaterial,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set the import settings for the input ProceduralMaterial for the input platform.</para>
        <para>Width and height, RAW/Compressed format, and loading behavior included.</para>
      </summary>
      <param name="material">The name of the Procedural Material.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this Procedural Material.</param>
      <param name="maxTextureHeight">The maximum texture height for this Procedural Material.</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this Procedural Material.</param>
      <param name="loadBehavior">The load behavior for this Procedural Material. Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String,UnityEngine.ProceduralOutputType)">
      <summary>Set the alpha source of the given texture in the ProceduralMaterial.</summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStartTime">
      <summary>
        <para>Start time in second.</para>
        <para>This is eiter the time of the first key or the start time for this take as define in your DCC tools.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStopTime">
      <summary>
        <para>Stop time in second.</para>
        <para>This is eiter the time of the last key or the stop time for this take as define in your DCC tools.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.defaultClipName">
      <summary>
        <para>This is the default clip name for the clip generated for this take.</para>
        <para>Normally it should be the same than <see cref="UnityEditor.TakeInfo.name" /> unless you are using the @ convention. In this case the default clip name should be set to the same value than the name after @ convention. Example: For Dude@run.fbx the default clip name will be run.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.name">
      <summary>Take name as define from imported file.</summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.sampleRate">
      <summary>Sample rate of the take.</summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.startTime">
      <summary>
        <para>Start time in second.</para>
        <para>This is always the time of the first key in this take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.stopTime">
      <summary>
        <para>Stop time in second.</para>
        <para>This is always the time of the last key in this take.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.allowAlphaSplitting">
      <summary>Allows alpha splitting on relevant platforms for this texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.alphaIsTransparency">
      <summary>If the provided alpha channel is transparency, enable this to prefilter the color to avoid filtering artifacts.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.alphaSource">
      <summary>Select how the alpha of the imported texture is generated.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.anisoLevel">
      <summary>Anisotropic filtering level of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.borderMipmap">
      <summary>Keep texture borders the same when generating mipmaps?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.compressionQuality">
      <summary>
        <para>Quality of Texture Compression in the range [0..100].</para>
        <para>This will only affect the default platfrom setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.convertToNormalmap">
      <summary>Convert heightmap to normal map?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.crunchedCompression">
      <summary>
        <para>Use crunched compression when available.</para>
        <para>This will only affect the default platfrom setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.fadeout">
      <summary>Fade out mip levels to gray color?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.filterMode">
      <summary>Filtering mode of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateCubemap">
      <summary>Cubemap generation mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.heightmapScale">
      <summary>Amount of bumpyness in the heightmap.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.isReadable">
      <summary>
        <para>Set this to true if you want texture data to be readable from scripts. Set it to false to prevent scripts from reading texture data.</para>
        <para>In order for Texture2D.GetPixel, Texture2D.GetPixels and similar functions to work, the Texture must be readable from scripts. The <c>isReadable</c> setting determines whether scripts can access texture data through these functions. Textures are not set as readable by default. When a Texture is not readable, it consumes much less memory because an uncompressed copy of the texture data in system memory is not required after the texture is uploaded to the graphics API. Readable Textures require an uncompressed system memory copy of the texture data so that once edited, the updated texture data can be uploaded to the graphics API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
        <para>Larger textures will be scaled down to this size at import time. This will only affect the default platform setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipMapBias">
      <summary>Mip map bias of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapEnabled">
      <summary>
        <para>Generate Mip Maps.</para>
        <para>Select this to enable mip-map generation. Mip maps are smaller versions of the Texture that get used when the Texture is very small on screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceEnd">
      <summary>Mip level where texture is faded out completely.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceStart">
      <summary>Mip level where texture begins to fade out.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFilter">
      <summary>Mipmap filtering mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmapFilter">
      <summary>Normal map filtering mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.npotScale">
      <summary>Scaling mode for non power of two textures.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.qualifiesForSpritePacking">
      <summary>
        <para>Returns true if this <see cref="UnityEditor.TextureImporter" /> is setup for Sprite packing.</para>
        <para>If it returns true, texture is imported uncompressed for Sprite packing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteImportMode">
      <summary>Selects Single or Manual import mode for Sprite textures.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePackingTag">
      <summary>
        <para>Selects the <see cref="UnityEngine.Sprite" /> packing tag.</para>
        <para>Sprites with compatible tags are packed into atlases.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePivot">
      <summary>The point in the Sprite object's coordinate space where the graphic is located.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsPerUnit">
      <summary>The number of pixels in the sprite that correspond to one unit in world space.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritesheet">
      <summary>Array representing the sections of the atlas corresponding to individual sprite graphics.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.sRGBTexture">
      <summary>
        <para>Is texture storing color data?</para>
        <para>This setting is only relevant when Linear color space is used, and controls whether sRGB-&gt;Linear color space conversion is done when sampling the texture in shaders. Most "regular textures" store color data in sRGB color space, and for them this flag should be set to true. Non-color textures are typically stored as linear values, and the GPU should not do any color space conversions. This flag is set to false in this case. Unity marks various non-color textures (e.g. normal maps) as "linear" by default. Legacy IMGUI textures should be set as linear too. This flag corresponds to "sRGB (Color Texture)" option in class-TextureImporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureCompression">
      <summary>
        <para>Compression of imported texture.</para>
        <para>This will only affect the default platfrom setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureShape">
      <summary>Shape of imported texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureType">
      <summary>Which type of texture are we dealing with here.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.wrapMode">
      <summary>Wrap mode (Repeat or Clamp) of the texture.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.ClearPlatformTextureSettings(System.String)">
      <summary>
        <para>Clear specific target platform settings.</para>
        <para>The options for the platform string are "Web", "Standalone", "iPhone" and "Android".</para>
      </summary>
      <param name="platform">The platform whose settings are to be cleared (see below).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveAlpha">
      <summary>Does textures source image have alpha channel.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetAutomaticFormat(System.String)">
      <summary>TODO.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetDefaultPlatformTextureSettings">
      <summary>Get the default platform specific texture settings.</summary>
      <returns>A <see cref="UnityEditor.TextureImporterPlatformSettings" /> structure containing the default platform parameters.</returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@,System.Int32@,System.Boolean@)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>The values for the chosen platform are returned in the "out" parameters. The options for the platform string are "Standalone", "Web", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU" and "tvOS".</para>
      </summary>
      <param name="platform">The platform for which settings are required (see options below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture for the given platform.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
      <param name="etc1AlphaSplitEnabled">Status of the ETC1 and alpha split flag.</param>
      <returns>True if the platform override was found, false if no override was found.</returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@,System.Int32@)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>The values for the chosen platform are returned in the "out" parameters. The options for the platform string are "Standalone", "Web", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU" and "tvOS".</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
      <returns>True if the platform override was found, false if no override was found.</returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>The values for the chosen platform are returned in the "out" parameters. The options for the platform string are "Standalone", "Web", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU" and "tvOS".</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture.</param>
      <returns>True if the platform override was found, false if no override was found.</returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>Returns the parameters for the chosen platform. The options for the platform string are "Standalone", "Web", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU" and "tvOS".</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <returns>A <see cref="UnityEditor.TextureImporterPlatformSettings" /> structure containing the platform parameters.</returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.ReadTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>Read texture settings into <see cref="UnityEditor.TextureImporterSettings" /> class.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Boolean)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string are: "Standalone", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU", "tvOS".</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="allowsAlphaSplit">Allows splitting of imported texture into RGB+A so that ETC1 compression can be applied (Android only, and works only on textures that are a part of some atlas).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string are: "Standalone", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU", "tvOS".</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Int32,System.Boolean)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string are: "Standalone", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU", "tvOS".</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="compressionQuality">Value from 0..100, with 0, 50 and 100 being respectively Fast, Normal, Best quality options in the texture importer UI. For Crunch texture formats, this roughly corresponds to JPEG quality levels.</param>
      <param name="allowsAlphaSplit">Allows splitting of imported texture into RGB+A so that ETC1 compression can be applied (Android only, and works only on textures that are a part of some atlas).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(UnityEditor.TextureImporterPlatformSettings)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>Setup the parameters for a specific platform as described in <see cref="UnityEditor.TextureImporterPlatformSettings" />.</para>
      </summary>
      <param name="platformSettings">Structure containing the platform settings.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>Set texture importers settings from <see cref="UnityEditor.TextureImporterSettings" /> class.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.allowsAlphaSplitting">
      <summary>Allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.compressionQuality">
      <summary>Quality of texture compression in the range [0..100].</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.crunchedCompression">
      <summary>Use crunch compression when available.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.format">
      <summary>Format of imported texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
        <para>Larger textures will be scaled down to this size at import time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.name">
      <summary>
        <para>Name of the build target.</para>
        <para>The valid options for the name are "Standalone", "Web", "iPhone", "Android", "WebGL", "Windows Store Apps", "Tizen", "PSP2", "PS4", "PSM", "XboxOne", "Samsung TV", "Nintendo 3DS", "WiiU" and "tvOS".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.overridden">
      <summary>Set to true in order to override the Default platform parameters by those provided in the <see cref="UnityEditor.TextureImporterPlatformSettings" /> structure.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.textureCompression">
      <summary>Compression of imported texture.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporterPlatformSettings.CopyTo(UnityEditor.TextureImporterPlatformSettings)">
      <summary>Copy parameters into another TextureImporterPlatformSettings object.</summary>
      <param name="target">TextureImporterPlatformSettings object to copy settings to.</param>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.alphaIsTransparency">
      <summary>If the provided alpha channel is transparency, enable this to dilate the color to avoid filtering artifacts on the edges.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.alphaSource">
      <summary>Select how the alpha of the imported texture is generated.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.aniso">
      <summary>Anisotropic filtering level of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.borderMipmap">
      <summary>Enable this to avoid colors seeping out to the edge of the lower Mip levels. Used for light cookies.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.convertToNormalMap">
      <summary>Convert heightmap to normal map?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolution">
      <summary>
        <para>Convolution mode.</para>
        <para>Defines if <see cref="UnityEngine.Cubemap" /> texture is useful for skybox, image based diffuse lighting or specular reflections.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.fadeOut">
      <summary>Fade out mip levels to gray color?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.filterMode">
      <summary>Filtering mode of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.generateCubemap">
      <summary>Cubemap generation mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.heightmapScale">
      <summary>Amount of bumpyness in the heightmap.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapBias">
      <summary>Mip map bias of the texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapEnabled">
      <summary>Generate mip maps for the texture?</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceEnd">
      <summary>Mip level where texture is faded out to gray completely.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceStart">
      <summary>Mip level where texture begins to fade out to gray.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFilter">
      <summary>Mipmap filtering mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.normalMapFilter">
      <summary>Normal map filtering mode.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.npotScale">
      <summary>Scaling mode for non power of two textures.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.readable">
      <summary>
        <para>Is texture data readable from scripts.</para>
        <para>Texture has to be set as "readable" in order for Texture2D.GetPixel, Texture2D.GetPixels and similar functions to work. Textures are not set as readable by default. When texture is not readable, it consumes much less memory, because a system-memory copy does not have to be kept around after texture is uploaded to the graphics API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteAlignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows: Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteExtrude">
      <summary>The number of blank pixels to leave between the edge of the graphic and the mesh.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteMode">
      <summary>
        <para>Sprite texture import mode.</para>
        <para>This value corresponds to the SpriteImportMode enum as follows: None = 0, Single = 1, Manual = 2.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePivot">
      <summary>Pivot point of the Sprite relative to its graphic's rectangle.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsPerUnit">
      <summary>The number of pixels in the sprite that correspond to one unit in world space.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteTessellationDetail">
      <summary>The tessellation detail to be used for generating the mesh for the associated sprite if the SpriteMode is set to <c>Single</c>. For Multiple sprites, use the SpriteEditor to specify the value per sprite. Valid values are in the range [0-1], with higher values generating a tighter mesh. A default of -1 will allow Unity to determine the value automatically.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.sRGBTexture">
      <summary>
        <para>Is texture storing color data?</para>
        <para>This setting is only relevant when Linear color space is used, and controls whether sRGB-&gt;Linear color space conversion is done when sampling the texture in shaders. Most "regular textures" store color data in sRGB color space, and for them this flag should be set to true. Non-color textures are typically stored as linear values, and the GPU should not do any color space conversions. This flag is set to false in this case. Unity marks various non-color textures (e.g. normal maps) as "linear" by default. Legacy IMGUI textures should be set as linear too. This flag corresponds to "sRGB (Color Texture)" option in class-TextureImporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.textureShape">
      <summary>Shape of imported texture.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.textureType">
      <summary>Which type of texture are we dealing with here.</summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.wrapMode">
      <summary>Wrap mode (Repeat or Clamp) of the texture.</summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.ApplyTextureType(UnityEditor.TextureImporterType,System.Boolean)">
      <summary>Configure parameters to import a texture for a purpose of <c>type</c>, as described <see cref="UnityEditor.TextureImporterType" />.</summary>
      <param name="type">Texture type. See <see cref="UnityEditor.TextureImporterType" />.</param>
      <param name="applyAll">If <c>false</c>, change only specific properties. Exactly which, depends on <c>type</c>.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.CopyTo(UnityEditor.TextureImporterSettings)">
      <summary>Copy parameters into another TextureImporterSettings object.</summary>
      <param name="target">TextureImporterSettings object to copy settings to.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.Equal(UnityEditor.TextureImporterSettings,UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Test texture importer settings for equality.</para>
        <para>Objects are reported equal if either the references or the values are equal.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.current">
      <summary>
        <para>The tool that is currently selected for the Scene View.</para>
        <para>This refers to the View, Move, Rotate and Scale tools available in the toolbar for the main editor window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handlePosition">
      <summary>The position of the tool handle in world space.</summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRect">
      <summary>
        <para>The rectangle used for the rect tool.</para>
        <para>The rectangle is relative to the <see cref="UnityEditor.Tools.handlePosition" /> and is rotated around the <see cref="UnityEditor.Tools.handleRectRotation" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRectRotation">
      <summary>
        <para>The rotation of the rect tool handle in world space.</para>
        <para>This rotation can change based on the current Scene View camera angle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRotation">
      <summary>The rotation of the tool handle in world space.</summary>
    </member>
    <member name="P:UnityEditor.Tools.hidden">
      <summary>
        <para>Hides the Tools(Move, Rotate, Resize) on the Scene view.</para>
        <para>This will hide the default Move, Rotate and Resize Tools for the curently selected GameObjects, it will not interfere with custom gizmos or handles added by Scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotMode">
      <summary>Are we in Center or Pivot mode.</summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotRotation">
      <summary>What's the rotation of the tool handle.</summary>
    </member>
    <member name="P:UnityEditor.Tools.rectBlueprintMode">
      <summary>
        <para>Is the rect handle in blueprint mode?</para>
        <para>In blueprint mode the rect handle for RectTransforms ignored local rotation and scale. This can make it easier to work with layouts for RectTransforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.viewTool">
      <summary>
        <para>The option that is currently active for the View tool in the Scene view.</para>
        <para>The View tool has options for Orbit, Pan, Zoom and FPS, depending on which combination mouse buttons and modifier keys is used. This property reports which option is currently active.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.visibleLayers">
      <summary>
        <para>Which layers are visible in the scene view.</para>
        <para>This is a bitfield.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.ascentCalculationMode">
      <summary>
        <para>Calculation mode for determining font's ascent.</para>
        <para>Determines which calculation mode to use to determine the font's ascent when importing the font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterPadding">
      <summary>Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterSpacing">
      <summary>Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.customCharacters">
      <summary>A custom set of characters to be included in the Font Texture.</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontNames">
      <summary>
        <para>An array of font names, to be used when includeFontData is set to false.</para>
        <para>If you a trying to render a glyph which is not available in this font, Unity will walk through the list of font names given to find another font which has that glyph. For each name on the list, it will first search the supplied fontReferences for matching fonts in your project and then it will search fonts installed in the OS for matching fonts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontReferences">
      <summary>
        <para>References to other fonts to be used looking for fallbacks.</para>
        <para>This is a list of references to other Font assets in your project, which will be used when looking for the fallback fonts listed in fontNames when trying to render a character which is not available in the font. If you set the fallback font names in the Font importer inspector in the editor, Unity will automatically search your project for matching assets and populate the references automatically - so you should only ever need to set this yourself when importing Font assets programmatically.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontRenderingMode">
      <summary>
        <para>Font rendering mode to use for this font.</para>
        <para>S.A. <see cref="UnityEditor.FontRenderingMode" />.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontSize">
      <summary>Font size to use for importing the characters.</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTextureCase">
      <summary>Use this to adjust which characters should be imported.</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTTFName">
      <summary>The internal font name of the TTF file.</summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.includeFontData">
      <summary>
        <para>If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.</para>
        <para>When you disable this, the user must have the font installed in their system to use it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TrueTypeFontImporter.GenerateEditableFont(System.String)">
      <summary>
        <para>Create an editable copy of the font asset at <c>path</c>.</para>
        <para>Use this function if you want to modify the font generated by the TrueTypeFontImporter, with a custom texture or otherwise. It will create a copy of the font asset at <c>path</c> with an accompanying png Texture file and a Material, which you can all modify to meet your needs. A reference to the newly created editable Font is returned.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.undoRedoPerformed">
      <summary>Callback that is triggered after an undo or redo was executed.</summary>
    </member>
    <member name="F:UnityEditor.Undo.willFlushUndoRecord">
      <summary>Invoked before the Undo system performs a flush.</summary>
    </member>
    <member name="M:UnityEditor.Undo.AddComponent(UnityEngine.GameObject,System.Type)">
      <summary>
        <para>Adds a component to the game object and registers an undo operation for this action.</para>
        <para>If the undo is performed, the newly added component will be destroyed.</para>
      </summary>
      <param name="gameObject">The game object you want to add the component to.</param>
      <param name="type">The type of component you want to add.</param>
      <returns>The newly added component.</returns>
    </member>
    <member name="M:UnityEditor.Undo.AddComponent``1(UnityEngine.GameObject)">
      <summary>
        <para>Adds a component to the game object and registers an undo operation for this action.</para>
        <para>If the undo is performed, the newly added component will be destroyed.</para>
      </summary>
      <param name="gameObject">The game object you want to add the component to.</param>
      <returns>The newly added component.</returns>
    </member>
    <member name="M:UnityEditor.Undo.ClearUndo(UnityEngine.Object)">
      <summary>Removes all Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.</summary>
    </member>
    <member name="M:UnityEditor.Undo.CollapseUndoOperations(System.Int32)">
      <summary>
        <para>Collapses all undo operation up to group index together into one step.</para>
        <para>This is used by the color picked to combine all color modifications into a single step once the color picker is closed, while they are seperate operations when the color picker is still open.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.DestroyObjectImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object and records an undo operation so that it can be recreated.</para>
        <para>Destroys the object with the same behaviour as DestroyImmediate (objectToUndo, true); Also stores all destroyed objects in the undo buffer so that they can be fully recreated.</para>
      </summary>
      <param name="objectToUndo">The object that will be destroyed.</param>
    </member>
    <member name="M:UnityEditor.Undo.FlushUndoRecordObjects">
      <summary>Ensure objects recorded using <see cref="UnityEditor.Undo.RecordObject" /> or ::ref:RecordObjects are registered as an undoable action. In most cases there is no reason to invoke <see cref="UnityEditor.Undo.FlushUndoRecordObjects" /> since it's automatically done right after mouse-up and certain other events that conventionally marks the end of an action.</summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group index is automatically increased on mouse down, clicking on menu items and other operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroupName">
      <summary>
        <para>Get the name that will be shown in the UI for the current undo group.</para>
        <para>By default, this name is inferred from the actions in the group. To set the name manually, use <see cref="UnityEditor.Undo.SetCurrentGroupName" />.</para>
      </summary>
      <returns>Name of the current group or an empty string if the current group is empty.</returns>
    </member>
    <member name="M:UnityEditor.Undo.IncrementCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group is automatically incremented based on events eg. mouse down events, executing a menu item increments the current group. But sometimes it is necessary to manually group undo operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.MoveGameObjectToScene(UnityEngine.GameObject,UnityEngine.SceneManagement.Scene,System.String)">
      <summary>Move a GameObject from its current scene to a new scene. It is required that the GameObject is at the root of its current scene.</summary>
      <param name="go">GameObject to move.</param>
      <param name="scene">Scene to move the GameObject into.</param>
      <param name="name">Name of the undo action.</param>
    </member>
    <member name="M:UnityEditor.Undo.PerformRedo">
      <summary>
        <para>Perform an Redo operation.</para>
        <para>This performs a redo operation. It is the same as clicking on the Edit-&gt;Redo menu.</para>
      </summary>
      <seealso cref="M:UnityEditor.Undo.PerformUndo" />
    </member>
    <member name="M:UnityEditor.Undo.PerformUndo">
      <summary>
        <para>Perform an Undo operation.</para>
        <para>This performs a undo operation. It is the same as clicking on the Edit-&gt;Undo menu.</para>
      </summary>
      <seealso cref="M:UnityEditor.Undo.PerformRedo" />
    </member>
    <member name="M:UnityEditor.Undo.RecordObject(UnityEngine.Object,System.String)">
      <summary>
        <para>Records any changes done on the object after the RecordObject function.</para>
        <para>Almost all property changes can be recorded with this function. The transform parent, AddComponent, object destruction can not be recorded with this function, for that you should use the dedicated functions. Internally this will create a temporary copy of the object's state and at the end of the frame Unity will diff the state and thus detect what exactly has changed. The changed properties are then recorded on the undo stack. If nothing has actually changed (Binary exact comparison is used for all properties), no undo operation will be stored on the stack. This is an example of an editor script which allows you to change an effect radius variable. The Undo state is recorded, allowing you to revert the change using the undo system.</para>
        <para>Place this script on a GameObject to see the area of effect handle, and change the value using the gizmo in the scene view.</para>
      </summary>
      <param name="objectToUndo">The reference to the object that you will be modifying.</param>
      <param name="name">The title of the action to appear in the undo history (i.e. visible in the undo menu).</param>
    </member>
    <member name="M:UnityEditor.Undo.RecordObjects(UnityEngine.Object[],System.String)">
      <summary>Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.</summary>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Stores a copy of the object states on the undo stack.</para>
        <para>If the undo is performed, any changes made to the object after this function is called will be undone, and the object will be restored to the recorded state. Transform parent change, AddComponent, and object destruction can not be restored with this function, for that you should use the dedicated functions. See <see cref="UnityEditor.Undo.SetTransformParent" />, <see cref="UnityEditor.Undo.AddComponent" />, <see cref="UnityEditor.Undo.DestroyObjectImmediate" />. If the object is part of the current scene (e.g. a game object in the Hierarchy or a component attached to such game object), calling this function will immediately mark the scene as modified, even if you don't actually change the states of the object afterwards.</para>
      </summary>
      <param name="objectToUndo">The object whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object[],System.String)">
      <summary>This is equivalent to calling the first overload mutiple times, save for the fact that only one undo operation will be generated for this one.</summary>
      <param name="objectsToUndo">An array of objects whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCreatedObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Register an undo operations for a newly created object.</para>
        <para>When the undo is performed the object will be destroyed. All newly created objects that are part of undoable state should be registered with this function. Note: Object destruction works the same way as it does for <see cref="UnityEngine.Object.Destroy" /> (except for the delay). This means that GameObjects will be destroyed along with all their child GameObjects.</para>
      </summary>
      <param name="objectToUndo">The object that was created.</param>
      <param name="name">The name of the action to undo. Think "Undo ...." in the main menu.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Copy the states of a hierarchy of objects onto the undo stack.</para>
        <para>This function works similarly to <see cref="UnityEditor.Undo.RegisterCompleteObjectUndo" />. The key difference is that instead of copying the states of a single object, this function stores the states of a hierarchy of objects. Depending on the type of <c>objectToUndo</c>, the hierarchy is determined differently: * If <c>objectToUndo</c> is a game object, the hierarchy will contain (a) <c>objectToUndo</c> itself and its child game objects; (b) the components attached to these game objects. * If <c>objectToUndo</c> is a component attached to an existing game object, the hierarchy will contain the game object and all of its components, including <c>objectToUndo</c>. Child game objects are NOT involved in this case. * In all other cases, the hierarchy will only contain <c>objectToUndo</c> itself. It's then equivalent to calling <see cref="UnityEditor.Undo.RegisterCompleteObjectUndo" /> with the same parameters. If the undo is performed, any changes made to the objects in the above described hierarchy after this function is called will be undone, and the objects will be restored to the recorded state. Transform parent change, AddComponent, and object destruction can not be restored with this function, for that you should use the dedicated functions. See <see cref="UnityEditor.Undo.SetTransformParent" />, <see cref="UnityEditor.Undo.AddComponent" />, <see cref="UnityEditor.Undo.DestroyObjectImmediate" />. If any object involved is part of the current scene (e.g. a game object in the Hierarchy window or a component attached to such game object), calling this function will immediately mark the scene as modified, even if you don't actually change the states of the objects afterwards.</para>
      </summary>
      <param name="objectToUndo">The object used to determine a hierarchy of objects whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object)">
      <summary>This overload is deprecated. Use Undo.RegisterFullObjectHierarchyUndo(Object, string) instead.</summary>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllDownToGroup(System.Int32)">
      <summary>Performs all undo operations up to the group index without storing a redo operation in the process.</summary>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllInCurrentGroup">
      <summary>
        <para>Performs the last undo operation but does not record a redo operation.</para>
        <para>This is useful when you want to simply revert the last performed action. In Unity the escape is commonly used to execute this function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.SetCurrentGroupName(System.String)">
      <summary>
        <para>Set the name of the current undo group.</para>
        <para>Setting a name manually will override an implicitly generated name for the group.</para>
      </summary>
      <param name="name">New name of the current undo group.</param>
      <seealso cref="M:UnityEditor.Undo.GetCurrentGroupName" />
    </member>
    <member name="M:UnityEditor.Undo.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform,System.String)">
      <summary>
        <para>Sets the parent of transform to the new parent and records an undo operation.</para>
        <para>This is equivalent to calling transform.parent = newParent, but it additionally records the undo operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.angleError">
      <summary>Maximum allowed angle distortion (0..1).</summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.areaError">
      <summary>Maximum allowed area distortion (0..1).</summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.hardAngle">
      <summary>This angle (in degrees) or greater between triangles will cause seam to be created.</summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.packMargin">
      <summary>How much uv-islands will be padded.</summary>
    </member>
    <member name="M:UnityEditor.UnwrapParam.SetDefaults(UnityEditor.UnwrapParam@)">
      <summary>Will set default values for params.</summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh)">
      <summary>
        <para>Will generate per-triangle uv (3 UVs for each triangle) with default settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
      <param name="src">The source mesh to generate UVs for.</param>
      <returns>The list of UVs generated.</returns>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will generate per-triangle uv (3 UVs for each triangle) with provided settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
      <param name="src">The source mesh to generate UVs for.</param>
      <param name="settings">Allows you to specify custom parameters to control the unwrapping.</param>
      <returns>The list of UVs generated.</returns>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh)">
      <summary>Will auto generate uv2 with default settings for provided mesh, and fill them in.</summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>Will auto generate uv2 with provided settings for provided mesh, and fill them in.</summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.SilentExit">
      <summary>Silent exit in case of unhandled .NET exception (no Crash Report generated).</summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.Crash">
      <summary>Crash in case of unhandled .NET exception (Crash Report will be generated).</summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.Internal">
      <summary>Build APK using internal build system.</summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.Gradle">
      <summary>Build APK using Gradle or export Gradle project.</summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.ADT">
      <summary>Export ADT (legacy) project.</summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsDPad">
      <summary>Game is fully operational with a D-pad, no gamepad needed.</summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsGamepad">
      <summary>Works with a gamepad, but does not require it.</summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.RequiresGamepad">
      <summary>Requires a gamepad for gameplay.</summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.Auto">
      <summary>Let the OS decide, app doesn't have any preferences.</summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.PreferExternal">
      <summary>Prefer external, if possible. Install to internal otherwise.</summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.ForceInternal">
      <summary>Force installation into internal memory. Needed for things like Live Wallpapers.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel9">
      <summary>Android 2.3.1, "Gingerbread", API level 9.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel10">
      <summary>Android 2.3.3, "Gingerbread", API level 10.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel11">
      <summary>Android 3.0, "Honeycomb", API level 11.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel12">
      <summary>Android 3.1, "Honeycomb", API level 12.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel13">
      <summary>Android 3.2, "Honeycomb", API level 13.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel14">
      <summary>Android 4.0, "Ice Cream Sandwich", API level 14.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel15">
      <summary>Android 4.0.3, "Ice Cream Sandwich", API level 15.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel16">
      <summary>Android 4.1, "Jelly Bean", API level 16.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel17">
      <summary>Android 4.2, "Jelly Bean", API level 17.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel18">
      <summary>Android 4.3, "Jelly Bean", API level 18.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel19">
      <summary>Android 4.4, "KitKat", API level 19.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel21">
      <summary>Android 5.0, "Lollipop", API level 21.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel22">
      <summary>Android 5.1, "Lollipop", API level 22.</summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Large">
      <summary>Large.</summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedLarge">
      <summary>Inversed Large.</summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Small">
      <summary>Small.</summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedSmall">
      <summary>Inversed Small.</summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.DontShow">
      <summary>Don't Show.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.Center">
      <summary>Center.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFit">
      <summary>Scale to fit.</summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFill">
      <summary>Scale to fill.</summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.FAT">
      <summary>All supported architectures.</summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.ARMv7">
      <summary>ARMv7 only.</summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.x86">
      <summary>Intel only.</summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0">
      <summary>.NET 2.0.</summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0_Subset">
      <summary>.NET 2.0 Subset.</summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.Legacy2x">
      <summary>
        <para>Legacy bounding box method.</para>
        <para>Calculates ascent values by using the highest value of the top of the bounding boxes for the glyphs in the font's character set. For character sets other than dynamic, this can result in smaller ascent values, as not all glyphs will be considered. This mode is available for backward compatibility.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.FaceAscender">
      <summary>
        <para>Ascender method.</para>
        <para>Uses the face ascender value defined within the font.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.FaceBoundingBox">
      <summary>
        <para>Bounding box method.</para>
        <para>Uses the top of the face bounding box defined within the font.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.AspectOthers">
      <summary>Undefined aspect ratios.</summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect4by3">
      <summary>4:3 aspect ratio.</summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect5by4">
      <summary>5:4 aspect ratio.</summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by10">
      <summary>16:10 aspect ratio.</summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by9">
      <summary>16:9 aspect ratio.</summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidNotDelete">
      <summary>Tells the internal implementation that the callback did not delete the asset. The asset will be delete by the internal implementation.</summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.FailedDelete">
      <summary>Tells Unity that the file cannot be deleted and Unity should leave it alone.</summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidDelete">
      <summary>Tells Unity that the asset was deleted by the callback. Unity will not try to delete the asset, but will delete the cached version and preview file.</summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidNotMove">
      <summary>
        <para>Tells the internal implementation that the asset was not moved physically on disk by the script.</para>
        <para>This means that it is safe for the internal implementation to move the asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.FailedMove">
      <summary>
        <para>Tells the internal implementation that the script could not move the assets.</para>
        <para>Unity should not attempt to move the asset nor should it update its internal representation of the assets position on disk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidMove">
      <summary>
        <para>Tells the internal implementation that the script moved the asset physically on disk.</para>
        <para>The internal implementation will not try to move the asset on disk, but will move it in the internal database to keep consistency.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.PreserveSampleRate">
      <summary>Do not change the sample rate of the imported audio file. The sample rate will be preserved for the imported AudioClip.</summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OptimizeSampleRate">
      <summary>Let Unity deduce the optimal sample rate for the AudioClip being imported. The audio file will be analysed and a minimal sample rate chosen while still preserving audio quality.</summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OverrideSampleRate">
      <summary>Override the sample rate of the imported audio file with a custom value.</summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.None">
      <summary>Build assetBundle without any special option.</summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree">
      <summary>
        <para>Do not include type information within the AssetBundle.</para>
        <para>Specifying this flag will make an AssetBundle susceptible to script or Unity version changes, but will make the file smaller and a bit faster to load. This flag affects only AssetBundles for platforms that have type information included by default. Type information must be present for Web platforms, therefore Unity will reject to build an AssetBundle if you specify this flag when building for BuildTarget.WebPlayer, for example.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DeterministicAssetBundle">
      <summary>
        <para>Builds an asset bundle using a hash for the id of the object stored in the asset bundle.</para>
        <para>This allows you to rebuild an asset bundle and reference assets in it directly. When rebuilding the asset bundle the objects in it are guaranteed to have the same id after rebuilding the asset bundle. Due to it being a 32 bit hash space, if you have a lot of objects in the asset bundle it will increase the potential for hash conflicts. Unity will give an error and not build the asset bundle in that case. The hash is based on the GUID of the asset and the local id of the object in the asset. DeterministicAssetBundle are also slower to load from than normal asset bundles, this is because the threaded background loading API usually expects objects to be ordered in a way that makes reading reduce seeking. With DeterministicAssetBundles that is not possible. Note: This feature is always enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.ForceRebuildAssetBundle">
      <summary>
        <para>Force rebuild the assetBundles.</para>
        <para>This allows you to rebuild the assetBundle even if none of the included assets have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.IgnoreTypeTreeChanges">
      <summary>
        <para>Ignore the type tree changes when doing the incremental build check.</para>
        <para>This allows you to ignore the type tree changes when doing the incremental build check. With this flag set, if the included assets haven't change but type trees have changed, the target assetBundle will not be rebuilt.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.AppendHashToAssetBundleName">
      <summary>
        <para>Append the hash to the assetBundle name.</para>
        <para>This allows you to append the hash to the assetBundle name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.ChunkBasedCompression">
      <summary>
        <para>Use chunk-based LZ4 compression when creating the AssetBundle.</para>
        <para>This allows realtime decompression when reading data from the AssetBundle. AssetBundles created with this option are stored in compressed form after download (both in disk cache or memory).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.StrictMode">
      <summary>
        <para>Do not allow the build to succeed if any errors are reporting during it.</para>
        <para>Without this flag, non-fatal errors - such as a failure to compile a shader for a particular platform - will not cause the build to fail, but may result in incorrect behaviour at runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DryRunBuild">
      <summary>
        <para>Do a dry run build.</para>
        <para>This allows you to do a dry run build for the AssetBundles but not actually build them. With this option enabled, <see cref="UnityEditor.BuildPipeline.BuildAssetBundles" /> still returns an <see cref="UnityEngine.AssetBundleManifest" /> object which contains valid AssetBundle dependencies and hashes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.None">
      <summary>Perform the specified build without any special settings or extra tasks.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.Development">
      <summary>
        <para>Build a development version of the player.</para>
        <para>A development build includes debug symbols and enables the <see cref="UnityEngine.Profiling.Profiler" />.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AutoRunPlayer">
      <summary>Run the built player.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ShowBuiltPlayer">
      <summary>Show the built player.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildAdditionalStreamedScenes">
      <summary>
        <para>Build a compressed asset bundle that contains streamed scenes loadable with the WWW class.</para>
        <para>This allows you to on demand load scenes and their assets when needed instead of a simple linear progressing download. The best way to build a streamed scene asset bundle is to use BuildPipeline.BuildStreamedSceneAssetBundle</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AcceptExternalModificationsToPlayer">
      <summary>
        <para>Used when building Xcode (iOS) or Eclipse (Android) projects.</para>
        <para>On iOS, this setting will append an existing Xcode project. Existing Xcode project setting changes will be preserved. With the IL2CPP scripting backend, this setting will also allow incremental builds of the generated C++ code to work in Xcode. On Android, this setting will create a new Eclipse project. Existing Eclipse project setting changes will be discarded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ConnectWithProfiler">
      <summary>Start the player with a connection to the profiler in the editor.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AllowDebugging">
      <summary>Allow script debuggers to attach to the player remotely.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.SymlinkLibraries">
      <summary>Symlink runtime libraries when generating iOS Xcode project. (Faster iteration time).</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.EnableHeadlessMode">
      <summary>
        <para>Build headless Linux standalone.</para>
        <para>Cannot be used to make a development build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildScriptsOnly">
      <summary>Build only the scripts of a project.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ForceEnableAssertions">
      <summary>Include assertions in the build. By default, the assertions are only included in development builds.</summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ForceOptimizeScriptCompilation">
      <summary>
        <para>Force full optimizations for script complilation in Development builds.</para>
        <para>Forces full optimization for IL2CPP code compilation. Useful when profiling Developement builds to see how optimizations affect performance.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.StrictMode">
      <summary>
        <para>Do not allow the build to succeed if any errors are reporting during it.</para>
        <para>Without this flag, non-fatal errors - such as a failure to compile a shader for a particular platform - will not cause the build to fail, but may result in incorrect behaviour at runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXUniversal">
      <summary>Build a universal macOS standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel">
      <summary>Build a macOS standalone (Intel only).</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows">
      <summary>Build a Windows standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iOS">
      <summary>Build an iOS player.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Android">
      <summary>Build an Android .apk standalone app.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux">
      <summary>Build a Linux standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows64">
      <summary>Build a Windows 64-bit standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebGL">
      <summary>WebGL.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WSAPlayer">
      <summary>Build an Windows Store Apps player.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux64">
      <summary>Build a Linux 64-bit standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinuxUniversal">
      <summary>Build a Linux universal standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel64">
      <summary>Build a macOS Intel 64-bit standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Tizen">
      <summary>Build a Tizen player.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PSP2">
      <summary>Build a PS Vita Standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS4">
      <summary>Build a PS4 Standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XboxOne">
      <summary>Build a Xbox One Standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.SamsungTV">
      <summary>Build to Samsung Smart TV platform.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.N3DS">
      <summary>Build to Nintendo 3DS platform.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WiiU">
      <summary>Build a Wii U standalone.</summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.tvOS">
      <summary>Build to Apple's tvOS platform.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Unknown">
      <summary>Unknown target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Standalone">
      <summary>Mac/PC standalone target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iOS">
      <summary>Apple iOS target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Android">
      <summary>Android target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebGL">
      <summary>WebGL.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WSA">
      <summary>Windows Store Apps target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Tizen">
      <summary>Samsung Tizen target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PSP2">
      <summary>Sony PS Vita target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS4">
      <summary>Sony Playstation 4 target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XboxOne">
      <summary>Microsoft Xbox One target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.SamsungTV">
      <summary>Samsung Smart TV target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.N3DS">
      <summary>Nintendo 3DS target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WiiU">
      <summary>Nintendo Wii U target.</summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.tvOS">
      <summary>Apple's tvOS target.</summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CreateFromThisModel">
      <summary>
        <para>A mask containing all the transform in the file will be created internally.</para>
        <para>For Humanoid rig, unity will convert all the transforms animation into muscle animation, these transforms cannot be edited in the mask.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CopyFromOther">
      <summary>Use a mask from your project to specify which transforms animation should be imported.</summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.None">
      <summary>
        <para>No Mask. All the animation will be imported.</para>
        <para>Use this option if you do not require a mask.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
        <para>In this mode Unity will change the monitor resolution and claim exclusive use of the target display. Note that monitor selection is not available from the startup dialog when using exclusive mode. Also, run in background is not supported when the player is minimized.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
        <para>In this mode Unity will change the monitor resolution and claim exclusive use of the target display. Note that monitor selection is not available from the startup dialog when using exclusive mode. Also, run in background is not supported when the player is minimized.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.None">
      <summary>No indication (drag should not be performed).</summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Copy">
      <summary>Copy dragged objects.</summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Link">
      <summary>Link dragged objects to target.</summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Move">
      <summary>Move dragged objects.</summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Generic">
      <summary>Generic drag operation.</summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Rejected">
      <summary>Rejected drag operation.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Normal">
      <summary>Draw the camera like it would be drawn in-game. This uses the clear flags of the camera.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Textured">
      <summary>Draw the camera textured with selection wireframe and no background clearing.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Wireframe">
      <summary>Draw the camera in wireframe and no background clearing.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.TexturedWire">
      <summary>Draw the camera where all objects have a wireframe overlay. and no background clearing.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ShadowCascades">
      <summary>
        <para>Draw directional light shadowmap cascades.</para>
        <para>Scene view is tinted according to which shadow cascade the objects fall into. Colors match the UI for shadow cascade split distances in Quality Settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RenderPaths">
      <summary>
        <para>Draw color-coded render paths.</para>
        <para>Objects are colored blue for Deferred Shading, yellow for Forward, green for legacy deferred lighting and red for legacy VertexLit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.AlphaChannel">
      <summary>Display alpha channel of the rendering.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Overdraw">
      <summary>Display scene overdraw, with brighter colors indicating more overdraw.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Mipmaps">
      <summary>Display texture resolution, with red tint indicating too high resolution, and blue tint indicating texture sizes that could be higher.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredDiffuse">
      <summary>
        <para>Draw diffuse color of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSpecular">
      <summary>
        <para>Draw specular color of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSmoothness">
      <summary>
        <para>Draw smoothness value of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredNormal">
      <summary>
        <para>Draw world space normal of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Charting">
      <summary>Draw objects with different color for each chart (UV island).</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Systems">
      <summary>Draw objects with different color for each GI system.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Albedo">
      <summary>Draw objects with the albedo component only.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Emissive">
      <summary>Draw objects with the emission component only.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Irradiance">
      <summary>Draw objects with real-time GI only.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Directionality">
      <summary>Draw objects with directionality for real-time GI.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Baked">
      <summary>Draw objects with baked GI only.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Clustering">
      <summary>Draw with different color for each cluster.</summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.LitClustering">
      <summary>Draw lit clusters.</summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Hidden">
      <summary>The Renderer has no selection highlight or wireframe in the Editor.</summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Wireframe">
      <summary>The Renderer has wireframe but not selection highlight in the Editor.</summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Highlight">
      <summary>The Renderer has selection highlight but no wireframe in the Editor.</summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Game">
      <summary>The skin used for game views.</summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Inspector">
      <summary>The skin used for inspectors.</summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Scene">
      <summary>The skin used for scene views.</summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Default">
      <summary>
        <para>Default mode. Will not include dependencies or subdirectories nor include Library assets unless specifically included in the asset list.</para>
        <para>The export process will happen synchronously, ie. the ExportPackage function will not return until the package is fully exported.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Interactive">
      <summary>
        <para>The export operation will be run asynchronously and reveal the exported package file in a file browser window after the export is finished.</para>
        <para>Note. When interactive mode is enabled, ExportPackage will return immediately before the package file has been created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Recurse">
      <summary>Will recurse through any subdirectories listed and include all assets inside them.</summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeDependencies">
      <summary>In addition to the assets paths listed, all dependent assets will be included as well.</summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeLibraryAssets">
      <summary>
        <para>The exported package will include all library assets, ie. the project settings located in the Library folder of the project.</para>
        <para>This is useful for exporting an entire project in a single unitypackage:</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.Smooth">
      <summary>
        <para>Use Anti-Aliased Font rendering. When using dynamic fonts, this is the mode which is fastest in rendering font textures.</para>
        <para>This mode looks very similar to the font rendering on macOS.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedSmooth">
      <summary>
        <para>Use Anti-Aliased Font rendering with hinting. This forces character lines to run along pixel boundaries, and generally produces.</para>
        <para>A crisper output then <see cref="UnityEditor.FontRenderingMode.Smooth" />, more similar to the font rendering used on Windows. It is slower to render textures then when using smooth mode, but may be easier to read for small font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedRaster">
      <summary>
        <para>Use hinted font rendering without anti-aliasing. This is the crispest font rendering option, and may be most readable for small.</para>
        <para>Font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.OSDefault">
      <summary>
        <para>Use the OS default font rendering mode. This selects either <see cref="UnityEditor.FontRenderingMode.HintedSmooth" /> or.</para>
        <para>
          <see cref="UnityEditor.FontRenderingMode.HintedRaster" /> on Windows, and either <see cref="UnityEditor.FontRenderingMode.Smooth" /> or <see cref="UnityEditor.FontRenderingMode.HintedRaster" /> on macOS, depending on the system preferences. This mode is only available for dynamic fonts, as static fonts are generated at build time.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Dynamic">
      <summary>Render characters into font texture at runtime as needed.</summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Unicode">
      <summary>Import a set of Unicode characters common for latin scripts.</summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCII">
      <summary>Import basic ASCII character set.</summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIIUpperCase">
      <summary>Only import upper case ASCII character set.</summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIILowerCase">
      <summary>Only import lower case ASCII character set.</summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.CustomSet">
      <summary>Custom set of characters.</summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Pickable">
      <summary>The gizmo can be picked in the editor.</summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NotInSelectionHierarchy">
      <summary>Draw the gizmo if it is not selected and also no parent/ancestor is selected.</summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NonSelected">
      <summary>Draw the gizmo if it is not selected.</summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Selected">
      <summary>
        <para>Draw the gizmo if it is selected.</para>
        <para>It is recommended to always use GizmoType.InSelectionHierarchy instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Active">
      <summary>Draw the gizmo if it is active (shown in the inspector).</summary>
    </member>
    <member name="F:UnityEditor.GizmoType.InSelectionHierarchy">
      <summary>Draw the gizmo if it is selected or it is a child/descendent of the selected.</summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.None">
      <summary>Highlights nothing.</summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Auto">
      <summary>Highlights the first element found using any of the search modes.</summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Identifier">
      <summary>Highlights an element with a given identifier text.</summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.PrefixLabel">
      <summary>Highlights an entire editor control using its label text as identifier.</summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Content">
      <summary>Highlights an element containing text using the text as identifier.</summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.Default">
      <summary>Default import options.</summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUpdate">
      <summary>
        <para>User initiated asset import.</para>
        <para>This should be passed when asset import is caused by the user (e.g. by clicking Reimport). Non-user initiated import happens when the asset modification time changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceSynchronousImport">
      <summary>
        <para>Import all assets synchronously.</para>
        <para>By default some assets can be imported asynchronously (e.g. scripts can be compiled in the background). In some cases all importing needs to be synchronous; use this flag then. For example, when importing a scripts + prefabs, scripts have to be fully compiled before prefab is serialized, otherwise it might get old variables.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ImportRecursive">
      <summary>When a folder is imported, import all its contents as well.</summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.DontDownloadFromCacheServer">
      <summary>Force a full reimport but don't download the assets from the cache server.</summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUncompressedImport">
      <summary>Forces asset import as uncompressed for edition facilities.</summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Custom">
      <summary>Custom background behavior, see <see cref="UnityEditor.iOSBackgroundMode" /> for specific background modes.</summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Suspend">
      <summary>Application should suspend execution when entering background.</summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Exit">
      <summary>Application should exit when entering background.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.None">
      <summary>No background modes supported.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Audio">
      <summary>Audio, AirPlay and Picture in Picture.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Location">
      <summary>Location updates.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.VOIP">
      <summary>Voice over IP.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.NewsstandContent">
      <summary>Newsstand downloads.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.ExternalAccessory">
      <summary>External accessory communication.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.BluetoothCentral">
      <summary>Uses Bluetooth LE accessories.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.BluetoothPeripheral">
      <summary>Acts as a Bluetooth LE accessory.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Fetch">
      <summary>Background fetch.</summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.RemoteNotification">
      <summary>Remote notifications.</summary>
    </member>
    <member name="F:UnityEditor.iOSBuildType.Debug">
      <summary>Build configuration set to Debug for the generated Xcode project.</summary>
    </member>
    <member name="F:UnityEditor.iOSBuildType.Release">
      <summary>Build configuration set to Release for the generated Xcode project with optimization enabled.</summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.DeviceSDK">
      <summary>Device SDK.</summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.SimulatorSDK">
      <summary>Simulator SDK.</summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.WhiteLarge">
      <summary>White Large.</summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.White">
      <summary>White.</summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.Gray">
      <summary>Gray.</summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.DontShow">
      <summary>Don't Show.</summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.Default">
      <summary>Default.</summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackTranslucent">
      <summary>Black translucent.</summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackOpaque">
      <summary>Black opaque.</summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneOnly">
      <summary>iPhone/iPod Only.</summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPadOnly">
      <summary>iPad Only.</summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneAndiPad">
      <summary>Universal : iPhone/iPod + iPad.</summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows, GameCenter or Mac App Store UI, Battery warnings, etc).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindowWithDockAndMenuBar">
      <summary>
        <para>Fullscreen window with Dock and Menu bar.</para>
        <para>Same as Fullscreen window mode, but Unity will also show the Menu bar and Dock if the cursor moves to the edges of the screen, like other macOS fullscreen Apps. It is possible to switch between fullscreen and windowed modes using the fullscreen button in the window title bar (or in the menu bar in fullscreen mode), and it is possible to switch to other Applications using trackpad swipes or Cmd-Tab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.None">
      <summary>Neutral message.</summary>
    </member>
    <member name="F:UnityEditor.MessageType.Info">
      <summary>Info message.</summary>
    </member>
    <member name="F:UnityEditor.MessageType.Warning">
      <summary>Warning message.</summary>
    </member>
    <member name="F:UnityEditor.MessageType.Error">
      <summary>Error message.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.Generic">
      <summary>Don't override texture compression.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.DXT">
      <summary>S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra2 platform, including Motorala Xoom, Motorola Atrix, Droid Bionic, and others.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.PVRTC">
      <summary>PowerVR texture compression. Available in devices running PowerVR SGX530/540 GPU, such as Motorola DROID series; Samsung Galaxy S, Nexus S, and Galaxy Tab; and others.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ATC">
      <summary>ATI texture compression. Available on devices running Adreno GPU, including HTC Nexus One, Droid Incredible, EVO, and others.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC">
      <summary>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC2">
      <summary>ETC2 texture compression.</summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ASTC">
      <summary>ASTC texture compression.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Off">
      <summary>No animation compression.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReduction">
      <summary>Perform keyframe reduction.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReductionAndCompression">
      <summary>Perform keyframe reduction and compression.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Optimal">
      <summary>
        <para>Perform keyframe reduction and choose the best animation curve representation at runtime to reduce memory footprint (default).</para>
        <para>Optimal is only available for generic and humanoid rig type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.None">
      <summary>Generate no animation data.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Legacy">
      <summary>Generate a legacy animation type.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Generic">
      <summary>Generate a generic animator.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Human">
      <summary>Generate a human animator.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.None">
      <summary>Do not generate animations.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.GenerateAnimations">
      <summary>Default animation import mode (All animations are stored in the root object).</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InRoot">
      <summary>Generate animations in the transform root objects.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InOriginalRoots">
      <summary>Generate animations in the root objects of the animation package.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InNodes">
      <summary>Generate animations in the objects that animate.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X1">
      <summary>Default Humanoid Oversampling multiplier = 1 which is equivalent to no oversampling.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X2">
      <summary>
        <para>Humanoid Oversampling samples at 2 times the sampling rate found in the imported file.</para>
        <para>In most cases, this should fix interpolation problems.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X4">
      <summary>
        <para>Humanoid Oversampling samples at 4 times the sampling rate found in the imported file.</para>
        <para>Be careful, this could lead to a large output file. To be used only with very fast Humanoid motions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X8">
      <summary>
        <para>Humanoid Oversampling samples at 8 times the sampling rate found in the imported file.</para>
        <para>Be careful, this could lead to a large output file. To be used only with very fast Humanoid motions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName">
      <summary>
        <para>Use material names in the form &lt;textureName&gt;.mat.</para>
        <para>Material names will be accepted in the form <c>&lt;textureName&gt;.mat</c> (ie, the diffuse texture name of the imported material) when searching for existing materials or creating new ones. If the imported material doesn't have a diffuse texture assigned then a name in the form <c>&lt;materialName&gt;.mat</c> will be used instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnMaterialName">
      <summary>
        <para>Use a material name of the form <c>&lt;materialName&gt;.mat</c>.</para>
        <para>Material names will be accepted in the form <c>&lt;materialName&gt;.mat</c> when searching for existing materials or creating new ones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnModelNameAndMaterialName">
      <summary>
        <para>Use material names in the form <c>&lt;modelFileName&gt;-&lt;materialName&gt;.mat</c>.</para>
        <para>Material names will be accepted in the form <c>&lt;modelFileName&gt;-&lt;materialName&gt;.mat</c> when searching for existing materials or creating new ones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Local">
      <summary>
        <para>Search in local Materials folder.</para>
        <para>Unity will try to locate the material in local Materials folder, i.e. in path modelFilePath/Materials. For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in Assets/Model/Materials folder.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.RecursiveUp">
      <summary>
        <para>Recursive-up search in Materials folders.</para>
        <para>Unity will perform a recursive-up search for the material in all Materials folders up to the Assets folder. For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in these folders in this order: Assets/Model/Materials, Assets/Materials.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Everywhere">
      <summary>
        <para>Search in all project.</para>
        <para>Unity will search for the material in all folders of Unity project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Off">
      <summary>No mesh compression (default).</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Low">
      <summary>
        <para>Low amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to respectively 20, 8, 16 bits per component. Skinning information will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Medium">
      <summary>
        <para>Medium amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to respectively 16, 8, 10 bits per component. Skinning information will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.High">
      <summary>
        <para>High amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to respectively 10, 6, 8 bits per component. Skinning information will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.Import">
      <summary>Import vertex normals from model file (default).</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.Calculate">
      <summary>Calculate vertex normals.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.None">
      <summary>Do not import vertex normals.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.Import">
      <summary>Import vertex tangents from model file.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateLegacy">
      <summary>Calculate tangents with legacy algorithm.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateLegacyWithSplitTangents">
      <summary>Calculate tangents with legacy algorithm, with splits across UV charts.</summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateMikk">
      <summary>
        <para>Calculate tangents using MikkTSpace (default).</para>
        <para>Vertex tangents are calculated with Morten Mikkelsen's tangent space algorithm ("MikkTSpace"). This algorithm is used by many 3D modeling packages, normal mapping tools and graphics engines.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.None">
      <summary>Do not import vertex tangents.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Arrow">
      <summary>Normal pointer arrow.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Text">
      <summary>Text cursor.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeVertical">
      <summary>Vertical resize arrows.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeHorizontal">
      <summary>Horizontal resize arrows.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Link">
      <summary>Arrow with a Link badge (for assigning pointers).</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SlideArrow">
      <summary>Arrow with small arrows for indicating sliding at number fields.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpRight">
      <summary>Resize up-right for window edges.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpLeft">
      <summary>Resize up-Left for window edges.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.MoveArrow">
      <summary>Arrow with the move symbol next to it for the sceneview.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.RotateArrow">
      <summary>Arrow with the rotate symbol next to it for the sceneview.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ScaleArrow">
      <summary>Arrow with the scale symbol next to it for the sceneview.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowPlus">
      <summary>Arrow with the plus symbol next to it.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowMinus">
      <summary>Arrow with the minus symbol next to it.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Pan">
      <summary>Cursor with a dragging hand for pan.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Orbit">
      <summary>Cursor with an eye for orbit.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Zoom">
      <summary>Cursor with a magnifying glass for zoom.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.FPS">
      <summary>Cursor with an eye and stylized arrow keys for FPS navigation.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.CustomCursor">
      <summary>
        <para>The current user defined cursor.</para>
        <para>Many custom cursors are available on the internet.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeUpDown">
      <summary>Up-Down resize arrows for window splitters.</summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeLeftRight">
      <summary>Left-Right resize arrows for window splitters.</summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Center">
      <summary>The tool handle is at the graphical center of the selection.</summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Pivot">
      <summary>The tool handle is on the pivot point of the active object.</summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Local">
      <summary>The tool handle is oriented from the active object.</summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Global">
      <summary>The tool handle is aligned along the global axes.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.None">
      <summary>The object is not a prefab nor an instance of a prefab.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.Prefab">
      <summary>The object is a user created prefab asset.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefab">
      <summary>The object is an imported 3D model asset.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.PrefabInstance">
      <summary>The object is an instance of a user created prefab.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefabInstance">
      <summary>The object is an instance of an imported 3D model.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.MissingPrefabInstance">
      <summary>The object was an instance of a prefab, but the original prefab could not be found.</summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedPrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PS4BuildSubtarget.PCHosted">
      <summary>Build hosted on a PC, for file serving to a dev or test kit.</summary>
    </member>
    <member name="F:UnityEditor.PS4BuildSubtarget.Package">
      <summary>Package build for installation on either a dev or test kit.</summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.PCHosted">
      <summary>For general development, creates a build stored on the host PC which the Vita reads from.</summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.Package">
      <summary>For building a PS Vita package that can be installed on a PS Vita memory card.</summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.MoveAssetToTrash">
      <summary>The asset should be moved to trash.</summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.DeleteAssets">
      <summary>Delete the asset without moving it to the trash.</summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.Default">
      <summary>
        <para>Replaces prefabs by matching pre-existing connections to the prefab.</para>
        <para>If the game object hierarchy was not connected to the prefab before all game objects / components will be new and thus overrides in prefab instances will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ConnectToPrefab">
      <summary>Connects the passed objects to the prefab after uploading the prefab.</summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ReplaceNameBased">
      <summary>
        <para>Replaces the prefab using name based lookup in the transform hierarchy.</para>
        <para>This is internally used by the model importer and is useful for relating game object hierarchy built from scratch to an existing prefab without breaking connections.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Disabled">
      <summary>Never show the resolution dialog.</summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Enabled">
      <summary>
        <para>Show the resolution dialog on first launch.</para>
        <para>A setting in the dialog allows the user to hide it. The user can see the dialog subsequently by holding the option/alt key (Mac) or shift key (Windows) at application launch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.HiddenByDefault">
      <summary>
        <para>Hide the resolution dialog on first launch.</para>
        <para>The user can see the dialog subsequently by holding the option/alt key (Mac) or shift key (Window) at application launch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.SlowAndSafe">
      <summary>Default setting.</summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.FastButNoExceptions">
      <summary>Script method call overhead decreased at the expense of limited compatibility.</summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.Mono2x">
      <summary>The standard Mono 2.6 runtime.</summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.IL2CPP">
      <summary>Unity's .NET runtime.</summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.WinRTDotNET">
      <summary>Microsoft's .NET runtime.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Unfiltered">
      <summary>Return the whole selection.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.TopLevel">
      <summary>Only return the topmost selected transform. A selected child of another selected transform will be filtered out.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Deep">
      <summary>Return the selection and all child transforms of the selection.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.ExcludePrefab">
      <summary>Excludes any prefabs from the selection.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Editable">
      <summary>
        <para>Excludes any objects which shall not be modified.</para>
        <para>This will filter generated prefabs from an imported fbx file but not user created prefabs.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Assets">
      <summary>Only return objects that are assets in the Asset directory.</summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.DeepAssets">
      <summary>If the selection contains folders, also include all assets and subfolders within that folder in the file hierarchy.</summary>
    </member>
    <member name="F:UnityEditor.SemanticMergeMode.Off">
      <summary>Disable use of semantic merging.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Integer">
      <summary>Integer property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Boolean">
      <summary>Boolean property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Float">
      <summary>Float property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.String">
      <summary>String property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Color">
      <summary>Color property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ObjectReference">
      <summary>Reference to another object.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.LayerMask">
      <summary>
        <see cref="UnityEngine.LayerMask" /> property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Enum">
      <summary>Enumeration property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector2">
      <summary>2D vector property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector3">
      <summary>3D vector property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector4">
      <summary>4D vector property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Rect">
      <summary>Rectangle property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ArraySize">
      <summary>Array size property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Character">
      <summary>Character property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.AnimationCurve">
      <summary>AnimationCurve property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Bounds">
      <summary>Bounds property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Gradient">
      <summary>Gradient property.</summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Quaternion">
      <summary>Quaternion property.</summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.None">
      <summary>Graphic is not a Sprite.</summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Single">
      <summary>Sprite is a single image section extracted automatically from the texture.</summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Multiple">
      <summary>Sprites are multiple image sections extracted from the texture.</summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Polygon">
      <summary>Sprite has it own mesh outline defined.</summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.Disabled">
      <summary>Doesn't pack sprites.</summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.BuildTimeOnly">
      <summary>Updates sprite atlas cache when building player/bundles.</summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.AlwaysOn">
      <summary>
        <para>Always maintain an up-to-date sprite atlas cache.</para>
        <para>Updates sprite atlas cache when going into Play mode or building player/bundles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.LightmapStatic">
      <summary>Considered static for lightmapping.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccluderStatic">
      <summary>Considered static for occlusion.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccludeeStatic">
      <summary>Considered static for occlusion.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.BatchingStatic">
      <summary>Consider for static batching.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.NavigationStatic">
      <summary>Considered static for navigation.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OffMeshLinkGeneration">
      <summary>Auto-generate OffMeshLink.</summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.ReflectionProbeStatic">
      <summary>Consider static for reflection probe.</summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.MultiPass">
      <summary>The scene graph is traversed twice, rendering one eye at a time. This is the slowest path and should only be used for reference.</summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.SinglePass">
      <summary>The scene graph is traversed only once and two draw calls will be issued for each render node. The main render target has to be a double wide render target. This is considerable faster than MultiPass mode.</summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.Instancing">
      <summary>The scene graph is traversed only once and there will be only one draw call issued for each render node. The main render target has to be an array render target. This is an optimization of the StereoRenderingPath.SinglePass mode. Special hardware support is required for this to run.</summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.Disabled">
      <summary>Managed code stripping is disabled.</summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripAssemblies">
      <summary>Unused parts of managed code are stripped away.</summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripByteCode">
      <summary>Managed method bodies are stripped away. AOT platforms only.</summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.UseMicroMSCorlib">
      <summary>Lightweight mscorlib version will be used at expense of limited compatibility.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.None">
      <summary>No Alpha will be used.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.FromInput">
      <summary>Use Alpha from the input texture if one is provided.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.FromGrayScale">
      <summary>Generate Alpha from image gray scale.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.Uncompressed">
      <summary>Texture will not be compressed.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.Compressed">
      <summary>Texture will be compressed using a standard format depending on the platform (DXT, ASTC, ...).</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.CompressedHQ">
      <summary>Texture will be compressed using a high quality format depending on the platform and availability (BC7, ASTC4x4, ...).</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.CompressedLQ">
      <summary>Texture will be compressed using a low quality but high performance, high compression format depending on the platform and availability (2bpp PVRTC, ASTC8x8, ...).</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.None">
      <summary>No convolution needed. This <see cref="UnityEngine.Cubemap" /> texture represents mirror reflection or Skybox.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Specular">
      <summary>
        <para>Specular convolution (aka Prefiltered Environment Map).</para>
        <para>Each pixel of this <see cref="UnityEngine.Cubemap" /> texture is replaced with the integral of incident illumination towards corresponding direction weighted with the Phong lobe. Each mip map is convolved with varying Phong exponent - high resolution mip maps represent glossy reflection while low resolution mips are very blurry and useful for very rough specular reflection. Can be used to reflect light on glossy and rough objects by sampling with the reflection vector.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Diffuse">
      <summary>
        <para>Diffuse convolution (aka irradiance <see cref="UnityEngine.Cubemap" />).</para>
        <para>Each pixel of this <see cref="UnityEngine.Cubemap" /> texture is replaced with the cosine-weighted integral of the corresponding hemisphere of incident illumination. In simpler terms texture is nicely blurred. Can be used to light diffuse object by sampling with its surface normal.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Automatic">
      <summary>Choose texture format automatically based on the texture parameters.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1">
      <summary>
        <see cref="UnityEngine.TextureFormat.DXT1" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5">
      <summary>
        <see cref="UnityEngine.TextureFormat.DXT5" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB16">
      <summary>
        <see cref="UnityEngine.TextureFormat.RGB565" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB24">
      <summary>
        <see cref="UnityEngine.TextureFormat.RGB24" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Alpha8">
      <summary>
        <see cref="UnityEngine.TextureFormat.Alpha8" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB16">
      <summary>
        <see cref="UnityEngine.TextureFormat.ARGB4444" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA32">
      <summary>
        <see cref="UnityEngine.TextureFormat.RGBA32" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB32">
      <summary>
        <see cref="UnityEngine.TextureFormat.ARGB32" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA16">
      <summary>
        <see cref="UnityEngine.TextureFormat.RGBA4444" /> texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBAHalf">
      <summary>
        <see cref="UnityEngine.TextureFormat.RGBAHalf" /> floating point texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC4">
      <summary>
        <see cref="UnityEngine.TextureFormat.BC4" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC5">
      <summary>
        <see cref="UnityEngine.TextureFormat.BC5" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC6H">
      <summary>
        <see cref="UnityEngine.TextureFormat.BC6H" /> compressed HDR texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC7">
      <summary>
        <see cref="UnityEngine.TextureFormat.BC7" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1Crunched">
      <summary>DXT1 compressed texture format with Crunch compression for small storage sizes.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5Crunched">
      <summary>DXT5 compressed texture format with Crunch compression for small storage sizes.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB2">
      <summary>PowerVR/iOS <see cref="UnityEngine.TextureFormat.PVRTC_RGB2" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA2">
      <summary>PowerVR/iOS <see cref="UnityEngine.TextureFormat.PVRTC_RGBA2" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB4">
      <summary>PowerVR/iOS <see cref="UnityEngine.TextureFormat.PVRTC_RGB4" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA4">
      <summary>PowerVR/iOS <see cref="UnityEngine.TextureFormat.PVRTC_RGBA4" /> compressed texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC_RGB4">
      <summary>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGB4">
      <summary>ATC (Android) 4 bits/pixel compressed RGB texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGBA8">
      <summary>ATC (Android) 8 bits/pixel compressed RGBA texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R">
      <summary>ETC2/EAC compressed 4 bits / pixel unsigned R texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R_SIGNED">
      <summary>ETC2/EAC compressed 4 bits / pixel signed R texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG">
      <summary>ETC2/EAC compressed 8 bits / pixel unsigned RG texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG_SIGNED">
      <summary>ETC2/EAC compressed 4 bits / pixel signed RG texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4">
      <summary>ETC2 compressed 4 bits / pixel RGB texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA">
      <summary>ETC2 compressed 4 bits / pixel RGB + 1-bit alpha texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGBA8">
      <summary>ETC2 compressed 8 bits / pixel RGBA texture format.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_4x4">
      <summary>ASTC compressed RGB texture format, 4x4 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_5x5">
      <summary>ASTC compressed RGB texture format, 5x5 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_6x6">
      <summary>ASTC compressed RGB texture format, 6x6 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_8x8">
      <summary>ASTC compressed RGB texture format, 8x8 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_10x10">
      <summary>ASTC compressed RGB texture format, 10x10 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_12x12">
      <summary>ASTC compressed RGB texture format, 12x12 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_4x4">
      <summary>ASTC compressed RGBA texture format, 4x4 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_5x5">
      <summary>ASTC compressed RGBA texture format, 5x5 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_6x6">
      <summary>ASTC compressed RGBA texture format, 6x6 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_8x8">
      <summary>ASTC compressed RGBA texture format, 8x8 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_10x10">
      <summary>ASTC compressed RGBA texture format, 10x10 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_12x12">
      <summary>ASTC compressed RGBA texture format, 12x12 block size.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Spheremap">
      <summary>Generate cubemap from spheremap texture.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Cylindrical">
      <summary>Generate cubemap from cylindrical texture.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.FullCubemap">
      <summary>Generate cubemap from vertical or horizontal cross texture.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.AutoCubemap">
      <summary>
        <para>Automatically determine type of cubemap generation from the source image.</para>
        <para>This picks cylindrical, spheremap, cross or 6-face layout based on the aspect ratio of the source image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.BoxFilter">
      <summary>Box mipmap filter.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.KaiserFilter">
      <summary>Kaiser mipmap filter.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Standard">
      <summary>Standard normal map filter.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Sobel">
      <summary>Sobel normal map filter.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.None">
      <summary>Keep non power of two textures as is.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToNearest">
      <summary>Scale to nearest power of two.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToLarger">
      <summary>Scale to larger power of two.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToSmaller">
      <summary>Scale to smaller power of two.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Auto">
      <summary>Do RGBM encoding when source data is HDR in <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.On">
      <summary>Do RGBM encoding in <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Off">
      <summary>Do not perform RGBM encoding in <see cref="UnityEditor.TextureImporter" />.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Encoded">
      <summary>
        <para>Source texture is already RGBM encoded in <see cref="UnityEditor.TextureImporter" />.</para>
        <para>Use this setting on textures where the texture file already contains RGBM-encoded data. This is useful to make editor display proper texture previews.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterShape.Texture2D">
      <summary>Texture is 2D.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterShape.TextureCube">
      <summary>Texture is a Cubemap.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Default">
      <summary>This is the most common setting used for all the textures in general.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.NormalMap">
      <summary>Select this to turn the color channels into a format suitable for real-time normal mapping.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.GUI">
      <summary>Use this if your texture is going to be used on any HUD/GUI Controls.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Sprite">
      <summary>Select this if you will be using your texture for Sprite graphics.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cursor">
      <summary>Use this if your texture is going to be used as a cursor.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cookie">
      <summary>This sets up your texture with the basic parameters used for the Cookies of your lights.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Lightmap">
      <summary>This sets up your texture with the parameters used by the lightmap.</summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.SingleChannel">
      <summary>Use this for texture containing a single channel.</summary>
    </member>
    <member name="F:UnityEditor.TizenOSVersion.Version23">
      <summary>Application will be compatible with Tizen 2.3 or later.</summary>
    </member>
    <member name="F:UnityEditor.TizenOSVersion.Version24">
      <summary>Application will be compatible with Tizen 2.4 or later.</summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.Large">
      <summary>The loading indicator size is large and rotates clockwise.</summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.InversedLarge">
      <summary>The loading indicator size is large and rotates counterclockwise.</summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.Small">
      <summary>The loading indicator size is small and rotates clockwise.</summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.InversedSmall">
      <summary>The loading indicator size is small and rotates counterclockwise.</summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.DontShow">
      <summary>Sets your game to not show any indicator while loading.</summary>
    </member>
    <member name="F:UnityEditor.Tool.View">
      <summary>The view tool is active - Use <see cref="UnityEditor.Tools.viewTool" /> to find out which view tool we're talking about.</summary>
    </member>
    <member name="F:UnityEditor.Tool.Move">
      <summary>The move tool is active.</summary>
    </member>
    <member name="F:UnityEditor.Tool.Rotate">
      <summary>The rotate tool is active.</summary>
    </member>
    <member name="F:UnityEditor.Tool.Scale">
      <summary>The scale tool is active.</summary>
    </member>
    <member name="F:UnityEditor.Tool.Rect">
      <summary>The rect tool is active.</summary>
    </member>
    <member name="F:UnityEditor.Tool.None">
      <summary>No tool is active. Set this to implement your own in-inspector toolbar (like the terrain editor does).</summary>
    </member>
    <member name="F:UnityEditor.tvOSSdkVersion.Device">
      <summary>Device SDK.</summary>
    </member>
    <member name="F:UnityEditor.tvOSSdkVersion.Simulator">
      <summary>Simulator SDK.</summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.Unknown">
      <summary>Unknown tvOS version, managed by user.</summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.tvOS_9_0">
      <summary>Target tvOS 9.0.</summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.tvOS_9_1">
      <summary>Target tvOS 9.1.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kPosition">
      <summary>Position.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kNormal">
      <summary>Vertex normal.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kColor">
      <summary>Vertex color.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV0">
      <summary>Texture coordinate channel 0. Usually used for Albedo texture.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV1">
      <summary>Texture coordinate channel 1. Usually used for baked lightmap.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV2">
      <summary>Texture coordinate channel 2. Usually used for realtime GI.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV3">
      <summary>Texture coordinate channel 3.</summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kTangent">
      <summary>Tangent.</summary>
    </member>
    <member name="F:UnityEditor.ViewTool.None">
      <summary>View tool is not selected.</summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Orbit">
      <summary>The orbit tool is selected.</summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Pan">
      <summary>The pan tool is selected.</summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Zoom">
      <summary>The zoom tool is selected.</summary>
    </member>
    <member name="F:UnityEditor.ViewTool.FPS">
      <summary>The FPS tool is selected.</summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Brotli">
      <summary>WebGL resources are stored using Brotli compression.</summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Gzip">
      <summary>WebGL resources are stored using Gzip compression.</summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Disabled">
      <summary>WebGL resources are uncompressed.</summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.None">
      <summary>
        <para>Disable exception support.</para>
        <para>With this option, exceptions will not be supported at all in WebGL. Any throw statement executed will halt your content with an error.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly">
      <summary>
        <para>Enable throw support.</para>
        <para>With this option, exceptions can be thrown and caught in WebGL. But only exceptions explictly thrown will work. NullReferenceExceptions can still cause your content to fail. This has a significant cost in performance and build size over WebGLExceptionSupport.None, so only use it when you need it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.Full">
      <summary>Enable exception support for all exceptions.</summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Debug">
      <summary>Asserts enabled, memory profiling enabled, Nintendo Wii U profiler linked, no optimizations.</summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.DebugOptimized">
      <summary>Asserts enabled, memory profiling enabled, Nintendo Wii U profiler linked, optimized build.</summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Development">
      <summary>Memory profiling enabled, Nintendo Wii U profiler linked, optimizations enabled.</summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Master">
      <summary>Optimizations enabled.</summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.Unpackaged">
      <summary>
        <para>Unpacked.</para>
        <para>Build player is ready for PCFS and is not processed further.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.WUMADFile">
      <summary>
        <para>WUMAD package.</para>
        <para>Player is packaged into a WUMAD using 'cafex makemaster' command.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.DownloadImage">
      <summary>
        <para>Download image.</para>
        <para>Player is packaged into a WUMAD and unpacked using 'cafex makedownload' command to create a downloadable image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUTVResolution.Resolution_720p">
      <summary>1280×720 pixels.</summary>
    </member>
    <member name="F:UnityEditor.WiiUTVResolution.Resolution_1080p">
      <summary>1920×1080 (Full HD).</summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Debug">
      <summary>Debug configuation. No optimizations, profiler code enabled.</summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Release">
      <summary>Release configuration. Optimization enabled, profiler code enabled.</summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Master">
      <summary>Master configuation. Optimizations enabled, profiler code disabled. This configuration is used when submitting the application to Windows Store.</summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.AnyDevice">
      <summary>
        <para>The application targets all devices that run Windows Store applications.</para>
        <para>This value results in poorer settings choices for any particular device type but works on all of them.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.PC">
      <summary>
        <para>Application targets PCs.</para>
        <para>This value optimizes the application for PCs running Direct3D feature level 10.0+. It favors image quality and uses features unavailable on lower Direct3D feature levels, such as FP16 textures.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.Mobile">
      <summary>
        <para>Application targets mobile devices.</para>
        <para>This value optimizes the application for mobile devices, such as phones or tablets. It favors lower quality in exchange for extra performance and less battery usage.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.HoloLens">
      <summary>
        <para>The application targets HoloLens.</para>
        <para>This value optimizes the application for running on HoloLens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Development">
      <summary>Development player.</summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Master">
      <summary>Master player (submission-proof).</summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Debug">
      <summary>Debug player (for building with source code).</summary>
    </member>
    <member name="P:UnityEditor.CustomEditor.isFallback">
      <summary>
        <para>If true, match this editor only if all non-fallback editors do not match. Defaults to false.</para>
        <para>Unity does a two-pass match to hook up editors with inspected types. First the non-fallback editors are tested, and if none match, then the fallbacks are tested for a match. Setting this flag lets you set up a default editor for a given type, while still permitting another editor type to override it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type)">
      <summary>Defines which object type the custom editor class can edit.</summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <seealso cref="T:UnityEditor.EditorTests.Batch" />
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type,System.Boolean)">
      <summary>Defines which object type the custom editor class can edit.</summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <param name="editorForChildClasses">If true, child classes of inspectedType will also show this editor. Defaults to false.</param>
      <seealso cref="T:UnityEditor.EditorTests.Batch" />
    </member>
    <member name="M:UnityEditor.CustomPreviewAttribute.#ctor(System.Type)">
      <summary>
        <para>Tells a DefaultPreview which class it's a preview for.</para>
        <para>When you make a custom preview, you need put this attribute on the preview class.</para>
      </summary>
      <param name="type">The type you want to create a custom preview for.</param>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <c>Serializable</c> class, the type should be that class. If the drawer is for script variables with a specific <see cref="UnityEngine.PropertyAttribute" />, the type should be that attribute.</param>
      <seealso cref="T:UnityEditor.PropertyDrawer" />
      <seealso cref="T:UnityEditor.DecoratorDrawer" />
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <c>Serializable</c> class, the type should be that class. If the drawer is for script variables with a specific <see cref="UnityEngine.PropertyAttribute" />, the type should be that attribute.</param>
      <param name="useForChildren">If true, the drawer will be used for any children of the specified class unless they define their own drawer.</param>
      <seealso cref="T:UnityEditor.PropertyDrawer" />
      <seealso cref="T:UnityEditor.DecoratorDrawer" />
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType)">
      <summary>Defines when the gizmo should be invoked for drawing.</summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
      <seealso cref="T:UnityEditor.GizmoType" />
      <seealso cref="T:UnityEditor.DrawGizmo" />
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType,System.Type)">
      <summary>
        <para>Same as above. <c>drawnGizmoType</c> determines of what type the object we are drawing the gizmo of has to be.</para>
        <para>If drawnGizmoType is null, the type will be determined from the first parameter of the draw gizmo method. If drawnGizmoType is not null, it must be the same type as, or a subtype of, the type of the first parameter.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
      <param name="drawnGizmoType">Type of object for which the gizmo should be drawn.</param>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>
          <c>MenuItem</c> is an attribute that precedes a script function. This makes the function appear in the Unity menu system. The menu location is specified by the <c>itemName</c> argument. <c>isValidateFunction</c> is used to make a <c>MenuItem</c> function as one that will be executed before a script function with the same <c>itemName</c> argument. The second argument is boolean. If this argument is set to <c>true</c> it will mark the associated function as one that is called before the execution of the second script function. This second script function with the same <c>itemName</c> will be executed next. <c>priority</c> determines how the following script function is ordered in the menu system. The integer value is compared against values on other script functions. If the integer value is greater than other values then the <c>MenuItem</c> script function will be placed at the bottom of the list. The value of <c>priority</c> can also be used to manage the list of script functions into groups. The example later in this page describes more about this feature. The following script example adds two functions into a Example menu system.</para>
        <para>This simple following example shows how the <c>Example</c> menu can have two entries divided by a separator line. This happens when the <c>priority</c> argument is separated by more than 10. (However, see the following description.)</para>
        <para>Note: The understanding of ten or greater is considered to create a divider in the menu. However, as per the example above, the difference between script function need to have the <c>priority</c> separated by 11 or more. This is why the example before has a value of 100 and one of 111. Changing 111 to 110 does not have a divider.</para>
      </summary>
      <param name="itemName">The <c>itemName</c> is the menu item represented like a pathname. For example the menu item could be "GameObject/Do Something".</param>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>
          <c>MenuItem</c> is an attribute that precedes a script function. This makes the function appear in the Unity menu system. The menu location is specified by the <c>itemName</c> argument. <c>isValidateFunction</c> is used to make a <c>MenuItem</c> function as one that will be executed before a script function with the same <c>itemName</c> argument. The second argument is boolean. If this argument is set to <c>true</c> it will mark the associated function as one that is called before the execution of the second script function. This second script function with the same <c>itemName</c> will be executed next. <c>priority</c> determines how the following script function is ordered in the menu system. The integer value is compared against values on other script functions. If the integer value is greater than other values then the <c>MenuItem</c> script function will be placed at the bottom of the list. The value of <c>priority</c> can also be used to manage the list of script functions into groups. The example later in this page describes more about this feature. The following script example adds two functions into a Example menu system.</para>
        <para>This simple following example shows how the <c>Example</c> menu can have two entries divided by a separator line. This happens when the <c>priority</c> argument is separated by more than 10. (However, see the following description.)</para>
        <para>Note: The understanding of ten or greater is considered to create a divider in the menu. However, as per the example above, the difference between script function need to have the <c>priority</c> separated by 11 or more. This is why the example before has a value of 100 and one of 111. Changing 111 to 110 does not have a divider.</para>
      </summary>
      <param name="itemName">The <c>itemName</c> is the menu item represented like a pathname. For example the menu item could be "GameObject/Do Something".</param>
      <param name="isValidateFunction">If <c>isValidateFunction</c> is true, this is a validation function and will be called before invoking the menu function with the same <c>itemName</c>.</param>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>
          <c>MenuItem</c> is an attribute that precedes a script function. This makes the function appear in the Unity menu system. The menu location is specified by the <c>itemName</c> argument. <c>isValidateFunction</c> is used to make a <c>MenuItem</c> function as one that will be executed before a script function with the same <c>itemName</c> argument. The second argument is boolean. If this argument is set to <c>true</c> it will mark the associated function as one that is called before the execution of the second script function. This second script function with the same <c>itemName</c> will be executed next. <c>priority</c> determines how the following script function is ordered in the menu system. The integer value is compared against values on other script functions. If the integer value is greater than other values then the <c>MenuItem</c> script function will be placed at the bottom of the list. The value of <c>priority</c> can also be used to manage the list of script functions into groups. The example later in this page describes more about this feature. The following script example adds two functions into a Example menu system.</para>
        <para>This simple following example shows how the <c>Example</c> menu can have two entries divided by a separator line. This happens when the <c>priority</c> argument is separated by more than 10. (However, see the following description.)</para>
        <para>Note: The understanding of ten or greater is considered to create a divider in the menu. However, as per the example above, the difference between script function need to have the <c>priority</c> separated by 11 or more. This is why the example before has a value of 100 and one of 111. Changing 111 to 110 does not have a divider.</para>
      </summary>
      <param name="itemName">The <c>itemName</c> is the menu item represented like a pathname. For example the menu item could be "GameObject/Do Something".</param>
      <param name="isValidateFunction">If <c>isValidateFunction</c> is true, this is a validation function and will be called before invoking the menu function with the same <c>itemName</c>.</param>
      <param name="priority">The order by which the menu items are displayed.</param>
    </member>
    <member name="M:UnityEditor.PreferenceItem.#ctor(System.String)">
      <summary>Creates a section in the Preferences Window called <c>name</c> and invokes the static function following it for the section's GUI.</summary>
    </member>
  </members>
</doc>